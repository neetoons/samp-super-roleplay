public OnIncomingConnection(playerid, ip_address[], port)
{
	if(!server_loaded) BlockIpAddress(ip_address, 20 * 1000);
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(CheckPlayerFakeClient(playerid)) Kick(playerid);

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_CONNECTED;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] = true;
	PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	PLAYER_TEMP[playerid][pt_CREW_HELP] = false;
	PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = -1;
	PLAYER_TEMP[playerid][pt_COMBAT] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_ID] = -1;
	PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	
	GetPlayerName(playerid, PLAYER_TEMP[playerid][pt_NAME], 24);
	GetPlayerIp(playerid, PLAYER_TEMP[playerid][pt_IP], 16);
	
	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	CancelSelectTextDrawEx(playerid);
	SetPlayerScore(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);
	

	//
	if(!IsValidRPName(PLAYER_TEMP[playerid][pt_NAME]))
	{
		PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = false;
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Bienvenido, has entrado a un servidor de rol.\n\nTu nombre no cumple con el formato necesario.\nPor favor utilice el formato: Nombre_Apellido.", "Entiendo", "");
		KickEx(playerid, 500);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = true;
		SetRolePlayNames(playerid);

		if(GetNumberOfPlayersOnThisIP(PLAYER_TEMP[playerid][pt_IP]) > 3)
		{
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Ha sido expulsado por exceder el máximo de conexiones desde una IP.", "Entiendo", "");
			KickEx(playerid, 500);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = SetTimerEx("KickPlayer", SECURE_LOGIN_TIME, false, "i", playerid);

			GameTextForPlayer(playerid, "~y~cargando...", 10000, 3);
			CreatePlayerTextDraws(playerid);
			SetPiDefaultValues(playerid);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][i]);

	if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1) {
		KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
		PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	}

	if(PLAYER_TEMP[playerid][pt_COMBAT])
	{
		new 
			str_text[190];

		PLAYER_TEMP[playerid][pt_COMBAT] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_COMBAT_TIMER]);
		PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = -1;

		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);

		ResetPlayerWeaponsEx(playerid);

		format(str_text, 190, "* %s ha perdido todas sus armas por desconectar estando en combate.", PLAYER_TEMP[playerid][pt_RP_NAME]);
		ProxDetector(playerid, 25.0, str_text, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 85);
	}

	if(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] != INVALID_ACTOR_ID)
	{
		DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
		PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid)
		{
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
		}
	}
	if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	}

	PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000 - PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
	ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] -= PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
	if(PI[playerid][ac_CREW]) CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL) PI[playerid][ac_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);

	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextDraws(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], false);

	//db
	if(ACCOUNT_INFO[playerid][ac_ID] != 0)
	{
		if(PLAYER_TEMP[playerid][pt_USER_LOGGED]) //guardar datos solo si ha logeado
		{
			if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK && PI[playerid][ac_WANTED_LEVEL] > 0) {
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_HOSPITAL;
			}

			PI[playerid][ac_CONNECTED] = 0;
			PI[playerid][ac_PLAYERID] = 0;
			UpdatePlayerWorldInfo(playerid);

			getDateTime(ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);
			SavePlayerData(playerid);
			SavePlayerVehicles(playerid, true);
			SavePlayerToys(playerid);
			SavePlayerWeaponsData(playerid);
			SavePlayerWorkLevels(playerid);
			
			//msg
			new disconnect_message[128];
			switch(reason)
			{
				case 0: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", PLAYER_TEMP[playerid][pt_RP_NAME]);
				case 1: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				case 2: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			}
			NearbyMessage(PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);
		}
		else {
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 0, playerid = 0 WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
	}

	//reset
	ResetPlayerVariables(playerid);
	return 1;
}

ResetPlayerVariables(playerid)
{
	new tmp_PI[enum_PI]; PI[playerid] = tmp_PI;

	new temp_PLAYER_TEMP[Temp_Enum]; PLAYER_TEMP[playerid] = temp_PLAYER_TEMP;
	
	new temp_PLAYER_TOYS[Player_Toys_Info];
	for(new i = 0; i != MAX_SU_TOYS; i ++) PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
	
	new temp_PLAYER_POCKET[Player_Pocket_Enum];
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;
	
	
	new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum]; 
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
	
	new temp_PLAYER_GPS[Player_GPS_Enum]; 
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;
	
	new tmp_PLAYER_WORKS[enum_PLAYER_WORKS];
	for(new i = 0; i != sizeof(PLAYER_WORKS[]); i ++) PLAYER_WORKS[playerid][i] = tmp_PLAYER_WORKS;
	
	new temp_PLAYER_PROPERTY_CONSTRUCTO[PLAYER_PROPERTY_CONSTRUCTOR_ENU]; PLAYER_PROPERTY_CONSTRUCTOR[playerid] = temp_PLAYER_PROPERTY_CONSTRUCTO;
	
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;
	
	new tmp_PLAYER_AC_INFO[e_PLAYER_AC_INFO];
	for(new i = 0; i != sizeof(ac_Info); i ++) PLAYER_AC_INFO[playerid][i] = tmp_PLAYER_AC_INFO;
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
		PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_ID] == 0) continue;
		if(ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success) BlockIpAddress(ip, 12000);
    return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return Kick(playerid);

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Primer spawn
	{
		if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1) {
			KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
			PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
		}

		if(PI[playerid][ac_CONFIG_SECURE_LOGIN]) {
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM player_secure_login WHERE TIMESTAMPDIFF(DAY, last_connection, NOW()) > "#SECURE_LOGIN_IP_DAYS" AND id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
		else {
			SendNotification(playerid, "Activa la verificación en dos pasos para poder proteger tu cuenta, utiliza /ayuda verificacion para más información.");
		}

		new now = gettime();
		PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = now;
		PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] = now + 300;
		format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);
		
		if(PI[playerid][ac_CREW]) SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		ApplyAnimation(playerid,"SWAT","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"MEDIC","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SHOP","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"FOOD","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CHAINSAW","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"ROB_BANK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CARRY","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"PED","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SWEET","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CRACK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"POLICE","null",0.0,0,0,0,0,0);

		if(PI[playerid][ac_POLICE_DUTY] != 0)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_POLICE, INVALID_VEHICLE_ID);
			else PI[playerid][ac_POLICE_DUTY] = 0;
		}
		switch(ACCOUNT_INFO[playerid][ac_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				SetPlayerVirtualWorld(playerid, 0);

				if(PI[playerid][ac_WANTED_LEVEL] > 0)
				{
					PI[playerid][ac_POLICE_JAIL_ID] = 0;
					JailPlayer(playerid);
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][ac_POLICE_JAIL_TIME] < 5) PI[playerid][ac_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][ac_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = PI[playerid][ac_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{
				if(ACCOUNT_INFO[playerid][ac_VIP]) PI[playerid][ac_POLICE_JAIL_TIME] = 150 * PI[playerid][ac_WANTED_LEVEL];
				else PI[playerid][ac_POLICE_JAIL_TIME] = 300 * PI[playerid][ac_WANTED_LEVEL];
				
				PI[playerid][ac_WANTED_LEVEL] = 0;
				
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][ac_POLICE_JAIL_TIME] < 5) PI[playerid][ac_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][ac_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
				
				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				
				new time = PI[playerid][ac_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));
				
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
				if(index == -1)
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = New_User_Pos[0];
					PI[playerid][ac_POS_Y] = New_User_Pos[1];
					PI[playerid][ac_POS_Z] = New_User_Pos[2];
					PI[playerid][ac_ANGLE] = New_User_Pos[3];
					PI[playerid][ac_INTERIOR] = 0;
					
					SetPlayerPosEx(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], PI[playerid][ac_INTERIOR], 0);
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][ac_LOCAL_INTERIOR] = 0;
						PI[playerid][ac_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][ac_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][ac_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][ac_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][ac_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
						
						SetPlayerPosEx(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], PI[playerid][ac_INTERIOR], 0);
					}
				}
					
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
				
				TogglePlayerControllableEx(playerid, true);
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				PI[playerid][ac_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				
				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
								
				//ClearPlayerChat(playerid);
				if(PI[playerid][ac_WANTED_LEVEL] > 0)
				{
					if(ACCOUNT_INFO[playerid][ac_VIP]) PI[playerid][ac_POLICE_JAIL_TIME] = 150 * PI[playerid][ac_WANTED_LEVEL];
					else PI[playerid][ac_POLICE_JAIL_TIME] = 300 * PI[playerid][ac_WANTED_LEVEL];
					
					SendNotification(playerid, "Fuiste ingresado en ~r~el centro médico más cercano~w~.~n~~n~Espera mientras te recuperas.");
				}
				else
				{
					SendNotification(playerid, "Fuiste ingresado en ~r~el centro médico más cercano~w~.~n~~n~Espera mientras te recuperas.");
				}

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
		
		for(new i = 0; i < LOAD_SCREEN_TEXTDRAWS_SIZE; i ++) {
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);
		}

		new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
		if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
		{
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;
			
			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
			PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		}
		else SendFormatNotification(playerid, "Escribe ~g~/comprarnivel ~w~para subir al nivel ~g~%d ~w~por ~g~%d dólares~w~.", ACCOUNT_INFO[playerid][ac_LEVEL] + 1, ACCOUNT_INFO[playerid][ac_LEVEL] * 150); //
		
		if(PI[playerid][ac_PHONE_NUMBER])
		{
			inline OnOfflineMessagesChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new unreaded_messages;
						cache_get_value_index_int(0, 0, unreaded_messages);
						if(unreaded_messages > 0) SendClientMessageEx(playerid, -1, "Tienes {f1f442}%d {FFFFFF}mensajes nuevos en tu /movil desde tu última conexión.", unreaded_messages);
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pmessages SET offline = 0 WHERE to_id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
				mysql_tquery(srp_db, QUERY_BUFFER);
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM pmessages WHERE to_id = %d AND offline = 1;", ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnOfflineMessagesChecked, QUERY_BUFFER);

		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if(!PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
			{
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_HOSPITAL;
				PI[playerid][ac_LOCAL_INTERIOR] = 0;
				if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1) {
					CallLocalFunction("OnPlayerExitInterior", "ii", playerid, PLAYER_TEMP[playerid][pt_INTERIOR_INDEX]);
				}
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				
				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
				
				ClearPlayerChat(playerid);
				if(PI[playerid][ac_WANTED_LEVEL] > 0 || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					SendNotification(playerid, "Fuiste ingresado en el centro médico más cercano.");
					SendNotification(playerid, "Cuando te recuperes serás llevado a la cárcel.");
				}
				else
				{
					SendNotification(playerid, "Fuiste ingresado en el centro médico más cercano.");
					SendNotification(playerid, "Espera mientras te recuperas.");
				}
				
				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
	{
		if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
			PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][ac_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}
		SetPlayerInterior(playerid, PI[playerid][ac_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerHud(playerid);
		TogglePlayerControllableEx(playerid, false);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		SetCameraBehindPlayer(playerid);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
	else SetPlayerSkin(playerid, PI[playerid][ac_POLICE_DUTY]);

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_NORMAL;
	SetPlayerToys(playerid);
	if(ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_JAIL && ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_CRACK) SetWeaponsForPlayer(playerid);
	if(ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_HOSPITAL) SetPlayerWantedLevelEx(playerid, PI[playerid][ac_WANTED_LEVEL]);
	SetPlayerArmedWeapon(playerid, 0);
	SetPlayerNormalColor(playerid);
	SetPlayerCityWeather(playerid);
	GameTextForPlayer(playerid, "_", 500, 3);
	PLAYER_TEMP[playerid][pt_CONTROL] = false;
	
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	return 1;
}

CMD:cachear(playerid, params[])
{
	if(!PI[playerid][ac_CREW]) return SendNotification(playerid, "No formas parte de una banda.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /cachear [playerid/nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás de pie.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PI[params[0]][ac_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "El jugador no está abatido.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar de pie.");
	
	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
	
	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[params[0]][i][player_weapon_VALID]) continue;
		
		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[params[0]][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[params[0]][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", PLAYER_TEMP[playerid][pt_RP_NAME]);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "Continuar", "Cerrar");
	
	new action[64];
	format(action, sizeof action, "cachea rápidamente a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:morir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "No estás malherido");
	
	new now = gettime();
	if(now < PLAYER_TEMP[playerid][pt_DEATH_TIME] + 30)
	{
		new time = 30 - (now - PLAYER_TEMP[playerid][pt_DEATH_TIME]);
		SendFormatNotification(playerid, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
		return 1;
	}

	SetPlayerHealthEx(playerid, 0.0);
	Auto_SendPlayerAction(playerid, "ha elegido la salida rápida.");
	return 1;
}

CMD:gpos(playerid, params[])
{
	new Float:pos[3], Float:angle;
	if(IsPlayerInAnyVehicle(playerid)) {
		new vehicleId = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicleId, pos[0], pos[1], pos[2]);
		GetVehicleZAngle(vehicleId, angle);
	}
	else {
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, angle);
	}

	if(isnull(params)) printf("%f, %f, %f, %f, %d", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid));
	else printf("%f, %f, %f, %f, %d //%s", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid), params);
	return 1;
}

CMD:cpos(playerid, params[])
{
	new Float:pos[3], Float:at[3];
	GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerCameraLookAt(playerid, at[0], at[1], at[2]);

	printf("{%f, %f, %f, %f, %f, %f}", pos[0], pos[1], pos[2], at[0], at[1], at[2]);
	return 1;
}

hook OnPlayerDeath(playerid, killerid, reason)
{
	if(PLAYER_TEMP[playerid][pt_KICKED] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	if(PLAYER_TEMP[playerid][pt_COMBAT]) ResetCombat(playerid);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	if(!ACCOUNT_INFO[playerid][ac_VIP]) SetPlayerArmourEx(playerid, 0.0);
	
	if(ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH]);
			if(interval < 50)
			{
				if(!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}
	
	HidePlayerMessage(playerid);
	
	if(IsPlayerConnected(killerid) && PI[killerid][ac_STATE] == ROLEPLAY_STATE_NORMAL && ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		if(!PLAYER_WORKS[killerid][WORK_POLICE][pwork_SET])
		{
			if(IsPlayerInSafeZone(killerid))
			{
				SendClientMessage(killerid, -1, "Estás en una zona segura, la policía ha sido avisada del homicidio.");
				
				new level = PI[killerid][ac_WANTED_LEVEL] + 3;
				if(level > 6) level = 6;

				SetPlayerWantedLevelEx(killerid, level);
				
				new city[45], zone[45];
				GetPlayerZones(killerid, city, zone);

				new message[145];
				format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s ha causado un asesinato en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[killerid][pt_RP_NAME], city, zone);
				SendPoliceRadioMessage(-1, -1, message);
				
				PLAYER_TEMP[killerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW])
	{
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) ClosePlayerClothingMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
	}

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z]);
	GetPlayerFacingAngle(playerid, PI[playerid][ac_ANGLE]);
	PI[playerid][ac_INTERIOR] = GetPlayerInterior(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], false);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PI[playerid][ac_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP]) CancelPlayerTuningShop(playerid);
	if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE])
	{
		PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 2.363841);
		SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);
	}
	if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
		}
	}
	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		PI[playerid][ac_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
		if(PI[playerid][ac_POLICE_JAIL_TIME] < 5) PI[playerid][ac_POLICE_JAIL_TIME] = 5;
		PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		PI[playerid][ac_INTERIOR] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR];
		SetPlayerVirtualWorld(playerid, 0);
	}
	else
	{
		new bool:wanted_level_go_to_hospital = false;
		/*if(PI[playerid][ac_WANTED_LEVEL] > 0 && CountPolicesOnDuty() < 2) {
			wanted_level_go_to_hospital = true;
		}*/
		
		if(wanted_level_go_to_hospital || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		{
			DisablePlayerInjuredMark(playerid);
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_HOSPITAL;
			PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_DEATH_TIME] = gettime();
			ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_CRACK;
			
			new Float:pos[3], Float:angle;
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(playerid, angle);
			
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], pos[0], pos[1], pos[2], angle, 0, 0, 0, 0, 0, 0);
		}
	}
	
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
   	return 1;
}

forward OnSecureLoginRequestCode(index, response_code, data[]);
public OnSecureLoginRequestCode(index, response_code, data[]) {
	if(response_code == 200) {
		GameTextForPlayer(index, "_", 500, 3);
		PLAYER_TEMP[index][pt_BAD_LOGIN_ATTEMP] = 0;
		ShowDialog(index, DIALOG_SECURE_LOGIN_INSERT_CODE);
	}
	else Kick(index);
}

forward OnSecureLoginCheckCode(index, response_code, data[]);
public OnSecureLoginCheckCode(index, response_code, data[]) {
	if(response_code == 200) {
		PLAYER_TEMP[index][pt_BAD_LOGIN_ATTEMP] = 0;
		
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO player_secure_login (ip, id_player) VALUES ('%e', %d);", PLAYER_TEMP[index][pt_IP], ACCOUNT_INFO[index][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);

		SendNotification(index, "Se ha confirmado el inicio de sesión.");
		LoginPlayer(index);
	}
	else {
		PLAYER_TEMP[index][pt_BAD_LOGIN_ATTEMP] ++;
		if(PLAYER_TEMP[index][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(index);
		ShowDialog(index, DIALOG_SECURE_LOGIN_INSERT_CODE);
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		PlayAudioStreamForPlayer(playerid, Intro_Audios[random(sizeof Intro_Audios)]);
		
		if(!PLAYER_TEMP[playerid][pt_USER_VALID_NAME] || PLAYER_TEMP[playerid][pt_KICKED] || PLAYER_TEMP[playerid][pt_CLASSED]) Kick(playerid);
		else
		{
			PLAYER_TEMP[playerid][pt_CLASSED] = true;
			TogglePlayerSpectatingEx(playerid, true);
			ClearPlayerChat(playerid);

			//check ban
			inline OnPlayerBannedCheck()
			{
				new rows, bool:continue_proccess;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], expire_date[24], id_player, by, text[128], date[24], expire_date_ts, now[24], now_ts, bool:isnull_name, bool:isnull_by, bool:isnull_expire_date_ts;
						cache_is_value_name_null(0, "name", isnull_name);
						if(!isnull_name) cache_get_value_name(0, "name", name, 24);
						cache_get_value_name(0, "expire_date", expire_date, 24);
						cache_get_value_name_int(0, "id_player", id_player);
						cache_is_value_name_null(0, "by", isnull_by);
						if(!isnull_by) cache_get_value_name_int(0, "by", by);
						cache_get_value_name(0, "text", text, 128);
						cache_get_value_name(0, "date", date, 24);
						cache_is_value_name_null(0, "expire_date_ts", isnull_expire_date_ts);
						if(!isnull_expire_date_ts) cache_get_value_name_int(0, "expire_date_ts", expire_date_ts);
						cache_get_value_name(0, "now", now, 24);
						cache_get_value_name_int(0, "now_ts", now_ts);

						if(expire_date_ts)
						{
							//temporal
							if(now_ts >= expire_date_ts)
							{
								continue_proccess = true;
								mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
								mysql_tquery(srp_db, QUERY_BUFFER);

								if(id_player) AddPlayerBadHistory(id_player, -1, TYPE_UNBAN, "Readmitido (de tban)");
								SendNotification(playerid, "Tu cuenta ha sido re-admitida, no hagas que vuelvan a banearte.");
							}
							else
							{
								new dialog[600];
								format(dialog, sizeof dialog, 
									
									"\
										Esta IP o cuenta está expulsada temporalmente, detalles:\n\
										\n\
										Tu nombre: %s\n\
										\n\
										Nombre: %s\n\
										Expulsado por: %d\n\
										Fecha expulsión: %s\n\
										Razón: %s\n\
										\n\
										Fecha actual: %s\n\
										Fecha readmisión: %s\n\
										\n\
									",
									
									PLAYER_TEMP[playerid][pt_NAME],
									name, by, date, text, now, expire_date
								);

								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
								KickEx(playerid, 500);
							}

						}
						else
						{
							//permanente
							new dialog[480];
							format(dialog, sizeof dialog, 
								
								"\
									Esta IP o cuenta está expulsada permanentemente, detalles:\n\
									\n\
									Tu nombre: %s\n\
									\n\
									Nombre: %s\n\
									Expulsado por: %d\n\
									Fecha expulsión: %s\n\
									Razón: %s\n\
									\n\
								",
								
								PLAYER_TEMP[playerid][pt_NAME],
								name, by, date, text
							);
								
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
							KickEx(playerid, 500);
						}
					}
					else continue_proccess = true;

					if(continue_proccess)
					{
						inline OnPlayerCheck()
						{
							if(cache_get_row_count(rows))
							{
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);

								if(rows)
								{
									cache_get_value_name_int(0, "id", ACCOUNT_INFO[playerid][ac_ID]);
									cache_get_value_name(0, "ip", ACCOUNT_INFO[playerid][ac_IP], 16);
									cache_get_value_name(0, "email", ACCOUNT_INFO[playerid][ac_EMAIL], 32);
									cache_get_value_name(0, "salt", ACCOUNT_INFO[playerid][ac_SALT], 16);
									cache_get_value_name(0, "pass", ACCOUNT_INFO[playerid][ac_PASS], 65);
									cache_get_value_name_int(0, "config_secure_login", PI[playerid][ac_CONFIG_SECURE_LOGIN]);

									mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 1, playerid = %d WHERE id = %d;", playerid, ACCOUNT_INFO[playerid][ac_ID]);
									mysql_tquery(srp_db, QUERY_BUFFER);
									PLAYER_TEMP[playerid][pt_USER_EXIST] = true;
								}
								else PLAYER_TEMP[playerid][pt_USER_EXIST] = false;

								GameTextForPlayer(playerid, "_", 500, 3);
								if(PLAYER_TEMP[playerid][pt_USER_EXIST]) {
									new intro = random(sizeof(Intro_Info));
									SetPlayerVirtualWorld(playerid, WORLD_INTRO);

									TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);
									InterpolateCameraPos(playerid, Intro_Info[intro][intro_info_CAM_X], Intro_Info[intro][intro_info_CAM_Y], Intro_Info[intro][intro_info_CAM_Z], Intro_Info[intro][intro_info_CAM_RX], Intro_Info[intro][intro_info_CAM_RY], Intro_Info[intro][intro_info_CAM_RZ], 10000, CAMERA_MOVE);
									InterpolateCameraLookAt(playerid, Intro_Info[intro][intro_info_CAM_LOOK_AT_X], Intro_Info[intro][intro_info_CAM_LOOK_AT_Y], Intro_Info[intro][intro_info_CAM_LOOK_AT_Z], Intro_Info[intro][intro_info_CAM_LOOK_AT_RX], Intro_Info[intro][intro_info_CAM_LOOK_AT_RY], Intro_Info[intro][intro_info_CAM_LOOK_AT_RZ], 10000, CAMERA_MOVE);
									SetPlayerMyWeather(playerid, Intro_Info[intro][intro_info_WEATHER]);
									SetPlayerMyTime(playerid, Intro_Info[intro][intro_info_HOUR], 0);

									if(!PI[playerid][ac_CONFIG_SECURE_LOGIN] && strcmp(PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_IP])) // La IP actual no es la misma IP de la última conexión
									{
										SendNotification(playerid, "Tu dirección IP ha cambiado desde tu última conexión.");
									}
									ShowDialog(playerid, DIALOG_LOGIN);
								}
								else
								{
									TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
									// Nuevo usuario
									PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = CreateActor(Intro_Skins[0][0], 444.200225, 514.112182, 1001.419494, 0.939619); //ACTOR DE LA HABITACION DE LA INTRO
									SetActorVirtualWorld(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], playerid + 10);
									ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
									
									SetPlayerVirtualWorld(playerid, playerid + 10);
									InterpolateCameraPos(playerid, 447.1717, 512.9380, 1001.6884, 447.1717, 512.9380, 1001.6884, 4000);
									InterpolateCameraLookAt(playerid, 446.4043, 513.5767, 1001.7037, 446.4043, 513.5767, 1001.7037, 4000);
									SetPlayerInterior(playerid, 12);
									
									ShowDialog(playerid, DIALOG_REGISTER);
								}
							}
							else Kick(playerid);
						}
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, email, salt, pass, config_secure_login FROM player WHERE name = '%e';", PLAYER_TEMP[playerid][pt_NAME]);
						MySQL_TQueryInline(srp_db,  using inline OnPlayerCheck, QUERY_BUFFER);
					}
				}
				else Kick(playerid);
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT *, UNIX_TIMESTAMP(bans.expire_date) AS expire_date_ts, NOW() AS now, UNIX_TIMESTAMP(NOW()) AS now_ts FROM bans LEFT JOIN bad_history ON bans.id_history = bad_history.id WHERE bans.name = '%e' OR bans.ip = '%e';", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
			MySQL_TQueryInline(srp_db, using inline OnPlayerBannedCheck, QUERY_BUFFER);
		}
	}
	else if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_TEMP[playerid][pt_USER_LOGGED]) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	
	//PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_OCCUPIED;
	return 0;
}

public OnPlayerRequestSpawn(playerid) // Intentar 'spawnear' mediante la selección de skin << spawn >>
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);
    return 0;
}

forward minconnecttime();
public minconnecttime()
{
	SendRconCommand("minconnectiontime 0"); //3000");
	return 1;
}

FormatDialogStrings()
{
	new Dialog_Lines_String[256];
	
		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, "Producto\tPrecio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}
	
		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, "Producto\tPrecio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}
	
		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, "Producto\tPrecio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}

		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, "Producto\tPrecio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}
	
	//GPS
	new city[45], zone[45];

	//GPS CONCES
	format(DIALOG_PLAYER_GPS_SITE_7_String, sizeof DIALOG_PLAYER_GPS_SITE_7_String, "{"#SILVER_COLOR"}Lugar\t{"#BLUE_COLOR"}Zona\n");
	for(new i = 0; i != sizeof(SELL_VEHICLES_SHOPS_SPAWN); i++ )
	{
		GetPointZone(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}Concesionario %d\t{"#BLUE_COLOR"}%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_7_String, Dialog_Lines_String);
	}
	
	//Colores bandas
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}color %d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}

	format(DIALOG_CREDIT_String, sizeof DIALOG_CREDIT_String, 
		"\
			Servidor: "SERVER_NAME"\n\
			Web/foro: "SERVER_WEBSITE"\n\
			Versión: "SERVER_VERSION"\n\
			Fecha versión: "VERSION_DATE"\n\
			\n\
			"SERVER_NAME" es un servidor Roleplay nuevo por lo que actualmente\n\
			se encuentra desarrollo, puedes dejar tus sugerencias en el foro.\n\
			Actualmente al ser una versión inicial puede contener fallos.\n\
			\n\
			\n\
			Programación:\n\
			adri1\n\
		"
	);
	
	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rendirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /blowjob\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rodar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /borracho\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bomba\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /apuntar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /reir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /amenazar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /paja\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /herido\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /recostarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cubrirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /vomitar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /comer\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /despedir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /nalgada\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /agonizar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /besar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /crack\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /mear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /sentarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /fucku\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llamar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /taichi\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /beber\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /boxear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /saludar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llorar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /dormir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rapear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /astrip\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bailar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /alentar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /hablar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /asiento\n");
			
	return 1;
}


new 
	Club_Strippers_Actor[2],
	Club_Bar_Actor,
	Club_Actors[7];
	
new RandomStripAnimations[][] =
{
	"STR_A2B",
	"strip_G",
	"STR_B2C",
	"STR_C1",
	"STR_C2"
};

new RandomPayStripAnimations[][] =
{
	"PLY_CASH",
	"PUN_CASH",
	"PUN_HOLLER",
	"PUN_LOOP"
};
	
SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();
	
	//db
	LoadProperties();
	
	//HABITACION INTRO PARA REGISTRARSE
	CreateDynamicObject(19624, 446.51517, 514.81940, 1001.63550,   0.00000, 0.00000, 29.44436); //MALETA ROCKSTAR DE LA HABITACION DE LA INTRO
	SetDynamicObjectMaterial(CreateDynamicObject(19893, 444.1881, 514.5712, 1001.3964,   0.0000, 0.0000, 0.0), 1, 18646, "matcolours", "grey-50-percent", 0xFFFFFFFF); //LAPTOP DE LA HABITACION DE LA INTRO
	SetDynamicObjectMaterial(CreateDynamicObject(18981, 444.61780, 510.80801, 1004.14160,   0.00000, 90.00000, 0.00000), 0, 18646, "matcolours", "black", 0xFFFFFFFF); //TECHO NEGRO PRIMERA HABITACION DE LA INTRO
	CreateDynamicObject(2102, 443.90033, 514.92853, 1001.66467,   0.00000, 0.00000, 38.35522); //RADIO DE LA HABITACION DE LA INTRO

	LoadIntroData();
	
	//Mina
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Herramientas de minería\n{FFFFFF}3 productos disponibles.\nPresiona H para comprar.", 0xFFFFFFAA, 626.2347,116.3636,8.0031, 10);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 594.7598,-41.0603,791.2190-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 566.8312,-41.2121,791.2190-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 509.5341,-36.8747,790.7587-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 454.7086,-36.1840,790.3587-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 378.3867,-37.9046,790.3587-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 268.0978,-37.8627,790.3587-2.0, 15);
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Procesadora\n{FFFFFF}Presiona ALT para soltar los minerales.", 0xFFFFFFAA, 234.2289,-37.7960,790.3587-2.0, 15);

	
	
	//auto
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/examen {FFFFFF}para realizar el examen por 500$.", 0xFFFFFFFF, 1063.718994, -343.093566, 2797.699951, 5.0, .testlos = true, .worldid = -1, .interiorid = -1);

	//Putis
    CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'F' {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFFF, 1208.744140, -34.261119, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);
    CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'F' {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFFF, 1213.738037, -33.667881, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("Escribe {"#PRIMARY_COLOR"}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFFF, 1207.234375, -29.231435, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);

	Club_Strippers_Actor[0] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 0, .interiorid = 3);
    Club_Strippers_Actor[1] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("Osvalda", 0xFFFFFFAA, 1209.416503, -36.272216, 1001.484375 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("Tamara", 0xFFFFFFAA, 1215.355712, -33.439422, 1001.382812 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
    Club_Bar_Actor = CreateDynamicActor(195, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 0, .interiorid = 3);
	Club_Actors[0] = CreateDynamicActor(1, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 0, .interiorid = 3);
	Club_Actors[1] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 0, .interiorid = 3);
	Club_Actors[2] = CreateDynamicActor(21, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 0, .interiorid = 3);
	Club_Actors[3] = CreateDynamicActor(73, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 0, .interiorid = 3);
	Club_Actors[4] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 0, .interiorid = 3);
	Club_Actors[5] = CreateDynamicActor(127, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 0, .interiorid = 3);
	Club_Actors[6] = CreateDynamicActor(131, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 0, .interiorid = 3);
	UpdateThePutis();
	SetTimer("UpdateThePutis", 3000, true);

	// Map Icons Hospitales
	//for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) CreateDynamicMapIcon(Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], Hospital_Spawn_Positions[i][hspi_Z], 22, -1, 0, 0);
	
	//Tuning
	CreateDynamicMapIcon(263.592102, 22.960014, 2.170951, 63, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/tuning {FFFFFF}para tunear tu vehículo", 0xFFFFFFFF, 263.592102, 22.960014, 2.170951, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//3d texts armarios
	for(new i = 0; i < sizeof PROPERTY_CLOSET_POS; i++)
	{
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
		if(PROPERTY_INTERIORS[i][property_EMPTY_INTERIOR]) CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25 + PROPERTY_EMPTY_INTERIOR_Z_OFFSET, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
	}

	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[256];
		format(label_str, sizeof label_str, "{FF7373}%s\n{FFFFFF}Presiona {FF7373}[ H ] {FFFFFF}para ver las opciones disponibles", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}
	
	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, "{FF7373}%s\n{FFFFFF}Presiona {FF7373}[ H ] {FFFFFF}para alimentarte", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}
	
	// 3D Texts Bank
	for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("Banco\nPresiona {FF7373} [ H ] {FFFFFF}para realizar una operación", 0xFFFFFFFF, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
	for(new i = 0; i < sizeof BUY_PROPERTIES_SITES; i++) CreateDynamic3DTextLabel("Escribe {"#PRIMARY_COLOR"}/comprarcasa [ID] {FFFFFF}para comprar una propiedad", 0xFFFFFFFF, BUY_PROPERTIES_SITES[i][site_X], BUY_PROPERTIES_SITES[i][site_Y], BUY_PROPERTIES_SITES[i][site_Z] + 0.25, 10.0, .testlos = true, .worldid = BUY_PROPERTIES_SITES[i][site_WORLD], .interiorid = BUY_PROPERTIES_SITES[i][site_INTERIOR]);
	
	//Cajeros
	for(new i = 0; i < sizeof ATM_BANK; i ++)
	{
		CreateDynamicObject(ATM_BANK[i][atm_modelid], ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ], 0, 0);
		
		ATM_BANK[i][atm_X] += (-0.5 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		CreateDynamicMapIcon(ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], 52, -1, 0, 0);
		CreateDynamic3DTextLabel("Cajero automático\nPresiona {FF7373} [ H ] {FFFFFF}para realizar operaciones", 0xFFFFFFFF, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
		new atm_pickup_id = CreateDynamicPickup(0, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.10, 0, 0), info[3];
		info[0] = PICKUP_TYPE_ATM;
		info[1] = i; // Index
		info[2] = 0; // Nada
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, atm_pickup_id, E_STREAMER_EXTRA_ID, info);
	}
	
	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Gasolinera\n\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}9$/Litro\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/gasolina [litros / lleno] {FFFFFF}para repostar\n\nCompra {"#PRIMARY_COLOR"}/bidon {FFFFFF}de 20 litros por 250$", 0xFFFFFFFF, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//24/7 Int
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, -27.964675, -89.948631, 1003.546875 + 0.25, 10.0, .testlos = true, .interiorid = 18);

	//Mercado negro
	CreateDynamic3DTextLabel("{FF7373}Mercado negro\n{FFFFFF}Presiona {FF7373}[ H ] {FFFFFF}para comprar", 0xFFFFFFFF, 2119.059814, -2001.701904, 7.984375, 10.0, .testlos = true, .interiorid = 0, .worldid = 0);

	//Vehs venta
	for(new i = 0; i != sizeof SELL_INFO_VEHICLES; i ++)
	{
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_1] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_2] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		
		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle(SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID], SELL_INFO_VEHICLES[i][sell_info_SPAWN_X], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z], SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE], SELL_INFO_VEHICLES[i][sell_info_COLOR_1], SELL_INFO_VEHICLES[i][sell_info_COLOR_2], -1, false);
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_SELL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "EN VENTA");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = SELL_INFO_VEHICLES[i][sell_info_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = SELL_INFO_VEHICLES[i][sell_info_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		SELL_VEHICLES[vehicle_id][sell_vehicle_VALID] = true;
		SELL_VEHICLES[vehicle_id][sell_vehicle_SHOP] = SELL_INFO_VEHICLES[i][sell_info_SHOP];
		SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_PRICE];
		SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1; /*VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_LEVEL];*/
		SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_COINS];
		SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_VIP_LEVEL];
		
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1;
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA]) SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = 0;
		
		SetVehicleToRespawnEx(vehicle_id);
		
		
		new label_str[256];
		
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL])
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
							\n\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
							\n\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		else
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str, 
						sizeof label_str, 
						"\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		
		
		SELL_VEHICLES[vehicle_id][sell_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}
	
	//Concesionarios
	for(new i = 0; i < sizeof SELL_VEHICLES_SHOPS_SPAWN; i++)
	{
		CreateDynamicMapIcon(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 55, -1, 0, 0);
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}SALIDA DE VEHICULOS", 0xFFFFFFFF, SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}
	
	//Notario
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para vender\nalguna propiedad o vehículo", 0xFFFFFFFF, -474.596282, 289.679107, 2004.584960, 10.0, .testlos = true, .interiorid = 20);
	//Grua
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para solicitar\nel servicio de grúa a un vehículo", 0xFFFFFFFF, -508.645385, 322.147644, 2004.585937, 10.0, .testlos = true, .interiorid = 20);
	
	
	//San Andreas Vehicles
	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		
		new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;
		
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(work_info[ San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN] ][work_info_TYPE] == WORK_TYPE_FAMILY)
			{
				respawn_time = 2700;
			}
		}
		
		vehicle_id = CreateVehicle(San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2], respawn_time, false);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
		
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VIP] = San_Andreas_Vehicles[i][san_andreas_vehicle_vip];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = San_Andreas_Vehicles[i][san_andreas_vehicle_WORLD];
		
		if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
			WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
			WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
			WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
		}
		
		SetVehicleToRespawnEx(vehicle_id);
		CallLocalFunction("OnSanAndreasVehicleLoad", "i", vehicle_id);
	}
	CallLocalFunction("OnSanAndreasVehiclesLoad", "");
	
	//Barreras
	for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
	{
		new tmpobjid = CreateDynamicObject(966, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z], 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tmpobjid, 1, 9514, "711_sfw", "ws_carpark2", 0x00000000);
		tmpobjid = CreateDynamicObject(968, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_carparkwall2", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "ws_carparkwall2", 0x00000000);
		San_Andreas_Barriers[i][barrier_OBJECT_ID] = tmpobjid;

		new label_str[256];
		
		if(San_Andreas_Barriers[i][barrier_PRICE] > 0) format(label_str, sizeof label_str, "{FF7373}Peaje\n\n{FFFFFF}Toca el {FF7373}claxón {FFFFFF}para pagar {FF7373}%s$", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
		else {
			if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE]) format(label_str, sizeof label_str, "{FF7373}%c%s\n\n{FFFFFF}Toca el {FF7373}claxón {FFFFFF}para que te abran", toupper(work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][0]), work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][1]);
			else format(label_str, sizeof label_str, "{FFFFFF}Toca el {FF7373}claxón {FFFFFF}para que te abran");
		}

		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR], .testlos = true);

		San_Andreas_Barriers[i][barrier_PLAYER_X] = San_Andreas_Barriers[i][barrier_X] + (3.4 * floatsin(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Y] = San_Andreas_Barriers[i][barrier_Y] + (3.4 * floatcos(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Z] = San_Andreas_Barriers[i][barrier_Z];
	}
	
	//polciais
	for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
	{
		POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID] = CreateDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_MODELID], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RZ], 0, 0);
	}
	for(new i = 0; i != sizeof POLICE_DOORS; i ++)
	{
		POLICE_DOORS[i][police_door_OBJECT_ID] = CreateDynamicObject(POLICE_DOORS[i][police_door_MODELID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0, 0.0, POLICE_DOORS[i][police_door_RZ], POLICE_DOORS[i][police_door_WORLD], POLICE_DOORS[i][police_door_INTERIOR]);
		CreateDynamic3DTextLabel("Pulsa {FF7373} [ ENTER ] {FFFFFF}para abrir la puerta", 0xFFFFFFFF, POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 1.25, 5.0, .testlos = false, .interiorid = POLICE_DOORS[i][police_door_INTERIOR], .worldid = POLICE_DOORS[i][police_door_WORLD]);
	}
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 253.280288, 76.219017, 1003.640625, 5.0, .testlos = true, .interiorid = 6);
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 266.547180, 119.652816, 1004.617187, 5.0, .testlos = true, .interiorid = 10);
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 217.816406, 187.667922, 1003.031250, 5.0, .testlos = true, .interiorid = 3);

	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para equiparte", 0xFFFFFFFF, 219.244018, 69.982215, 1005.039062, 5.0, .testlos = true, .interiorid = 6);
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para equiparte", 0xFFFFFFFF, 262.945587, 109.785270, 1004.617187, 5.0, .testlos = true, .interiorid = 10);
	CreateDynamic3DTextLabel("Presiona {FF7373}[ H ] {FFFFFF}para equiparte", 0xFFFFFFFF, 222.683914, 186.956054, 1003.031250, 5.0, .testlos = true, .interiorid = 3);
	
	Jail_Areas[0] = CreateDynamicRectangle(258.236938, 72.319061, 273.117279, 95.841438, -1, 6);
	Jail_Areas[1] = CreateDynamicRectangle(211.001739, 117.171920, 236.010986, 104.004219, -1, 10);
	Jail_Areas[2] = CreateDynamicRectangle(204.957885, 180.868392, 183.743148, 168.624618, -1, 3);
	Jail_Areas[3] = CreateDynamicRectangle(366.3146, 1951.8367, 17.6406, 78.4408, -1, 13);

	//Safe Zones
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		SAFE_ZONES[i][safe_zone_AREA_ID] = CreateDynamicRectangle(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y], SAFE_ZONES[i][safe_zone_WORLD], SAFE_ZONES[i][safe_zone_INTERIOR]);
	}

	//Trabajos
	for(new i = 1; i < E_WORKS; i ++)
	{
		if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;
		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				if(obtain_work_coords[i][obtain_work_LABELS])
				{
					new label_str[256];

					format(label_str, sizeof label_str, "{FF7373}Puesto de trabajo (%s)\n\n{FFFFFF}Nivel requerido: {FF7373}%d\n{FFFFFF}Presiona {FF7373} [ H ]{FFFFFF} para conseguirlo", work_info[i][work_info_NAME], work_info[i][work_info_LEVEL]);
					CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
					CreateDynamicPickup(1239, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], -1, obtain_work_coords[i][obtain_work_INTERIOR]);
				}
				if(obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], -1, 0, 0);
			}
		}
	}

	//Random taximeters
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++) TAXI_METER_VEHICLE[i][veh_taxi_meter_PRICE] = minrand(2, 8);

	//Carga camioneros
	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/cargar {FFFFFF}para cargar el camión", 0xFFFFFFFF, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 10.0, .testlos = true, .interiorid = 0);
		CreateDynamicPickup(19135, 1, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], -1, 0);
	}

	//Mecánico
	Mechanic_Areas[0] = CreateDynamicRectangle(1808.799194, -1450.352661, 1837.703979, -1414.697753, 0, 0);
	Streamer_SetArrayData(STREAMER_TYPE_AREA, Mechanic_Areas[0], E_STREAMER_EXTRA_ID, { AREA_TYPE_MECHANIC });

	for(new i; i != sizeof MechanicStartWorkingCoords; i++)
		CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/mecanico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, MechanicStartWorkingCoords[i][0], MechanicStartWorkingCoords[i][1], MechanicStartWorkingCoords[i][2], 5.0, .testlos = true, .interiorid = 0);

	for(new i; i != sizeof MechanicBuyPiecesCoords; i++)
		CreateDynamic3DTextLabel("Piezas de mecánico\nEscribe {"#PRIMARY_COLOR"}/piezas [cantidad] {FFFFFF}para comprar piezas\nPrecio de pieza: {"#PRIMARY_COLOR"}50$", 0xFFFFFFFF, MechanicBuyPiecesCoords[i][0], MechanicBuyPiecesCoords[i][1], MechanicBuyPiecesCoords[i][2], 5.0, .testlos = true, .interiorid = 0);

	for(new i; i != sizeof MechanicBuyKitsCoords; i++)
		CreateDynamic3DTextLabel("Kits de reparación\n\nEscribe {"#PRIMARY_COLOR"}/kit {FFFFFF}para comprar un kit de reparación\nPrecio del kit: {"#PRIMARY_COLOR"}1.000$", 0xFFFFFFFF, MechanicBuyKitsCoords[i][0], MechanicBuyKitsCoords[i][1], MechanicBuyKitsCoords[i][2], 5.0, .testlos = true, .interiorid = 0);

	//Leñador
	CreateDynamicPickup(19793, 1, -527.670349, -97.338562, 63.176174, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/talar {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -527.670349, -97.338562, 63.176174, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Pizzero
	CreateDynamicPickup(1582, 1, 2097.355712, -1818.040771, 13.382812, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/pizzero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2097.355712, -1818.040771, 13.382812, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Medico
	CreateDynamicPickup(1275, 1, -2029.751342, -114.503044, 1035.171875, -1, 3);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/medico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -2029.751342, -114.503044, 1035.171875, 5.0, .testlos = true, .interiorid = 3);

	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		CreateDynamic3DTextLabel("Botiquines\n\nEscribe {"#PRIMARY_COLOR"}/botiquin {FFFFFF}para comprar un botiquín\nPrecio del botiquín: {"#PRIMARY_COLOR"}5.000$", 0xFFFFFFFF, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2], 5.0, .testlos = true);

	//mercado
	CreateDynamicActor(179, 2120.724853, -2000.400268, 7.984375, 130.0, true, 100.0, 0, 0);

	//Trash
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/basurero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -1906.577514, -1756.457519, 22.079319, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Ruta 0
	CreateTrashCheckpoint(0, 1440, -1812.46228, -558.37744, 15.73948,   0.00000, 0.00000, 274.24359);
	CreateTrashCheckpoint(0, 1440, -1793.84106, -312.50452, 24.46057,   0.00000, 0.00000, 268.49271);
	CreateTrashCheckpoint(0, 1440, -1801.20825, 115.39587, 14.55550,   0.00000, 0.00000, 280.09882);
	CreateTrashCheckpoint(0, 1440, -1750.40051, 323.11810, 6.61720,   0.00000, 0.00000, 319.06424);
	CreateTrashCheckpoint(0, 1440, -1814.43311, 511.15622, 28.66113,   0.00000, 9.00000, 304.31201);
	CreateTrashCheckpoint(0, 1440, -1982.79871, 614.85687, 34.61121,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2229.42896, 575.27448, 34.58952,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2385.20020, 513.64594, 28.11606,   0.00000, 0.00000, 282.48959);
	CreateTrashCheckpoint(0, 1440, -2258.51782, 221.79150, 34.74878,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -2266.30273, -206.86926, 34.86986,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -1995.48499, -771.90076, 31.56746,   0.00000, 0.00000, 90.00000);
		//Ruta 1
	CreateTrashCheckpoint(1, 1440, -2211.24414, -964.98248, 38.68247,   0.00000, 2.50000, 286.39740);
	CreateTrashCheckpoint(1, 1440, -2424.54443, -595.71997, 131.88649,   0.00000, -4.50000, 303.65921);
	CreateTrashCheckpoint(1, 1440, -2602.82544, -478.18484, 68.15035,   0.00000, 0.00000, 21.71607);
	CreateTrashCheckpoint(1, 1440, -2353.62256, -396.48764, 78.42006,   0.00000, -3.50000, 305.07410);
	CreateTrashCheckpoint(1, 1440, -2756.29199, -500.66721, 6.77589,   0.00000, 0.00000, 316.44635);
	CreateTrashCheckpoint(1, 1440, -2811.07056, -346.85269, 6.66456,   0.00000, 0.00000, 259.86459);
	CreateTrashCheckpoint(1, 1440, -2415.51563, -128.34013, 34.82273,   0.00000, 0.00000, 250.60507);
	CreateTrashCheckpoint(1, 1440, -2028.09985, -76.42242, 34.70956,   0.00000, 0.00000, 0.00000);
		//Ruta 2
	CreateTrashCheckpoint(2, 1440, -2193.88306, -2156.55347, 46.46848,   0.00000, -10.00000, 46.48320);
	CreateTrashCheckpoint(2, 1440, -2208.01904, -2280.10645, 30.12751,   0.00000, 0.00000, 331.91882);
	CreateTrashCheckpoint(2, 1440, -2125.33594, -2256.24902, 30.10599,   0.00000, 0.00000, 326.47290);
	CreateTrashCheckpoint(2, 1440, -2101.86353, -2313.20093, 30.14946,   0.00000, 0.00000, 42.68287);
	CreateTrashCheckpoint(2, 1440, -2183.69775, -2449.03003, 30.01783,   0.00000, 0.00000, 51.16318);
	CreateTrashCheckpoint(2, 1440, -2328.98047, -2704.17358, 44.41791,   6.17998, 5.88000, 340.20822);
	CreateTrashCheckpoint(2, 1440, -2601.78345, -2334.39746, 10.50614,   0.00000, 0.00000, 41.64481);
	
	//Leñador arboles
	Lumberjack_Area = CreateDynamicRectangle(-613.953796, -209.777252, -381.961181, -6.355076, 0, 0);
	for(new i = 0; i != sizeof LUMBER_TREES; i ++)
	{
		LUMBER_TREES[i][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[i][lumber_tree_MODELID], LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z], LUMBER_TREES[i][lumber_tree_RX], LUMBER_TREES[i][lumber_tree_RY], LUMBER_TREES[i][lumber_tree_RZ], 0, 0);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.", i);
		LUMBER_TREES[i][lumber_tree_LABEL] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}
	
	//Agricultor
	Farmer_Area = CreateDynamicCircle(1461.8894, -83.2621, 65.0, 0, 0);
	CreateDynamicMapIcon(1461.8894, -83.2621, 65.0, 53, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/semillas {FFFFFF}para comprar semillas", 0xFFFFFFFF, 1566.521606, 31.370532, 24.16406, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	
	//Cosechador
	Harvest_Area = CreateDynamicRectangle(-428.336059, -1667.658569, -116.565414, -1220.122070, 0, 0);
	return 1;
}

forward UpdateThePutis();
public UpdateThePutis()
{
	ApplyDynamicActorAnimation(Club_Bar_Actor, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);
	
	new 
		strip_anim = random(sizeof(RandomStripAnimations)),
		stripper = random(sizeof(Club_Strippers_Actor));
	ApplyDynamicActorAnimation(Club_Strippers_Actor[stripper], "STRIP", RandomStripAnimations[strip_anim], 4.1, 1, 0, 0, 0, 0);
	
	
	for(new i = 0; i != sizeof(Club_Actors); i ++)
	{
		ApplyDynamicActorAnimation(Club_Actors[i], "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

stock Float:GetSpeed(Float:vx, Float:vy, Float:vz)
{
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}


//By Kar
stock IsVehicleDrivingForward(vehicleid)
{
    new Float:Float[3];
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] < 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[1] > 0 && Float[2] > 0) return true;
    }
    return false;
}

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(route >= MAX_ROUTES) return print("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if(!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if(TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return print("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if(TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}
	
	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);
	
	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);
	
	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}
	
stock Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2,y1-y2,z1-z2);
}

CreateTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++) Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	
	Textdraws[textdraw_COMBAT_MODE] = TextDrawCreate(87.000000, 315.000000, "En_combate");
	TextDrawLetterSize(Textdraws[textdraw_COMBAT_MODE], 0.267000, 1.521185);
	TextDrawTextSize(Textdraws[textdraw_COMBAT_MODE], 0.000000, 98.000000);
	TextDrawAlignment(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawColor(Textdraws[textdraw_COMBAT_MODE], -16776961);
	TextDrawSetShadow(Textdraws[textdraw_COMBAT_MODE], 0);
	TextDrawSetOutline(Textdraws[textdraw_COMBAT_MODE], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_COMBAT_MODE], 255);
	TextDrawFont(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawSetProportional(Textdraws[textdraw_COMBAT_MODE], 1);

	Textdraws[textdraw_HUD][0] = TextDrawCreate(-15.000000, 446.000000, "barraReputacion");
	TextDrawLetterSize(Textdraws[textdraw_HUD][0], 0.000000, 0.500000);
	TextDrawTextSize(Textdraws[textdraw_HUD][0], 650.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][0], 1);
	TextDrawColor(Textdraws[textdraw_HUD][0], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][0], 140);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][0], 255);
	TextDrawFont(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);

	Textdraws[textdraw_HUD][1] = TextDrawCreate(497.000000, 112.000000, "hud:radar_datefood"); //Icono comida 
	TextDrawLetterSize(Textdraws[textdraw_HUD][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][1], 12.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][1], 1);
	TextDrawColor(Textdraws[textdraw_HUD][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][1], 255);
	TextDrawFont(Textdraws[textdraw_HUD][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);

	Textdraws[textdraw_HUD][2] = TextDrawCreate(499.000000, 102.000000, "bordebarraHambre");
	TextDrawLetterSize(Textdraws[textdraw_HUD][2], 0.000000, 0.699999);
	TextDrawTextSize(Textdraws[textdraw_HUD][2], 549.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][2], 1);
	TextDrawColor(Textdraws[textdraw_HUD][2], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][2], 255);
	TextDrawFont(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);

	Textdraws[textdraw_HUD][3] = TextDrawCreate(500.699981, 104.000000, "barraHambre");
	TextDrawLetterSize(Textdraws[textdraw_HUD][3], 0.000000, 0.238333);
	TextDrawTextSize(Textdraws[textdraw_HUD][3], 546.730102, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][3], 1);
	TextDrawColor(Textdraws[textdraw_HUD][3], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][3], 1414856922);
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][3], 255);
	TextDrawFont(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);

	Textdraws[textdraw_HUD][4] = TextDrawCreate(556.000000, 112.000000, "hud:radar_datedrink"); //Icono bebida
	TextDrawLetterSize(Textdraws[textdraw_HUD][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][4], 9.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][4], 1);
	TextDrawColor(Textdraws[textdraw_HUD][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][4], 255);
	TextDrawFont(Textdraws[textdraw_HUD][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);

	Textdraws[textdraw_HUD][5] = TextDrawCreate(556.000000, 102.000000, "bordeBarraSed");
	TextDrawLetterSize(Textdraws[textdraw_HUD][5], 0.000000, 0.699999);
	TextDrawTextSize(Textdraws[textdraw_HUD][5], 606.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][5], 1);
	TextDrawColor(Textdraws[textdraw_HUD][5], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][5], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][5], 255);
	TextDrawFont(Textdraws[textdraw_HUD][5], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][5], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);

	Textdraws[textdraw_HUD][6] = TextDrawCreate(557.699981, 104.000000, "barraSed");
	TextDrawLetterSize(Textdraws[textdraw_HUD][6], 0.000000, 0.238333);
	TextDrawTextSize(Textdraws[textdraw_HUD][6], 603.730102, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][6], 1);
	TextDrawColor(Textdraws[textdraw_HUD][6], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][6], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][6], 8173202);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][6], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][6], 255);
	TextDrawFont(Textdraws[textdraw_HUD][6], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][6], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);
	
	Textdraws[textdraw_GPS_MAP][0] = TextDrawCreate(-5.000000, 132.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][0], 0.000000, 22.498472);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][0], 180.130477, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_GPS_MAP][0], 120);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][0], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);

	Textdraws[textdraw_GPS_MAP][1] = TextDrawCreate(map_td_X, map_td_Y, "samaps:map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][1], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][1], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][1], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);

	Textdraws[textdraw_GPS_MAP][2] = TextDrawCreate(90.000000, 324.000000, "GPS_-_/mapa");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][2], 0.197330, 1.027553);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][2], 2);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][2], -186);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][2], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);

	Textdraws[textdraw_GPS_MAP][3] = TextDrawCreate(map_td_X, map_td_Y, "mdl-1000:lc_map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][3], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][3], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][3], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);
	
	
	Textdraws[textdraw_PLAYER_REP_BACK][0] = TextDrawCreate(500.000000, 13.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 0.000000, 0.633333);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 605.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][0], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);

	Textdraws[textdraw_PLAYER_REP_BACK][1] = TextDrawCreate(502.000000, 15.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 0.000000, 0.200000);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 603.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][1], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 5787296);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);

	Textdraws[textdraw_LOAD_SCREEN][0] = TextDrawCreate(-15.000000, -4.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 50.866653);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][0], 728.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][0], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][0], 0x000000FF);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][0], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][0], 1);

	Textdraws[textdraw_LOAD_SCREEN][1] = TextDrawCreate(-15.000000, -4.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][1], 0.000000, 50.866653);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][1], 728.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][1], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][1], 90);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][1], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][1], 1);

	Textdraws[textdraw_LOAD_SCREEN][2] = TextDrawCreate(320.000000, 80.000000, SERVER_SHORT_NAME);
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][2], 0.505666, 2.649481);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][2], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][2], 1);

	Textdraws[textdraw_LOAD_SCREEN][3] = TextDrawCreate(320.000000, 99.000000, "ROLEPLAY");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.311000, 1.811555);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][3], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	
	Textdraws[textdraw_SERVER_TIME] = TextDrawCreate(578.000000, 22.000000, "00:00");
	TextDrawLetterSize(Textdraws[textdraw_SERVER_TIME], 0.585666, 2.189037);
	TextDrawAlignment(Textdraws[textdraw_SERVER_TIME], 2);
	TextDrawColor(Textdraws[textdraw_SERVER_TIME], -1);
	TextDrawSetShadow(Textdraws[textdraw_SERVER_TIME], 0);
	TextDrawSetOutline(Textdraws[textdraw_SERVER_TIME], 2);
	TextDrawBackgroundColor(Textdraws[textdraw_SERVER_TIME], 255);
	TextDrawFont(Textdraws[textdraw_SERVER_TIME], 3);
	TextDrawSetProportional(Textdraws[textdraw_SERVER_TIME], 1);
	
	Textdraws[textdraw_SHOP][0] = TextDrawCreate(320.000000, 120.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][0], 0.000000, 24.936986);
	TextDrawTextSize(Textdraws[textdraw_SHOP][0], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][0], 201);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);

	Textdraws[textdraw_SHOP][1] = TextDrawCreate(320.000000, 125.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][1], 0.000000, 23.766672);
	TextDrawTextSize(Textdraws[textdraw_SHOP][1], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][1], 11117257);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);

	Textdraws[textdraw_SHOP][2] = TextDrawCreate(207.000000, 128.000000, "Compra_y_venta");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][2], 0.295333, 1.388446);
	TextDrawAlignment(Textdraws[textdraw_SHOP][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);

	Textdraws[textdraw_SHOP][3] = TextDrawCreate(320.000000, 145.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][3], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][3], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);

	Textdraws[textdraw_SHOP][4] = TextDrawCreate(320.000000, 301.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][4], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][4], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	
	
	Textdraws[textdraw_SHOP_ARTICLES_BOX][0] = TextDrawCreate(208.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][1] = TextDrawCreate(285.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][2] = TextDrawCreate(362.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][3] = TextDrawCreate(208.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][4] = TextDrawCreate(285.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][5] = TextDrawCreate(362.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], true);
	
	Textdraws[textdraw_SHOP_ARTICLE_BOX] = TextDrawCreate(208.000000, 175.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 100.000000, 100.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLE_BOX], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLE_BOX], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	
	Textdraws[textdraw_TERRITORY_BOX] = TextDrawCreate(320.000000, 355.000000, "-");
	TextDrawLetterSize(Textdraws[textdraw_TERRITORY_BOX], 12.321674, 9.937778);
	TextDrawAlignment(Textdraws[textdraw_TERRITORY_BOX], 2);
	TextDrawColor(Textdraws[textdraw_TERRITORY_BOX], 167);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_TERRITORY_BOX], 255);
	TextDrawFont(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetProportional(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	
	Textdraws[textdraw_SHOP_TUNING][0] = TextDrawCreate(320.000000, 330.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 6.966667);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][0], 95);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);

	Textdraws[textdraw_SHOP_TUNING][1] = TextDrawCreate(320.000000, 330.000000, ""SERVER_SHORT_NAME"_Tuning_Club");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][1], 0.354000, 1.533629);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][1], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][1], 10205093);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);

	Textdraws[textdraw_SHOP_TUNING][2] = TextDrawCreate(320.000000, 376.000000, "COMPRAR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][2], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][2], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][2], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][2], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][2], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][2], true);

	Textdraws[textdraw_SHOP_TUNING][3] = TextDrawCreate(370.000000, 376.000000, "SIGUIENTE");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][3], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][3], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][3], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][3], true);

	Textdraws[textdraw_SHOP_TUNING][4] = TextDrawCreate(270.000000, 376.000000, "ANTERIOR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][4], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][4], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][4], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][4], true);
	return 1;
}

stock DestroyTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++)
	{
		if(Textdraws[Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		TextDrawDestroy(Text:Textdraws[Textdraws_Enum:i]);
		Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < CMD_HELPER_MODERATOR) return -1; //hacemos chequeo aqui para hacer que este comando no necesite duty
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso:~w~ /a <texto>");

  	new string[145];
    format(string, sizeof(string), "Admin Chat: {90D496}%s (%s): {"#SILVER_COLOR"}%s", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], params);
	SendChatMessageToAdmins(0x90C3D4FF, string);
	return 1;
}

#define MIN_SECONDS_BETWEEN_TALKS 100 // Deben pasar al menos 1 segundos para volver a hablar.
hook OnPlayerText(playerid, text[])
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_HOSPITAL || IsPlayerInWorkTutorial(playerid)) { SendNotification(playerid, "Ahora no puedes hablar."); return 0; }
	if(text[0] == '#' && ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] > 1 /*&& PLAYER_TEMP[playerid][pt_ADMIN_SERVICE]*/)
	{
      	new string[145];
        format(string, sizeof(string), "Admin Chat: {90D496}%s (%s): {"#SILVER_COLOR"}%s", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], text[1]);
		SendChatMessageToAdmins(0x90C3D4FF, string);
		return 0;
	}

	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK]);
	if(interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if(ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}
		SendNotification(playerid, "Cálmate."); 
		return 0; 
	}
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK] = GetTickCount();
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME])
	{
		format(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendNotification(playerid, "Operadora: de acuerdo, describe brevemente lo que sucede para enviar una patrulla.");
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		
		
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);
			
		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}Reporte {"#SILVER_COLOR"}[%s (%d), gps: %s, %s]: {FFFFFF}%s", PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], playerid, city, zone, text);
		SendPoliceRadioMessage(-1, -1, message);

		SendNotification(playerid, "Operadora: su petición fue enviada, en breve una patrulla acudirá.");
		SendNotification(playerid, "{"#PRIMARY_COLOR"}Llamada finalizada.");
		return 0;
	}
	
	new str_text[190];
	if(text[0] == '!')
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE)
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "** [Radio] (( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{8D8DFF}** [Radio]{FF8C00} %s %s: {FFFFFF}%s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);
			
			SendPoliceRadioMessage(PLAYER_TEMP[playerid][pt_POLICE_RADIO], 0xCCCCCCCC, str_text);
			return 0;
		}
		
		if(PI[playerid][ac_CREW])
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "** [Radio] (( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{8D8DFF}** [Radio] %s %s: %s", PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_NAME], text[1]);
			
			SendMessageToCrewMembers(PI[playerid][ac_CREW], 0xCCCCCCCC, str_text);
			return 0;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s dice (por teléfono): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		SendClientMessageEx(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], -1, "{"#SILVER_COLOR"}Teléfono: %s: %s", convertPhoneNumber(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], PI[playerid][ac_PHONE_NUMBER]), text);
	}
	else
	{
		if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s dice (ebrio): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		else format(str_text, 145, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
	}
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 0;
}

CMD:examen(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
	{
		if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_DRIVING_SCHOOL)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, 1063.718994, -343.093566, 2797.699951))
			{
				if(PLAYER_TEMP[playerid][pt_DL_EXAM]) SendNotification(playerid, "Ya estás en el examen, sal afuera y toma un vehículo para empezar con el examen.");
				else
				{
					if(PI[playerid][ac_DRIVE_LICENSE_POINTS] > 6) SendNotification(playerid, "Tienes más de 6 puntos del carnet, no te hace falta hacer el examen.");
					else
					{
						if(GivePlayerCash(playerid, -1750, false, true)) {
							PLAYER_TEMP[playerid][pt_DL_EXAM] = true;
							PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] = 0;
							SendNotification(playerid, "Para comenzar con el examen subete a un vehículo de la autoescuela, están en el aparcamiento.");
						}
						else SendNotification(playerid, "No tienes suficiente dinero.");
					}
				}
				return 1;
			}
		}
	}
	
	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:bebida(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
	{
		if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125))
			{
				if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE)
				{
					if(PI[playerid][ac_CASH] <= 50) return SendNotification(playerid, "La bebida cuesta 50$.");
					
					if(GivePlayerCash(playerid, -50, false, true)) {
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
					}
				}
				return 1;
			}
		}
	}
	
	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

#define MIN_TIME_BETWEEN_DOUBT	60
#define IP_SPAM_MUTE_TIME		5 //minutos
CMD:duda(playerid, params[])
{
	if(!ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) return SendNotification(playerid, "Para enviar una duda primero debes activar el canal de dudas con ~g~/dudas");
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/duda [DUDA]");
	if(PI[playerid][ac_MUTE] > gettime())
	{
		new seconds = PI[playerid][ac_MUTE] - gettime();
		SendFormatNotification(playerid, "Estás silenciado en el canal de dudas por %s minutos.", TimeConvert(seconds));
		return 1;
	}
	if(!ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT)
		{
			new time = (MIN_TIME_BETWEEN_DOUBT-(gettime()-PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME]));
			SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a realizar otra consulta.", TimeConvert(time));
			return 1;
		}
	}
	
 	SendMessageToDoubtChannel(playerid, params);
	return 1;
}

CMD:dudas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL])
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = false;
		SendNotification(playerid, "Canal de dudas ~r~deshabilitado~w~.");
	}
	else
	{
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
		SendNotification(playerid, "Canal de dudas ~r~habilitado~w~.");
	}
	return 1;
}

CMD:g(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/gritar [TEXTO]");
	
	new str_text[190];
	format(str_text, 190, "%s grita: ¡%s!", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:g("gritar");

CMD:s(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/susurrar [TEXTO]");
	
	new str_text[190];
	format(str_text, sizeof(str_text), "%s susurra: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 5.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}
alias:s("susurrar");

CMD:decir(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/decir [TEXTO]");
	
    new str_text[190];

	format(str_text, 145, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}


CMD:b(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/b [TEXTO]");
	
    new str_text[190];
    format(str_text, sizeof(str_text), "ID: %d | %s: (( %s ))", playerid, PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 85);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/do [TEXTO]");

    new str_text[190];
    format(str_text, sizeof(str_text), "* %s (( %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 85);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/me [TEXTO]");
	
	SendPlayerAction(playerid, params);
	return 1;
}
alias:me("y");

CMD:experiencia(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowPlayerSkills(playerid, playerid);
	return 1;
}
alias:experiencia("exp", "skills");

CMD:est(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}
alias:est("estadisticas", "cuenta");

CMD:web(playerid, params[])
{
	SendClientMessage(playerid, -1, "Web: {a7f442}"SERVER_WEBSITE"");
	return 1;
}

CMD:csave(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] + 30)
	{
		new time = (30-(gettime()-PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME]));
		SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a guardar tus datos.", TimeConvert(time));
		return 1;
	}

	SavePlayerData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerToys(playerid);
	SavePlayerWeaponsData(playerid);
	SavePlayerWorkLevels(playerid);
	PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] = gettime();
	
	SendNotification(playerid, "Datos de la cuenta guardados.");
	return 1;
}

CMD:ayuda(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<general>: ShowDialog(playerid, DIALOG_HELP_GENERAL);
		case _I<informacion>: ShowDialog(playerid, DIALOG_HELP_INFO);
		case _I<personaje>: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
		case _I<propiedades>: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
		case _I<reportar>: ShowDialog(playerid, DIALOG_HELP_REPORT);
		case _I<trabajos>: ShowDialog(playerid, DIALOG_HELP_WORKS);
		case _I<vehiculos>: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
		case _I<bandas>: ShowDialog(playerid, DIALOG_HELP_CREWS);
		case _I<vip>: ShowDialog(playerid, DIALOG_HELP_SU);
		case _I<verificacion>: ShowDialog(playerid, DIALOG_HELP_SECURE_LOGIN);

		default: ShowDialog(playerid, DIALOG_HELP);
	}
	return 1;
}

CMD:accesorios(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_TOYS);
	return 1;
}

CMD:armas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	SetPlayerPosEx(playerid, 257.251373, -40.797775, 1002.023437, 135.0, 14, playerid + MAX_PLAYERS, false); // World = Playerid + Max_players
	TogglePlayerControllableEx(playerid, false);
	
	SetPlayerCameraPos(playerid, 254.988632, -43.060516, 1002.9131);
	SetPlayerCameraLookAt(playerid, 257.251373, -40.797775, 1002.023437);
	
	UpdateClothingShop(playerid);
	ShowClothingShopTextdraws(playerid);
	
	SendNotification(playerid, "Pulsa ~r~'ESCAPE' ~w~para dejar de probarte ropa.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:toys(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(shop == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
	
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	TogglePlayerControllableEx(playerid, false);
	
	UpdateToysShop(playerid);
	ShowToysShopTextdraws(playerid);
	
	SendNotification(playerid, "Pulsa ~r~'ESCAPE' ~w~para salir del menú.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:pedir(playerid, params[])
{
	new index = GetPlayerFastFoodIndex(playerid);
	if(index == -10) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(Fast_Food_Positions[index][fast_food_INTERIOR_TYPE])
	{
		case INTERIOR_BURGER_SHOT: ShowDialog(playerid, DIALOG_FOOD_BURGER);
		case INTERIOR_PIZZA: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
		case INTERIOR_CLUCKIN_BELL: ShowDialog(playerid, DIALOG_FOOD_CLUCKIN);
		case -1: ShowDialog(playerid, DIALOG_FOOD_BURGER);
	}
	return 1;
}

CMD:productos(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_247) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	ShowDialog(playerid, DIALOG_247_LIST);
	return 1;
}

CMD:mercado(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2119.059814, -2001.701904, 7.984375)) return SendNotification(playerid, "No estás en el lugar adecuado.");	
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres bienvenido aquí");
	ShowDialog(playerid, DIALOG_BLACK_MARKET);
	return 1;
}

CMD:gps(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_GPS])
	{
		SendNotification(playerid, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	Auto_SendPlayerAction(playerid, "mira su GPS.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:tiempo(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = PI[playerid][ac_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
		if(time <= 0)
		{
			UnjailPlayer(playerid);
			return 1;
		}
		SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));
	}
	else SendNotification(playerid, "No estás en la cárcel.");
	return 1;
}

CMD:mapa(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_GPS])
	{
		SendNotification(playerid, "No tienes ningún GPS, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	else ShowPlayerGpsMap(playerid);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_MP3])
	{
		SendNotification(playerid, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendNotification(playerid, "Espera que termine la búsqueda actual.");
	
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_SPEAKERS] = false;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:amp3(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	//if(GetPlayerInterior(playerid)) return SendNotification(playerid, "No puedes hacer esto en un interior");
	if(!PI[playerid][ac_SPEAKERS])
	{
		SendNotification(playerid, "No tienes altavoces, puedes ir a cualquier 24/7 para comprarlos.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendNotification(playerid, "Espera que termine la búsqueda actual.");
	
	if(gettime() < PLAYER_TEMP[playerid][pt_SPEAKERS_TIME] + 120)
	{
		new time = (120-(gettime()-PLAYER_TEMP[playerid][pt_SPEAKERS_TIME]));
		SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a utilizar los altavoces.", TimeConvert(time));
		return 1;
	}

	PLAYER_TEMP[playerid][pt_MUSIC_FOR_SPEAKERS] = true;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:vmp3(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No conduces ningún vehículo.");
	if(!PI[playerid][ac_MP3])
	{
		SendNotification(playerid, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP]) return SendNotification(playerid, "Espera que termine la búsqueda actual.");
	
	PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = true;
	Auto_SendPlayerAction(playerid, "busca música en su MP3.");
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:stop(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}
alias:pass("contra", "cpass");

CMD:gcp(playerid, params[])
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		
		SendNotification(playerid, "Has cancelado la ruta antigua de tu GPS.");
	}
	else SendNotification(playerid, "No tienes ningún punto marcado en tu GPS.");
	return 1;
}

CMD:movil(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) SendFormatNotification(playerid, "Estás en una llamada.");
	
	if(!PLAYER_TEMP[playerid][pt_PHONE_COMMANDS_MESSAGE])
	{
		PLAYER_TEMP[playerid][pt_PHONE_COMMANDS_MESSAGE] = true;
		SendNotification(playerid, "Recuerda que también puedes usar ~y~/agenda~w~, ~y~/llamar~w~, ~y~/sms~w~, ~y~/tienda~w~.");
	}
	
	Auto_SendPlayerAction(playerid, "mira su teléfono.");
	ShowDialog(playerid, DIALOG_PHONE);
	return 1;
}
alias:movil("celular", "telefono", "tlf");

CMD:guia(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_RESOLVER])
	{
		SendNotification(playerid, "No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.");
		return 1;
	}
	
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/guia [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "Jugador desconectado.");
	
	if(!PI[params[0]][ac_PHONE_NUMBER]) return SendNotification(playerid, "Este jugador no tiene teléfono.");
	if(!PI[params[0]][ac_PHONE_VISIBLE_NUMBER]) return SendNotification(playerid, "Este jugador ha decidido no mostrar su número en la guía.");
	
	SendFormatNotification(playerid, "Persona encontrada:~n~~n~~b~Nombre: ~w~%s~n~~b~Teléfono: ~w~%d.", PLAYER_TEMP[params[0]][pt_RP_NAME], PI[params[0]][ac_PHONE_NUMBER]);
	return 1;
}

CMD:sguia(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(PI[playerid][ac_PHONE_VISIBLE_NUMBER])
	{
		PI[playerid][ac_PHONE_VISIBLE_NUMBER] = false;
		SendNotification(playerid, "Tu número no aparecerá ahora en la guía telefónica.");
	}
	else
	{
		PI[playerid][ac_PHONE_VISIBLE_NUMBER] = true;
		SendNotification(playerid, "Tu número aparecerá en la guía telefónica.");
	}
	return 1;
}

CMD:sms(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "Estás en una llamada.");
	
	new params_message[64], params_number, params_contact[24];
	if(!sscanf(params, "ds[64]", params_number, params_message))
	{
		if(params_number <= 0) SendNotification(playerid, "El número destino no es válido.");
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new id, connected, pid;
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(ACCOUNT_INFO[playerid][ac_ID], id, params_message, 0);
						else RegisterPhoneMessage(ACCOUNT_INFO[playerid][ac_ID], id, params_message, 1);
						if(connected)
						{
							if(PI[pid][ac_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessageEx(pid, -1, "{"#PRIMARY_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][ac_PHONE_NUMBER]), params_message);
							}
						}
						SendFormatNotification(playerid, "Mensaje enviado a ~b~%s~w~.", convertPhoneNumber(playerid, params_number));
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
			MySQL_TQueryInline(srp_db, using inline OnPhoneChecked, QUERY_BUFFER);
		}
	}
	else if(!sscanf(params, "s[24]s[64]", params_contact, params_message))
	{
		inline OnPhoneChecked()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					new number, id, connected, pid, bool:isnull_id;
					cache_is_value_name_null(0, "id", isnull_id);
					if(!isnull_id) {
						cache_get_value_name_int(0, "number", number);
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(ACCOUNT_INFO[playerid][ac_ID], id, params_message, 0);
						else RegisterPhoneMessage(ACCOUNT_INFO[playerid][ac_ID], id, params_message, 1);

						if(connected)
						{
							if(PI[pid][ac_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessageEx(pid, -1, "{"#PRIMARY_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][ac_PHONE_NUMBER]), params_message);
							}
						}
						SendFormatNotification(playerid, "Mensaje enviado a ~b~%s~w~.", convertPhoneNumber(playerid, number));
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
				else SendNotification(playerid, "El número destino no es válido.");
			}
		}
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", ACCOUNT_INFO[playerid][ac_ID], params_contact);
		MySQL_TQueryInline(srp_db, using inline OnPhoneChecked, QUERY_BUFFER);
	}
	else SendNotification(playerid, "Usa /sms [numero o contacto]");
	return 1;
}

CMD:agenda(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "Estás en una llamada.");
	
	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}

CMD:tienda(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	ShowPlayerShop(playerid);
	return 1;
}

HandleStaticPhoneNumbers(playerid, call_number)
{
	switch(call_number)
	{
		case 911:
		{
			if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para llamar a la policía.");
			PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
			
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Operadora: ha llamado a la central de policía, indícanos su nombre por favor.");
			return 1;
		}
		case 450: //Taxi
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Has cancelado el taxi.");
			}
			else
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Tu llamada se ha enviado a los taxistas disponibles, espera a que llegue un taxi.");
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Vuelve a llamar a este número si ya no necesitas un taxi.");
				SendAlertToTaxiDrivers(playerid);
			}
			return 1;
		}
		case 6740:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No vuelvas a llamar al banco, cuidado.");
			return 1;
		}
		case 38350:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Aseguradora que asegura tus vehículos de mierda.");
			return 1;
		}
		case 666:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Mirar a las estrellas es mirar al pasado, no mires.");
			return 1;
		}
	}
	return 0;
}

CMD:llamar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "Estás en una llamada.");

	new params_number, params_contact[24];
	if(!sscanf(params, "d", params_number))
	{
		if(params_number <= 0) SendNotification(playerid, "El número destino no es válido.");
		else
		{
			if(!HandleStaticPhoneNumbers(playerid, params_number))
			{
				inline OnPhoneChecked()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new id, connected, pid;
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);

							if(!connected) SendNotification(playerid, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendNotification(playerid, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PLAYER_TEMP[pid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "El número al que intentas llamar está en otra llamada.");
								
								SendFormatNotification(pid, "~b~[Llamada entrante] ~w~%s te está llamando, para responser usa ~b~/responder ~w~o ~b~/colgar~w~.", convertPhoneNumber(pid, PI[playerid][ac_PHONE_NUMBER]));
								PLAYER_TEMP[pid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
								
								SendFormatNotification(playerid, "Llamando a ~b~%s~w~...", convertPhoneNumber(playerid, params_number));
								PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendNotification(playerid, "El número destino no es válido.");
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
				MySQL_TQueryInline(srp_db, using inline OnPhoneChecked, QUERY_BUFFER);
			}
		}
	}
	else if(!sscanf(params, "s[24]", params_contact))
	{
		if(!strcmp(params_contact, "policia", true)) HandleStaticPhoneNumbers(playerid, 911);
		else if(!strcmp(params_contact, "taxi", true)) HandleStaticPhoneNumbers(playerid, 450);
		else if(!strcmp(params_contact, "mecanico", true)) HandleStaticPhoneNumbers(playerid, 570);
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new number, id, connected, pid, bool:isnull_id;
						cache_is_value_name_null(0, "id", isnull_id);
						if(!isnull_id) {
							cache_get_value_name_int(0, "number", number);
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);

							if(!connected) SendNotification(playerid, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendNotification(playerid, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PLAYER_TEMP[pid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "El número al que intentas llamar está en otra llamada.");
								
								SendFormatNotification(pid, "~b~[Llamada entrante] ~w~%s te está llamando, para responser usa ~b~/responder ~w~o ~b~/colgar~w~.", convertPhoneNumber(pid, PI[playerid][ac_PHONE_NUMBER]));
								PLAYER_TEMP[pid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
								
								SendFormatNotification(playerid, "Llamando a ~b~%s~w~...", convertPhoneNumber(playerid, number));
								PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendNotification(playerid, "El número destino no es válido.");
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", ACCOUNT_INFO[playerid][ac_ID], params_contact);
			MySQL_TQueryInline(srp_db, using inline OnPhoneChecked, QUERY_BUFFER);
		}
	}
	else SendNotification(playerid, "Usa /llamar [numero o contacto]");
	return 1;
}

CMD:responder(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendFormatNotification(playerid, "No hay ninguna llamada entrante."); 
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");
	
	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	
	KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);
	
	SendNotification(playerid, "Llamada establecida, usa ~r~/colgar ~w~para terminarla.");
	SendNotification(to_playerid, "Llamada establecida, usa ~r~/colgar ~w~para terminarla.");
	return 1;
}

CMD:colgar(playerid, params[])
{
	if(!PI[playerid][ac_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		SendNotification(playerid, "~r~Llamada finalizada~w~.");
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendFormatNotification(playerid, "No hay ninguna llamada entrante."); 
	
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "Colgaste.");
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "No has respondido la llamada.");
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "~r~Llamada finalizada~w~.");
		}
		default: SendFormatNotification(playerid, "No estás en ninguna llamada.");	
	}
	return 1;
}

CMD:panel(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
	return 1;
}
alias:panel("config", "configuracion", "ajustes");

CMD:comprarcasa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");

	
	new site_index = GetBuyPropertySiteIndexByIntTyp(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(site_index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, BUY_PROPERTIES_SITES[site_index][site_X], BUY_PROPERTIES_SITES[site_index][site_Y], BUY_PROPERTIES_SITES[site_index][site_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][ac_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No puedes comprar una casa sin tener cuenta bancaria.");

	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/comprarcasa [ID]");
	if(params[0] <= 0) return SendNotification(playerid, "Error: ID no es válida.");
	
	new player_properties = CountPlayerProperties(playerid);
	if(ACCOUNT_INFO[playerid][ac_VIP])
	{
		if(player_properties >= MAX_SU_PROPERTIES) return SendNotification(playerid, "No puedes comprar más propiedades.");
	}
	else
	{
		if(player_properties >= MAX_NU_PROPERTIES)
		{
			SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d propiedades! Usa ~y~/ayuda ~w~si quieres ser ~w~VIP.", MAX_SU_PROPERTIES);
			SendNotification(playerid, "No puedes comprar más propiedades.");
			return 1;
		}
	}
	
	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendNotification(playerid, "Error: ID no es válida.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Está propiedad ya está vendida.");
	if(PROPERTY_INFO[index][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendFormatNotification(playerid, "Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[index][property_LEVEL]);
	if(PROPERTY_INFO[index][property_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_VIP]) return SendFormatNotification(playerid, "Necesitas membresía VIP (%d) para comprar esta propiedad.", PROPERTY_INFO[index][property_VIP_LEVEL]);
	if(PROPERTY_INFO[index][property_EXTRA] > PI[playerid][ac_COINS]) return SendFormatNotification(playerid, "Necesitas %d "SERVER_COIN" para comprar esta propiedad.", PROPERTY_INFO[index][property_EXTRA]);
	if(PI[playerid][ac_BANK_MONEY] >= PROPERTY_INFO[index][property_PRICE])
	{
		PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else SendFormatNotification(playerid, "No tienes fondos suficientes en tu cuenta, te faltan ~r~%s dólares ~w~para poder comprar esta propiedad.", number_format_thousand(PROPERTY_INFO[index][property_PRICE] - PI[playerid][ac_BANK_MONEY]));
	return 1;
}

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

CMD:banco(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");

	
	new index = GetBankLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][ac_BANK_ACCOUNT] == 0) // no tiene cuenta bancaria
	{
		ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
		return 1;
	}
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new info[3];
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_ATM) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][ac_BANK_ACCOUNT] == 0)
	{
		SendNotification(playerid, "No tienes cuenta bancaria, puedes crearla en cualquier Banco.");
		return 1;
	}
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = true;
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:alimentos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_POCKET);
	return 1;
}

#define TIME_BETWEEN_GIVE_CASH	30 // segundos
CMD:dar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra;
	if(sscanf(params, "s[24]ud", option, to_playerid, extra)) return SendNotification(playerid, "Error en los parámetros, utilice {"#SILVER_COLOR"}/man dar.");
	
	if(!IsPlayerConnected(to_playerid)) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes darle nada a este jugador ahora.");
	
	switch(YHash(option, false))
	{
		case _I<dinero>:
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] + TIME_BETWEEN_GIVE_CASH)
			{
				new time = TIME_BETWEEN_GIVE_CASH - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME]);
				SendFormatNotification(playerid, "Debes de esperar %s minutos para volver a dar dinero.", TimeConvert(time));
				return 1;
			}
			
			if(extra < 0 || extra > PI[playerid][ac_CASH]) return SendNotification(playerid, "Cantidad de dinero incorrecta.");
			if(extra > 50000) return SendNotification(playerid, "Para dar tanto dinero tienes que hacerlo a través de transferencias bancarias.");
			
			if(GivePlayerCash(playerid, -extra, true, true) && GivePlayerCash(to_playerid, extra, true, false)) {
				SendFormatNotification(playerid, "Le has dado ~g~%s dólares~w~ a %s.", number_format_thousand(extra), PLAYER_TEMP[to_playerid][pt_RP_NAME]);
				SendFormatNotification(to_playerid, "%s te ha dado ~g~%s dólares~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(extra));
				
				new action[64];
				format(action, sizeof action, "le da dinero a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] = gettime();
			}
		}
		case _I<alimento>:
		{
			if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendNotification(playerid, "~r~Modo de uso: ~w~/dar alimento [ID o Nombre] [Slot /alimentos]");
		
			extra --;
			
			if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");
			
			new to_player_slot = GetEmptyPlayerPocketSlot(to_playerid);
			if(to_player_slot == -1)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "El jugador no tiene más espacio entre sus alimentos.");
				return 1;
			}
			
			new action[64];
			format(action, sizeof action, "le da su %s a %s.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			TransferPlayerPocketObject(playerid, extra, to_playerid, to_player_slot);
		}
		case _I<medicamentos>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MEDICINE] -= extra;
			PI[to_playerid][ac_MEDICINE] += extra;
			
			SendFormatNotification(playerid, "Le has dado ~g~%d gramos~w~ de medicamentos a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado ~g~%d gramos~w~ de medicamentos.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
	
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<marihuana>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_CANNABIS] -= extra;
			PI[to_playerid][ac_CANNABIS] += extra;
			
			SendFormatNotification(playerid, "Le has dado %dg de marihuana a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %dg de marihuana.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<crack>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_CRACK] -= extra;
			PI[to_playerid][ac_CRACK] += extra;
			
			SendFormatNotification(playerid, "Le has dado ~g~%d gramos~w~ de crack a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado ~g~%d gramos~w~ de crack.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<arma>:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Los policías no pueden dar armas.");
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/dar arma [ID o Nombre] [Slot /armas]");
		
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendNotification(playerid, "No tienes nigún arma en ese slot.");
			
			if(PI[to_playerid][ac_LEVEL] < 2) return SendNotification(playerid, "La otra persona tiene que ser al menos nivel 2.");
			if(PLAYER_WEAPONS[to_playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "El jugador ya tiene un arma en ese slot.");
				return 1;
			}
			
			SendFormatNotification(playerid, "~w~Le has dado tu ~g~'%s'~w~ a %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado su ~g~'%s'~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			
			new action[64];
			format(action, sizeof action, "le da un arma a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			TransferPlayerWeapon(playerid, extra, to_playerid);
		}
		case _I<kit>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MECHANIC_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MECHANIC_KITS] -= extra;
			PI[to_playerid][ac_MECHANIC_KITS] += extra;
			
			SendFormatNotification(playerid, "Le has dado %d kits de reparación a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %d kits de reparación.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<botiquin>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MEDICAL_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MEDICAL_KITS] -= extra;
			PI[to_playerid][ac_MEDICAL_KITS] += extra;
			
			SendFormatNotification(playerid, "Le has dado %d botiquines a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %d botiquines.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);
			
			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man dar~w~.");
	}
	return 1;
}

CMD:vender(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");
	
	new option[24], to_playerid, extra, price;
	if(sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man vender~w~.");
	
	if(price <= 0 || price > 10000000) return SendNotification(playerid, "El precio no es válido.");
	if(!IsPlayerConnected(to_playerid)) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes venderle nada a este jugador ahora.");
	
	if(price > PI[to_playerid][ac_CASH])
	{
		SendNotification(playerid, "Esta persona no tiene el dinero que pides.");
		return 1;
	}
	
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_PID] = playerid;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_playerid][pt_TRICK_PRICE] = price;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] = extra;
	PLAYER_TEMP[to_playerid][pt_TRICK_TIME] = gettime();

	switch(YHash(option, false))
	{
		case _I<alimento>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 1 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > MAX_PLAYER_POCKET_OBJECTS) return SendNotification(playerid, "~r~Modo de uso: ~w~/vender alimento [ID o Nombre] [Slot /alimentos] [precio]");
			PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] --;
			
			if(!PLAYER_POCKET[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_FOOD);
		}
		case _I<medicamentos>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][ac_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_MEDICINE);
		}
		case _I<marihuana>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][ac_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CANNABIS);
		}
		case _I<crack>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][ac_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CRACK);
		}
		case _I<arma>:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Los policías no pueden vender armas.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "Error en slot de /armas.");
		
			if(!PLAYER_WEAPONS[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID]) return SendNotification(playerid, "No tienes nigún arma en ese slot.");
			
			if(PI[to_playerid][ac_LEVEL] < 2) return SendNotification(playerid, "La otra persona tiene que ser al menos nivel 2.");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_WEAPON);
		}
		case _I<coins>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][ac_COINS]) return SendNotification(playerid, "No tienes esa cantidad de "SERVER_COIN".");
			
			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man vender~w~.");
	}
	return 1;
}

CMD:consumir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	new option[24], slot;
	if(!sscanf(params, "s[24]d", option, slot))	
	{
		if(!strcmp(option, "alimento", true))
		{
			if(slot < 1 || slot > MAX_PLAYER_POCKET_OBJECTS) return SendFormatNotification(playerid, "~r~Modo de uso: ~w~/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		
			slot --;
			
			if(!PLAYER_POCKET[playerid][slot][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");
			if(PI[playerid][ac_HUNGRY] >= 99.0 && PI[playerid][ac_THIRST] >= 99.0) return SendNotification(playerid, "¿Es que quieres reventar?");

			Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST]);
			GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
			
			new action[64];
			format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]);
			Auto_SendPlayerAction(playerid, action);
			
			DeletePlayerPocketObject(playerid, slot);

			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
		}
		else SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
	}
	else if(!sscanf(params, "s[24]", option))
	{
		switch(YHash(option, false))
		{
			case _I<medicamento>:
			{
				if(PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir medicamentos", PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] - gettime());

				if(PI[playerid][ac_MEDICINE] <= 0) return SendNotification(playerid, "No tienes medicamentos.");
				
				PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] = gettime() + 30;
				PI[playerid][ac_MEDICINE] --;
				GivePlayerHealthEx(playerid, 25.0);
				Auto_SendPlayerAction(playerid, "se toma un medicamento.");
			}
			case _I<marihuana>:
			{
				if(PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir marihuana", PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] - gettime());

				if(PI[playerid][ac_CANNABIS] <= 0) return SendNotification(playerid, "No tienes marihuana.");

				PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] = gettime() + 30;
				
				PI[playerid][ac_CANNABIS] --;
				GivePlayerHealthEx(playerid, 30.0);
				Auto_SendPlayerAction(playerid, "consume marihuana.");
				GivePlayerDrunkLevel(playerid, 1000);
			}
			case _I<crack>:
			{
				if(PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir crack", PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] - gettime());

				if(PI[playerid][ac_CRACK] <= 0) return SendNotification(playerid, "No tienes crack.");

				PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] = gettime() + 30;
				PI[playerid][ac_CRACK] --;
				GivePlayerArmourEx(playerid, 20.0);
				Auto_SendPlayerAction(playerid, "consume crack.");
				GivePlayerDrunkLevel(playerid, 2000);
			}
			case _I<alimento>: SendFormatNotification(playerid, "~r~Modo de uso: ~w~/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
			
			default: SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
		}
	}
	else SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
	return 1;
}

CMD:man(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<dar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: dar\n\
							Sintaxis: dar <opcion> <playerid o nombre> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <playerid o nombre> <slot de /armas>\n\
							    - dinero <playerid o nombre> <cantidad>\n\
							    - alimento <playerid o nombre> <slot de /alimentos>\n\
							    - medicamentos <playerid o nombre> <cantidad>\n\
							    - marihuana <playerid o nombre> <cantidad>\n\
							    - crack <playerid o nombre> <cantidad>\n\
							    - kit <playerid o nombre> <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<tirar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: tirar\n\
							Sintaxis: tirar <opcion> <extra>\n\
							\n\
							Este comando sirve para deshacerte de algún objeto.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <slot de /armas>\n\
							    - dinero <cantidad>\n\
							    - alimento <slot de /alimentos>\n\
							    - medicamentos <cantidad>\n\
							    - marihuana <cantidad>\n\
							    - crack <cantidad>\n\
							    - kit <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<vender>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: vender\n\
							Sintaxis: vender <opcion> <playerid o nombre> <extra> <precio>\n\
							\n\
							Este comando sirve para vender algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <playerid o nombre> <slot de /armas> <precio>\n\
							    - alimento <playerid o nombre> <slot de /alimentos> <precio>\n\
							    - medicamentos <playerid o nombre> <cantidad> <precio>\n\
							    - marihuana <playerid o nombre> <cantidad> <precio>\n\
							    - crack <playerid o nombre> <cantidad> <precio>\n\
							    - coins <playerid o nombre> <cantidad> <precio>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		case _I<guardar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,
				
					"Manual",
						"\
							Comando: guardar\n\
							Sintaxis: dar <opcion> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <slot de /armas>\n\
							    - medicamentos <cantidad>\n\
							    - marihuana <cantidad>\n\
							    - crack <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""
					
			);
			return 1;
		}
		default: SendNotification(playerid, "~r~Modo de uso: ~w~/man [dar-tirar-vender-guardar]");
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man tirar~w~.");

	switch(YHash(option, false))
	{
		case _I<dinero>:
		{
			if(extra < 0 || extra > PI[playerid][ac_CASH]) return SendNotification(playerid, "Cantidad de dinero incorrecta.");
			
			if(GivePlayerCash(playerid, -extra, true, true)) {
				SendFormatNotification(playerid, "Has tirado al suelo ~g~%s dólares~w~.", number_format_thousand(extra));
				Auto_SendPlayerAction(playerid, "tira dinero.");
			}
			return 1;
		}
		case _I<alimento>:
		{
			if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendFormatNotification(playerid, "~r~Modo de uso: ~w~/tirar alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		
			extra --;
			
			if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");

			SendFormatNotification(playerid, "Has eliminado ~g~\"%s\"~w~ de tus alimentos.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME]);
			DeletePlayerPocketObject(playerid, extra);
			return 1;
		}
		case _I<medicamentos>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MEDICINE] -= extra;
			
			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de medicamentos.", extra);
			return 1;
		}
		case _I<marihuana>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_CANNABIS] -= extra;
			
			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de marihuana.", extra);
			return 1;
		}
		case _I<crack>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_CRACK] -= extra;
			
			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de crack.", extra);
			return 1;
		}
		case _I<arma>:
		{
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/tirar arma [slot /armas]");
		
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendNotification(playerid, "No tienes nigún arma en ese slot.");
			
			SendFormatNotification(playerid, "Has eliminado tu ~g~'%s'~w~ de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			
			new string[64];
			format(string, sizeof string, "tira su %s al suelo", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			Auto_SendPlayerAction(playerid, string);

			RemovePlayerSlotWeapon(playerid, extra, true);
			return 1;
		}
		case _I<kit>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MECHANIC_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MECHANIC_KITS] -= extra;
			
			SendFormatNotification(playerid, "Has tirado ~g~%d ~w~kits de reparación.", extra);
			return 1;
		}
		case _I<botiquin>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][ac_MEDICAL_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");
			
			PI[playerid][ac_MEDICAL_KITS] -= extra;
			
			SendFormatNotification(playerid, "Has tirado ~g~%d ~w~botiquines.", extra);
			return 1;
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man tirar~w~.");
	}
	return 1;
}

CMD:entrar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
	
			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_INTERIOR;
					PI[playerid][ac_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
					PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
					SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
				}
				else
				{
					if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
					{
						ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_INTERIOR;
						PI[playerid][ac_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
						CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);

						if(ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");							
					}
					else {
						if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendFormatNotification(playerid, "~r~%s ~w~abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
						else SendFormatNotification(playerid, "~r~%s ~w~está cerrado, su horario es: ~r~%02d:00h ~w~- ~r~%02d:00h~w~.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
					}
				}
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		case PICKUP_TYPE_PROPERTY:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			
			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE)) {
					new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
					if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					return 1;
				}
				if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendNotification(playerid, "Esta propiedad está en venta.");
				if(PROPERTY_INFO[info[1]][property_CREW])
				{
					if(!PI[playerid][ac_CREW]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
					if(PI[playerid][ac_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
					
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
					PI[playerid][ac_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
					PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

					new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
					if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
				}
				else
				{
					if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
						PI[playerid][ac_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
					}
					else
					{
						if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendNotification(playerid, "Espera para volver a tocar, si no te quieren abrir, vete.");
						
						new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
						if(owner_playerid == -1) return SendNotification(playerid, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");
						
						PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
						PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
						SendFormatNotification(owner_playerid, "~b~%s ~w~está tocando la puerta, para dejarle entrar ve a la puerta y usa ~b~/puerta~w~.", PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendNotification(playerid, "Has tocado en la puerta, espera para que te abran o vete.");
					}
				}
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		default: SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:puerta(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	new Float:pos[3]; 
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);
	
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(info[2] == 1) // Está en el Pickup Interior
	{
		if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return SendNotification(playerid, "Nadie ha tocado en la puerta.");
			if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID])) return SendNotification(playerid, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return SendNotification(playerid, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Este jugador no puede entrar ahora.");
			
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = GetNearestHospitalForPlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
			
			PI[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ac_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			PI[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ac_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_PROPERTY_INDEX] = info[1];

			new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
			if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
			SetPlayerPosEx(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
			FreezePlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
		}
		else SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:pvender(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return 1;
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");
	if(PI[playerid][ac_BANK_ACCOUNT] == 0) return SendNotification(playerid, "Necesitas tener una cuenta bancaria para poder realizar estas operaciones.");
	
	ShowDialog(playerid, DIALOG_NOTARY);
	return 1;
}

CMD:grua(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return 1;

	ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
	return 1;
}

CMD:casa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) {
		new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

		if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
		{	
			if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
			{
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		else if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
		{
			if(PROPERTY_INFO[index][property_CREW])
			{
				if(PROPERTY_INFO[index][property_CREW_ID] != PI[playerid][ac_CREW]) return SendNotification(playerid, "Esta no es una propiedad de tu banda.");
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendNotification(playerid, "No tienes permiso.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes liberar una propiedad cuando tu banda está en combate."); 
				
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:armario(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "BUG: CMD /armario, Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Esta no es tu casa");

		new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		if(IsPlayerInRangeOfPoint(playerid, 1.0, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos))
		{
			PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] = index;
			ShowDialog(playerid, DIALOG_PROPERTY_CLOSET);
		}
		else SendNotification(playerid, "No estás cerca del armario.");
	}
	else SendNotification(playerid, "No estás en tu casa.");
	return 1;
}

CMD:echar(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/echar [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	if(playerid == params[0]) return SendNotification(playerid, "No te eches a ti mismo.");
	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if( PI[params[0]][ac_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && PI[params[0]][ac_LOCAL_INTERIOR] == PI[playerid][ac_LOCAL_INTERIOR])
		{		
			new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
			if(index == -1) return SendNotification(playerid, "BUG: CMD /ECHAR, Tome captura y contacte con administrador.");
				
			PI[params[0]][ac_STATE] = ROLEPLAY_STATE_NORMAL;
			PI[params[0]][ac_LOCAL_INTERIOR] = 0;
			PLAYER_TEMP[params[0]][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(params[0], PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[ index ][property_EXT_FREEZE]*/, false);
			StopAudioStreamForPlayer(params[0]);
			FreezePlayer(params[0]);
			
			SendFormatNotification(params[0], "~r~%s ~w~te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendFormatNotification(playerid, "Has echado a ~r~%s ~w~de tu propiedad.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		}
		else SendNotification(playerid, "Este jugador no está en tu propiedad.");
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(GetPlayerVehicleID(params[0]) != vehicleid) return SendNotification(playerid, "Este jugador no está en tu vehículo.");
		
		RemovePlayerFromVehicle(params[0]);
		
		new action[64];
		format(action, sizeof action, "ha echado a %s de su vehículo.", PLAYER_TEMP[ params[0] ][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	SendNotification(playerid, "No estás en tu propiedad o en tu vehículo.");
	return 1;
}

CMD:tarifa(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI][pwork_SET]) return SendNotification(playerid, "No eres taxista.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TAXI) return SendNotification(playerid, "No estás de servicio como taxista.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendNotification(playerid, "Solo puedes cambiar la tarifa cuando no haya ningún pasajero.");
	
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/tarifa [0-14]");
	if(params[0] < 0 || params[0] > 14) return SendNotification(playerid, "~r~Modo de uso: ~w~/tarifa [0-14]");
	
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el taxímetro.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	return 1;
}

CMD:cargar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "No estás en un vehículo de carga.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK && WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_DELIVERYMAN) return SendNotification(playerid, "No estás en un vehículo de carga.");

	if(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_TRUCK) {
		for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
			{
				new Float:angle;
				GetVehicleZAngle(vehicleid, angle);
				if(angle > 180.0) angle -= 360.0;

				if(angle > (LoadTrucksPoints[i][3] - 15.0) && angle < (LoadTrucksPoints[i][3] + 15.0))
				{	
					if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendNotification(playerid, "El camión ya está cargado.");
					if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendNotification(playerid, "El camión ya se está cargando.");
		
					TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
					TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = ACCOUNT_INFO[playerid][ac_ID];
					
					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
					UpdateVehicleParams(vehicleid);
					
					ShowDialog(playerid, DIALOG_SELECT_TRUCK_TYPE);
				}
				else SendNotification(playerid, "El camión no está correctamente colocado para cargarlo.");
				return 1;
			}
		}
		SendNotification(playerid, "Para cargar el camión colocate en cualquier punto de carga.");
	}
	if(PLAYER_WORKS[playerid][WORK_DELIVERYMAN][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_DELIVERYMAN) {
		CallLocalFunction("OnDeliveryManRequestLoad", "ii", playerid, vehicleid);
	}
	else SendNotification(playerid, "No estás trabajando en camionero o repartidor.");
	return 1;
}

CMD:salir(playerid, params[])
{	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
		
	new info[3];
	
	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][ac_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
				CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		case PICKUP_TYPE_PROPERTY:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][ac_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		default: SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás en nigún vehículo.");
	
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "No puedes repostar este vehículo.");
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "Este vehículo no tiene depósito de gasolina.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendNotification(playerid, "Por favor, para primero el motor del vehículo.");
		return 1;
	}
	
	if(!sscanf(params, "d", params[0]))
	{
		new Float:amount = float(params[0]);
		if(amount < 0.0) return SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
		if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
		
		new price = floatround( floatmul(amount, 9.0) );
		
		if(PI[playerid][ac_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true)) {
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;
				
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "Cantidad: ~b~%.1f litros~n~~w~Precio: ~g~%s dólares~w~", amount, number_format_thousand(price));
				Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
			}
		}
		else
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][ac_CASH]), amount);
		}
		return 1;
	}
	
	new text[24];
	if(!sscanf(params, "s[24]", text))
	{
		if(!strcmp(text, "lleno", true))
		{
			new Float:amount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

			new price = floatround( floatmul(amount, 9.0) );
			if(PI[playerid][ac_CASH] >= price)
			{
				if(GivePlayerCash(playerid, -price, true, true)) {
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Cantidad: ~b~%.1f litros~n~~w~Precio: ~g~%s dólares~w~.", amount, number_format_thousand(price));
					Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][ac_CASH]), amount);
			}
		}
		else SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
		return 1;
	}
	
	SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(PI[playerid][ac_FUEL_DRUM] <= 0)
	{
		PI[playerid][ac_FUEL_DRUM] = 0;
		if(GivePlayerCash(playerid, -250, true, true)) {
			PI[playerid][ac_FUEL_DRUM] = 20;
			SendNotification(playerid, "Has comprado un bidón de gasolina de 20 litros por 250$, usa ~g~/vertir ~w~para repostar un vehículo.");
		}
		else SendNotification(playerid, "No tienes suficiente dinero para comprar el bidón.");
	}
	else
	{
		if(PI[playerid][ac_FUEL_DRUM] >= 20) return SendNotification(playerid, "Tu bidón de gasolina está lleno.");
		
		new amount = (20 - PI[playerid][ac_FUEL_DRUM]);
		new price = (13 * amount);
		
		if(PI[playerid][ac_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true)) {
				PI[playerid][ac_FUEL_DRUM] += amount;
				SendFormatNotification(playerid, "Has llenado tu bidón de gasolina con 20 litros por %d$, usa ~g~/vertir ~w~para repostar un vehículo.", price);
			}
		}
		else SendNotification(playerid, "No tienes suficiente dinero para comprar el bidón.");
	}
	return 1;
}

CMD:vertir(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Tienes que estar fuera del vehículo para vertir el bidón.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendNotification(playerid, "Por favor, para primero el motor del vehículo.");
		return 1;
	}
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "Este vehículo no tiene depósito de gasolina.");

	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/vetir [Cantidad de litros]");
	if(params[0] <= 0) return SendNotification(playerid, "Cantidad de litros no válida.");
	if(params[0] > PI[playerid][ac_FUEL_DRUM]) return SendFormatNotification(playerid, "Solo tienes %d.0 litros en el bidón.", PI[playerid][ac_FUEL_DRUM]);
	
	new Float:amount = float(params[0]);
	if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];
	
	PI[playerid][ac_FUEL_DRUM] -= floatround(amount);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;
	SendFormatNotification(playerid, "Has vertido ~b~%.1f litros~w~ del bidón, te quedan ~b~%d.0 litros~w~.", amount, PI[playerid][ac_FUEL_DRUM]);
	Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
	return 1;
}

CMD:setfdrum(playerid, params[])
{
	new to_player, amount;
	if(sscanf(params, "ud", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setfdrum <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	PI[to_player][ac_FUEL_DRUM] = amount;
	
	SendCmdLogToAdmins(playerid, "setfdrum", params);
	return 1;
}

SendPlayerAction(playerid, action[])
{
	new str_text[190];
	format(str_text, sizeof str_text, "* %s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 85);
	return 1;
}

Auto_SendPlayerAction(playerid, action[])
{
	new str_text[145];
	format(str_text, 145, "* %s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF, 0xC2A2DAFF);
	return 1;
}

ShowDialog(playerid, dialogid)
{
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_ID] = dialogid;
	
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			new dialog[140];
			format(dialog, sizeof dialog, "Esta cuenta no está registrada.\nIngrese su contraseña a continuación.\n\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Registrarse", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_LOGIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Ingresar", "Bienvenido de nuevo.\nIngrese su contraseña para acceder.", "Continuar", "Cerrar");
		case DIALOG_SECURE_LOGIN_INSERT_CODE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Verifica tu cuenta", "Se ha enviado un código verificación\nal correo asociado a esta cuenta.\n\nIntroduce el código para acceder:", "Continuar", "Cerrar");
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Correo electrónico", "Ingresa una dirección de correo electrónico válida.\n\nEs importante que tengas acceso al correo ya que\nserá la única manera de recuperar tu contraseña.\n\nTranquilo, no recibirás ningún tipo de SPAM ni suscripciones.", "Continuar", "Cerrar");
		case DIALOG_CLOTHES: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{FF7373}¿Qué quieres comprar?", "Ropa\nAccesorios", ">>", "Salir");
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_PIZZA_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_BURGER_String, "Pedir", "Cerrar");
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_SU_TOYS + 2)], line_str[64];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Accesorio\t{"#BLUE_COLOR"}Colocado\n");
			for(new i; i != MAX_SU_TOYS; i ++)
			{
				if(ACCOUNT_INFO[playerid][ac_VIP])
				{
					if(PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if(i >= MAX_NU_TOYS)
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis accesorios", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
				SendNotification(playerid, "Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.");
				return 1;
			}
			
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[256];
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			else
			{
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
					SendNotification(playerid, "Este accesorio es nuevo y aún no ha sido configurado, configuralo desde 'Configurar el accesorio'.");
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#SILVER_COLOR"}Accesorio - Modificar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente accesorio?\n\t\"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{"#SILVER_COLOR"}Accesorio - Eliminar accesorio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			SendNotification(playerid, "Selecciona en que parte del cuerpo quieres colocar este accesorio.");
			
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), "{"#BLUE_COLOR"}%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			
			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendNotification(playerid, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendNotification(playerid, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_BANK:
		{
			if(PI[playerid][ac_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No tienes cuenta bancaria.");
			
			new caption[80];
			format(caption, sizeof caption, "Mi cuenta bancaria: {"#BLUE_COLOR"}%s {FFFFFF}- Balance actual: {"#BLUE_COLOR"}%s$", number_format_thousand(PI[playerid][ac_BANK_ACCOUNT]), number_format_thousand(PI[playerid][ac_BANK_MONEY]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, 
				"{"#SILVER_COLOR"}1. Retirar dinero\n{"#SILVER_COLOR"}2. Depositar dinero\n{"#SILVER_COLOR"}3. Transferir dinero\n{"#SILVER_COLOR"}4. Últimas transacciones", 
			"Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear cuenta bancaria", 
				"{"#SILVER_COLOR"}Bienvenido, actualmente no tienes una cuenta bancaria.\n\nPara disfrutar de los beneficios de una cuenta bancaria\npuedes crearla ahora mismo con un depósito minimo de 500$.", 
			"Crear", "Cerrar");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere retirar?", number_format_thousand(PI[playerid][ac_BANK_MONEY]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Retirar", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Dinero actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere depositar?", number_format_thousand(PI[playerid][ac_CASH]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Depositar", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", "Indica a que número de cuenta quiere transferir dinero.", "Continuar", "Atrás");
		case DIALOG_BANK_TRANSFER_SEND:
		{
			new dialog[170];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Transferir a cuenta: {"#BLUE_COLOR"}%s\n{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n\n{"#SILVER_COLOR"}¿Cuánto quiere transferir?", number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(PI[playerid][ac_BANK_MONEY]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			inline OnBankMovementsLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[2675], caption[40], line_str[128];
					format(caption, sizeof caption, "Banco - Últimas %d transacciones", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Concepto\t{"#SILVER_COLOR"}Importe\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new date[24], type, from_id, to_id, amount, from_bankid, to_bankid, bool:insull_from_id, bool:isnull_to_id;
							cache_get_value_name(i, "date", date);
							cache_get_value_name_int(i, "type", type);
							cache_is_value_name_null(i, "from_id", insull_from_id);
							if(!insull_from_id) cache_get_value_name_int(i, "from_id", from_id);
							cache_is_value_name_null(i, "to_id", isnull_to_id);
							if(!isnull_to_id) cache_get_value_name_int(i, "to_id", to_id);
							cache_get_value_name_int(i, "amount", amount);
							cache_get_value_name_int(i, "from_bankid", from_bankid);
							cache_get_value_name_int(i, "to_bankid", to_bankid);

							switch(type)
							{
								case BANK_TRANSACTION_WITHDRAW:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Retirada efectivo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_DEPOSIT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Ingreso efectivo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_TRANSFER:
								{
									if(from_id == ACCOUNT_INFO[playerid][ac_ID]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia a %d\t{"#SILVER_COLOR"}-%s$\n", date, to_bankid, number_format_thousand(amount));
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia de %d\t{"#SILVER_COLOR"}%s$\n", date, from_bankid, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_CREATE_ACCOUNT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Apertura cuenta\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de propiedad\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de propiedad\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de vehículo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de vehículo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
							}
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay transacciones en tu cuenta.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bank_movements.*, player.bank_account AS from_bankid, player2.bank_account AS to_bankid FROM bank_movements LEFT JOIN player ON bank_movements.from_id = player.id LEFT JOIN player AS player2 ON bank_movements.to_id = player2.id WHERE bank_movements.from_id = %d OR bank_movements.to_id = %d ORDER BY date DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			MySQL_TQueryInline(srp_db, using inline OnBankMovementsLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "24/7", DIALOG_247_LIST_String, "Continuar", "Cerrar");
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Alimentos", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Alimento - %s", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "- Consumir\n- Dar\n- Vender\n- Eliminar", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Arma - %s", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);

			new dialog_body[1024] = "- Dar\n- Vender\n- Eliminar\n";

			if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_NORMAL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK) {
				new vehicleid = GetPlayerCameraTargetVehicle(playerid);
				if(vehicleid != INVALID_VEHICLE_ID && PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) {
					strcat(dialog_body, "- Guardar en el maletero");
				}
			}
			else if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY) {
				new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);

				if(index != -1) {
					new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
					if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID] && IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos)) {
						strcat(dialog_body, "- Guardar en el armario");
					}
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog_body, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Alimentos - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus alimentos?\nEsta opción no se puede deshacer y perderás todos lo que haya.", "Eliminar", "Atrás");	
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, "Mi teléfono - %d", PI[playerid][ac_PHONE_NUMBER]);
			
			new dialog[200];
			if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_ON) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}1. Agenda\n{"#SILVER_COLOR"}2. Llamar\n{"#SILVER_COLOR"}3. Enviar mensaje\n{"#SILVER_COLOR"}4. Ver mensajes recibidos\n{"#SILVER_COLOR"}5. Ver mensajes enviados\n{"#SILVER_COLOR"}6. Tienda de compra y venta\n{"#SILVER_COLOR"}7. Apagar teléfono");
			else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}1. Encender teléfono\n{"#SILVER_COLOR"}2. Agenda\n{"#SILVER_COLOR"}3. Llamar\n{"#SILVER_COLOR"}4. Enviar mensaje\n{"#SILVER_COLOR"}5. Ver mensajes recibidos\n{"#SILVER_COLOR"}6. Ver mensajes enviados\n{"#SILVER_COLOR"}7. Tienda de compra y venta");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#BLUE_COLOR"}Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				
				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mi teléfono - Agenda", dialog, "Continuar", "Atrás");		
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Llamar\n{"#SILVER_COLOR"}2. Enviar mensaje\n{"#SILVER_COLOR"}3. Cambiar nombre del contacto\n{"#SILVER_COLOR"}4. Eliminar este contacto", "Continuar", "Atrás");			
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "Nombre actual: %s\nTeléfono: %d\n\nIndica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			
			new dialog[140];
			format(dialog, sizeof dialog, "¿Estás seguro de que desea eliminar el siguiente contacto?\n\nNombre: %s\nTeléfono: %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus contactos?\nEsta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");	
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Realizar una llamada", "¿A quién quieres llamar?\nIndique el número al que desea llamar.", "Continuar", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "¿A quién quieres enviarle el mensaje?\nIndique el número al que desea enviar el mensaje.", "Continuar", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "Continuar", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			inline OnSentMessagesLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "Últimos %d mensajes enviados", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Enviado a\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							cache_get_value_name(i, "message", message);
							cache_get_value_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) cache_get_value_name_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.to_id = player.id WHERE pmessages.from_id = %d ORDER BY pmessages.date DESC LIMIT 10;", ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnSentMessagesLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			inline OnReceivedMessagesLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "Últimos %d mensajes recibidos", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Remitente\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							cache_get_value_name(i, "message", message);
							cache_get_value_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) cache_get_value_name_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.from_id = player.id WHERE pmessages.to_id = %d ORDER BY pmessages.date DESC LIMIT 10;", ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnReceivedMessagesLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			new dialog[220];
			
			if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA])
			{
				format(dialog, sizeof dialog, "Coste de la propiedad: %d "SERVER_COIN"\nSeguro: NO\nMonedas "SERVER_COIN" actuales: %d "SERVER_COIN"\nMonedas "SERVER_COIN" tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar esta propiedad?", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA], PI[playerid][ac_COINS], PI[playerid][ac_COINS] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA]);
			}
			else
			{
				format(dialog, sizeof dialog, "Precio de la propiedad: %s$\nSeguro: %s$\nBalance actual: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar esta propiedad?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]), number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE_BASE] / 200), number_format_thousand(PI[playerid][ac_BANK_MONEY]), number_format_thousand(PI[playerid][ac_BANK_MONEY] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar propiedad",  dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS",  "- Mis lugares\n- Mis propiedades\n- Mis vehículos\n- Lugares de interés\n- Trabajos\n- Ver mapa", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{FF846A}Distancia\n");
			
			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++ )
			{
				if(!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%.2f Km\n", listitem + 1, PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				
				sites ++; listitem ++;
			}
			if(sites < MAX_PLAYER_GPS_SAVES)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir lugar actual\n"); listitem ++;
			}
			if(sites > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis lugares", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Añadir lugar", "Tu posición actual será guardada en este lugar para ir más tarde.\nIndica el nombre de este lugar para guardarlo.", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis lugares - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus lugares?\nEsta opción no se puede deshacer y perderás todos los lugares guardados.", "Eliminar", "Atrás");	
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "GPS - %s", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Marcar coordenadas en el GPS\n{"#SILVER_COLOR"}2. Cambiar nombre de este lugar\n{"#SILVER_COLOR"}3. Eliminar este lugar del GPS", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\nIndica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Cambiar nombre de un lugar", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\n¿Estás seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "GPS - Eliminar un lugar", dialog, "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			new dialog[1024];
			format(dialog, sizeof dialog, "- Hospitales\n- Tiendas de Ropa\n- Tiendas 24/7\n- Restaurantes\n- Bancos\n- Cajeros\n- Gasolineras\n- Concesionarios\n- Gobierno\n- Policías\n- "SERVER_SHORT_NAME" Tuning Club\n- Autoescuela\n- Ikea (tienda de muebles)");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS - Lugares de interés", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\tDistancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
				if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;
				
				new line_str[85];
				if(i == WORK_MEDIC)
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}-\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL]);
				else
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Trabajos", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_WORKS_TELEPORTS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				new line_str[85];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s (id: %d)\t{"#SILVER_COLOR"}%d\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], i, work_info[i][work_info_LEVEL]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Trabajos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			new dialog[90 * (sizeof Hospital_Spawn_Positions)], listitem;

			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{"#BLUE_COLOR"}Zona");
			for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				new city[45], zone[45];
				GetPointZone(Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], city, zone);
				format(dialog, sizeof dialog, "%s\n{FFFFFF}Hospital %d\t{"#BLUE_COLOR"}%s, %s", dialog, listitem + 1, city, zone);

				listitem++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Hospitales", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas de ropa", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas 24/7", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Restaurantes", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Bancos", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (sizeof(ATM_BANK) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ATM_BANK); i++ )
			{

				format(line_str, sizeof line_str, "{FFFFFF}Cajero %d\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Cajeros", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				format(line_str, sizeof line_str, "{FFFFFF}Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Gasolineras", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //Policias
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Policías", dialog, "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[90 * (MAX_SU_PROPERTIES + 2)], line_str[90];
					format(dialog, sizeof dialog, "Propiedad\tDistancia\n");
					for(new i = 0; i != MAX_SU_PROPERTIES; i ++) PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU_PROPERTIES) break;
							new property_name[24], Float:pos[3], bool:isnull_name;
							cache_get_value_name_int(i, "id", PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) cache_get_value_name(i, "name", property_name);
							cache_get_value_name_float(i, "ext_x", pos[0]);
							cache_get_value_name_float(i, "ext_y", pos[1]);
							cache_get_value_name_float(i, "ext_z", pos[2]);
							format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", i + 1, property_name, (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis propiedades", dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM properties WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);

					new line_str[115];

					if(!PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE])
						format(line_str, sizeof line_str, "{666666}%d. %s (%d)\t{666666}%s\t{666666}-\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					else
						format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));

					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis vehículos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Propiedad - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[512];
			format(dialog, sizeof dialog, "1. Cambiar nombre de la propiedad\n2. Echar a todo del mundo de mi propiedad\n3. Poner música desde tu MP3\n4. Muebles\n");

			if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_DIS_DEFAULT_INTERIOR]) strcat(dialog, "5. Crear muebles por defecto\n");
			else strcat(dialog, "5. Eliminar muebles por defecto\n");

			if(PI[playerid][ac_CREW])
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, "6. Pasar a propiedad de banda\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			new dialog[85];
			format(dialog, sizeof dialog, "Nombre actual: %s\nIndica el nuevo nombre de la propiedad.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Propiedad - Cambiar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_MP3: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "MP3 - Buscar una canción", "Indica el nombre y cantante de la canción que quieres reproducir.\nSe recomienda añadir la palabra 'audio' para canción directa.\n\nPor ejemplo: Lynyrd Skynyrd - Free Bird (Audio)", "Buscar", "Cerrar");
		case DIALOG_BUY_VEHICLE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 0;
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 0;
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 0;
			
			new dialog[800];
			format(dialog, sizeof dialog, 
				"Vehículo: %s\n\
				Nivel necesario: %d\n\
				Precio del vehículo: %s$\n\
				Velocidad máxima: %d Km/h\n\
				Capacidad depósito: %.1f Litros\n\
				Espacio maletero: %d\n\
				Seguro: %s$\n\n", 
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL],
				number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]),
				floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
				number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100)
			);
			
			new str[145];
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Necesitas ser al menos nivel %d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}
			
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > ACCOUNT_INFO[playerid][ac_VIP])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Necesitas membresía VIP (%d) para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}
			
			if(PI[playerid][ac_BANK_ACCOUNT] == 0)
			{
				strcat(dialog, "{"#RED_COLOR"}- Necesitas una cuenta bancaria para poder comprar vehículos.");
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}
	
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > PI[playerid][ac_BANK_MONEY])
			{
				new diff = SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] - PI[playerid][ac_BANK_MONEY];
				format(str, sizeof str, "{"#RED_COLOR"}- Te faltan %s$ en tu cuenta bancaria para poder comprar este vehículo.", number_format_thousand(diff));
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}
			
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > PI[playerid][ac_COINS])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Te faltan %d "SERVER_COIN" para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] - PI[playerid][ac_COINS]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(PI[playerid][ac_DRIVE_LICENSE_POINTS] == 0)
			{
				strcat(dialog, "{"#RED_COLOR"}- No puedes comprar vehículos sin una licencia.");
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}
			
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]) format(str, sizeof str, "Balance de tu cuenta bancaria: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar este vehículo?", number_format_thousand(PI[playerid][ac_BANK_MONEY]), number_format_thousand(PI[playerid][ac_BANK_MONEY] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
			else format(str, sizeof str, "Tus monedas: %d "SERVER_COIN"\nMonedas tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar este vehículo?", PI[playerid][ac_COINS], PI[playerid][ac_COINS] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
			strcat(dialog, str);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Notaría", "{"#SILVER_COLOR"}Vender una propiedad al banco\n{"#SILVER_COLOR"}Vender un vehículo al banco\n{"#SILVER_COLOR"}Vender una propiedad a una persona\n{"#SILVER_COLOR"}Vender un vehículo a una persona", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[45 * (MAX_SU_PROPERTIES + 2)], line_str[45];
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Propiedad\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU_PROPERTIES) break;
							new property_name[24], bool:isnull_name;
							cache_get_value_name_int(i, "id", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) cache_get_value_name(i, "name", property_name);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, property_name);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la propiedad que quieres vender", dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM properties WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, payment;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
			if(ACCOUNT_INFO[playerid][ac_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderla?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new Float:price, min_price, max_price;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender esta propiedad?", 
			number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender esta propiedad por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[240];
			format(dialog, sizeof dialog,
				"%s te quiere vender una propiedad.\n\n\
				Propiedad: %d\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar esta propiedad?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][ac_BANK_MONEY] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95];
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres vender", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, payment;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			if(ACCOUNT_INFO[playerid][ac_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );
			
			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderlo?", number_format_thousand( VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] ), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new Float:price, min_price, max_price;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );
			
			new dialog[250];
			format(dialog, sizeof dialog, 
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender este vehículo?", 
			number_format_thousand(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender este vehículo por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				"%s te quiere vender un vehículo.\n\n\
				Vehículo: %s\n\
				Matrícula: %s\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar este vehículo?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][ac_BANK_MONEY] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];
				
				if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			new dialog[105 * (sizeof(Truck_Contents) + 2)], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#BLUE_COLOR"}Beneficios\t{"#SILVER_COLOR"}Distancia\n");
			for(new i = 0; i != sizeof Truck_Contents; i ++)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				new line_str[105];
				if(Truck_Contents[i][truck_content_EXP] > PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\t{666666}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s$\t{"#SILVER_COLOR"}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}

				listitem++;
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la carga", dialog, "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[45], dialog[80 * TOTAL_TUNING_PARTS], line_str[80];
					format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= TOTAL_TUNING_PARTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
								break;
							}

							cache_get_value_index(i, 0, PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}Este vehículo no se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.part FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents.modelid = %d GROUP BY vcomponents_info.part;", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID]);
			MySQL_TQueryInline(srp_db, using inline OnComponentsInfoLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[45], dialog[75 * MAX_TUNING_PARTS_COMPONENTS], line_str[75];
					format(caption, sizeof caption, "%s > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_TUNING_PARTS_COMPONENTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
								break;
							}

							cache_get_value_name_int(i, "id", PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID]);
							cache_get_value_name(i, "name", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							cache_get_value_name_int(i, "pieces", PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%d\t{"#SILVER_COLOR"}%s$\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}No se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.id, vcomponents_info.name, vcomponents_info.pieces FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents_info.part = '%e' AND vcomponents.modelid = %d;", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID]);
			MySQL_TQueryInline(srp_db, using inline OnComponentsInfoLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_GRAFFITI_EDIT: {
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_EDIT, DIALOG_STYLE_LIST, "Graffiti", "1. Cambiar posición\n2. Editar texto\n3. Borrar", "Continuar", "Cerrar");
		}
		case DIALOG_MECHANIC_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PI[playerid][ac_MECHANIC_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new dialog[450];
			format(dialog, sizeof dialog, 
			"\
				{"#SILVER_COLOR"}Opción\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n\
				{"#SILVER_COLOR"}Reparación completa\t{"#BLUE_COLOR"}10\t{"#SILVER_COLOR"}500$\n\
			");
			
			for(new i; i != sizeof Mechanic_Areas; i++)
				if(IsPlayerInDynamicArea(playerid, Mechanic_Areas[i]))
				{
					new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
					strcat(dialog, "{"#SILVER_COLOR"}Pintar vehículo\t{"#BLUE_COLOR"}5\t{"#SILVER_COLOR"}250$\n");
					if(PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_LEVEL] >= 100)
					{
						strcat(dialog, "{"#SILVER_COLOR"}Eliminar componentes\n");
						strcat(dialog, "{"#SILVER_COLOR"}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{"#SILVER_COLOR"}Paintjob\t{"#BLUE_COLOR"}15\t{"#SILVER_COLOR"}750$\n");
					}
					else
					{
						strcat(dialog, "{666666}Eliminar componentes\n");
						strcat(dialog, "{666666}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{666666}Paintjob\t{666666}15\t{666666}750$\n");
					}
					break;
				}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio de la reparación.\nRango de precio: 0$ - 2.000$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para pintar el vehículo.\nRango de precio: 0$ - 1.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "Indica el precio para tunear el vehículo.\nRango de precio: 0$ - %s$", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			if(PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] == 3)
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			else
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REM_COM_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Eliminar componente de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el componente del vehículo.\nRango de precio: 0$ - 2.750$", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				
				"\
					{"#SILVER_COLOR"}El mecánico %s te ofrece:\n\
						\t%s\n\
					\n\
					{"#SILVER_COLOR"}Precio: %s$\n\
					¿Quieres aceptarlo?\n\
				",
					PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][pt_RP_NAME],
					PLAYER_TEMP[playerid][pt_MECHANIC_TEXT],
					number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE])
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mecánico", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}Pintar color primario\n{"#SILVER_COLOR"}Pintar color secundario", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR, DIALOG_PLANE_SELECT_COLOR, DIALOG_BOAT_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			
			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], count, line_str[80];
					format(caption, sizeof caption, "Componentes de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Componente\t{"#BLUE_COLOR"}Piezas\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new id, part[24], name[24];
							cache_get_value_name_int(i, "id", id);
							PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] = GetVehicleComponentIndexFromId(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], id);
							if(PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] != -1) {
								cache_get_value_name(i, "part", part);
								cache_get_value_name(i, "name", name);
								cache_get_value_name_int(i, "pieces", PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s > %s\t{"#BLUE_COLOR"}+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								strcat(dialog, line_str);
								count++;
							}
							else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear"); 
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
				}
			}

			new components_query[1024], count;
			format(components_query, sizeof components_query, "SELECT * FROM vcomponents_info WHERE");
			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = -1;
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;
				if(count == 0) format(components_query, sizeof components_query, "%s id = %d", components_query, GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				else format(components_query, sizeof components_query, "%s OR id = %d", components_query, GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				count ++;
			}
			if(!count) SendNotification(playerid, "Vehículo sin tunear.");
			else MySQL_TQueryInline(srp_db, using inline OnComponentsInfoLoad, components_query);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "Paintjob - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if(paintjobs == 0)
			{
				SendNotification(playerid, "Este vehículo no soporta paintjobs.");
				ShowDialog(playerid, DIALOG_MECHANIC_MENU);
				return 1;
			}
			
			strcat(dialog, "{"#SILVER_COLOR"}Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Nombre\tPrecio por semilla\n");
			
			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				if(PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] >= seed_info[i][seed_info_EXP])
				{
					if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
					else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				}
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Semillas", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vale, quieres comprar semillas de %s.\n{"#SILVER_COLOR"}El precio por semilla es de: %d$\n\n{"#SILVER_COLOR"}¿Cuántas semillas quieres comprar?", seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Semillas", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Planta\tSemilla requerida\tSemillas necesarias\n");
			
			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];
				
				if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Plantar", dialog, "Continuar", "Cerrar");
		}
		case DIALOG_BLACK_MARKET:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Mercado negro", "{"#SILVER_COLOR"}Comprar armas\n{"#SILVER_COLOR"}Comprar munición para mis armas", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			new dialog[64 * (sizeof(BLACK_MARKT_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#SILVER_COLOR"}Precio\n");
			
			for(new i = 0; i != sizeof BLACK_MARKT_WEAPONS; i ++)
			{
				new line_str[64];
				if(BLACK_MARKT_WEAPONS[i][black_market_EXP] > PI[playerid][ac_BLACK_MARKET_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
			
			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 3$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
			
			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = 13 + 20;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis armas", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar todo", "¿Estás seguro de que quiere eliminar todas sus armas?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\n¿Estás seguro de que quiere eliminar esta arma?\nEsta opción no se puede deshacer.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar arma", dialog, "Eliminar", "Cerrar");	
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Animaciones", DIALOG_ANIMS_String, "Continuar", "X");
		case DIALOG_TRICKS_FOOD:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: alimento\nNombre: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_POCKET[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: medicamento\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: marihuana\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: crack\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{	
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender %d "SERVER_COIN"\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{	
			new dialog[180];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: arma\nNombre: %s\nMunición: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
	
			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
			
			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, "Tipo\tDescripción\n");
			
			for(new i = 0; i != max_slots; i ++)
			{
				if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT]));
							strcat(dialog, line_str);
						}
					}
					
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}
			
			new caption[64];
			format(caption, sizeof caption, "Maletero de %s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su maletero?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");	
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{	
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Opciones", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];

			switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE])
			{
				case BOOT_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));
				case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ));
			}			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[60 * sizeof(POLICE_SKINS)], line_str[60], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Ropa\t{"#SILVER_COLOR"}Rango necesario\n");
			for(new i = 0; i != sizeof POLICE_SKINS; i ++)
			{
				if(POLICE_SKINS[i][police_skin_TYPE] != PI[playerid][ac_GENDER]) continue;
				
				if(POLICE_SKINS[i][police_skin_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ropa", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			new dialog[64 * 6];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountPoliceRadioPlayers(i);
				
				if(PLAYER_TEMP[playerid][pt_POLICE_RADIO] == i) strcat(dialog, "{"#SILVER_COLOR"}");
				else strcat(dialog, "{666666}");
				format(dialog, sizeof dialog, "%sFrecuencia %d:\t%d personas\n", dialog, i, players);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Selecciona la frecuencia", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i ++)
					{
						new level, id, name[24], last_connection[24], connected;
						cache_get_value_name_int(i, "level", level);
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, POLICE_RANKS[level]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, POLICE_RANKS[level], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "policías", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.id, player.name, player.last_connection, player.connected FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_work = %d AND pworks.`set` = 1 ORDER BY player.connected DESC, pworks.level DESC LIMIT %d, %d;", WORK_POLICE, PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new level, name[24];
						cache_get_value_name_int(0, "level", level);
						cache_get_value_name(0, "name", name);

						if(level > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
							format(caption, sizeof caption, "policía - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
							for(new i = 1; i != sizeof POLICE_RANKS; i ++)
							{
								if(i > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
								{
									if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
								}
								else
								{
									if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", POLICE_RANKS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", POLICE_RANKS[i]);
								}
								strcat(dialog, line_str);
							}
							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d AND pworks.`set` = 1;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Equiparse", "{"#SILVER_COLOR"}Comprar armas\n{"#SILVER_COLOR"}Comprar munición para mis armas\n{"#SILVER_COLOR"}Comprar chaleco antibalas", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
			
			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;
				
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i; 
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 2$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar chaleco", "El precio del chaleco antibalas es de 300$.\n¿Lo quieres comprar?", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			new dialog[64 * (sizeof(POLICE_SHOP_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#SILVER_COLOR"}Precio\n");
			
			for(new i = 0; i != sizeof POLICE_SHOP_WEAPONS; i ++)
			{
				new line_str[64];
				if(POLICE_SHOP_WEAPONS[i][police_shop_RANK] > PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""SERVER_NAME" v"SERVER_VERSION"",
			
				"\
					{"#SILVER_COLOR"}- General\n\
					{"#SILVER_COLOR"}- Información\n\
					{"#SILVER_COLOR"}- Personaje\n\
					{"#SILVER_COLOR"}- Propiedades\n\
					{"#SILVER_COLOR"}- Reportar\n\
					{"#SILVER_COLOR"}- Trabajos\n\
					{"#SILVER_COLOR"}- Vehículos\n\
					{"#SILVER_COLOR"}- Bandas\n\
					{"#PRIMARY_COLOR"}- Membresía VIP\n\
					{"#PRIMARY_COLOR"}- Verificación en dos pasos\n\
				"
			
			, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_GENERAL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "General",
			
				"\
					{FFFFFF}Un día del juego dura tres horas reales.\n\
					\n\
					Para subir de nivel necesitas rellenar la reputación, puedes verlo gráficamente\n\
					en la barra que aparece en la parte superior derecha que representa tu reputación.\n\
					La reputación se aumenta cada {"#PRIMARY_COLOR"}25 minutos,{FFFFFF} cuando la reputación llegue\n\
					al límite podrás subir al siguiente nivel con el comando {"#SILVER_COLOR"}/comprarnivel.\n\
					{FFFFFF}El pago de juego(payday) se recibe cada tres reputaciones {"#PRIMARY_COLOR"}(75 minutos).\n\
					{FFFFFF}Puedes utilizar {"#SILVER_COLOR"}/csave{FFFFFF} para guardar los datos de tu cuenta.\n\
					\n\
					Utiliza {"#SILVER_COLOR"}/estadisticas{FFFFFF} para ver tus estadísticas, utiliza {"#SILVER_COLOR"}/exp{FFFFFF} para ver tus habilidades.\n\
					En el nivel uno no podrás agredir a otros jugadores, tampoco podrás tener armas\n\
					hasta el nivel tres.\n\
					Utiliza {"#SILVER_COLOR"}/nombre{FFFFFF} para cambiar tu nombre.\n\
					Utiliza {"#SILVER_COLOR"}/correo{FFFFFF} para cambiar tu correo electrónico.\n\
					Utiliza {"#SILVER_COLOR"}/pass{FFFFFF} para cambiar la contraseña de tu cuenta.\n\
					Para ver el tiempo que te queda en la cárcel utiliza {"#SILVER_COLOR"}/tiempo.\n\
					\n\
					{FFFFFF}Para utilizar el canal de dudas utiliza el comando {"#SILVER_COLOR"}/duda{FFFFFF} seguido de tu duda.\n\
					Para deshabilitar o volver a habilitar el canal de dudas usa {"#SILVER_COLOR"}/dudas.\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/panel {FFFFFF}para configuraciones básicas de tu cuenta.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_INFO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Información", DIALOG_CREDIT_String, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_CHARACTER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Personaje",
			
				"\
					{FFFFFF}Para poder localizar cualquier punto en San Andreas te recomandamos que compres\n\
					un GPS en cualquier tienda {FF846A}24/7.{FFFFFF} Desde el GPS podrás localizarlo todo, tus vehículos,\n\
					tus propiedades, trabajos, lugares de interés, etc.\n\
					\n\
					Utiliza tu teléfono para llamar a la policía, mecánico, taxi... o para hablar con\n\
					alguien, por defecto tendrás varios contactos en la agenda pero puedes eliminarlos\n\
					o añadir más, puedes tener hasta 20 contactos, todo esto se hace desde {"#SILVER_COLOR"}/movil{FFFFFF} o {"#SILVER_COLOR"}/celular.\n\
					\n\
					{FFFFFF}En las tiendas {FF846A}24/7{FFFFFF} puedes comprar guías para saber el número de cualquier jugador.\n\
					Para evitar aparecer en la guía utiliza {"#SILVER_COLOR"}/sguia.\n\
					\n\
					{FFFFFF}Las barras en la esquina superior derecha representan tu nivel de hidratación y de alimentación,\n\
					si los niveles llegan muy abajo tu personaje se empezará a sentir mal y empezarás a perder vida.\n\
					Los niveles bajarán según tu actividad física, corriendo te dará sed más pronto que caminando.\n\
					Para alimentarte ve a un restaurante de cómida rápida o a un {FF846A}24/7{FFFFFF} donde podrás comprar alimentos,\n\
					que podrás consumir el cualquier momento con {"#SILVER_COLOR"}/alimentos{FFFFFF} o {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes dar objetos con el comando {"#SILVER_COLOR"}/dar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man dar.\n\
					{FFFFFF}Puedes deshacerte de tus objetos con el comando {"#SILVER_COLOR"}/tirar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man tirar.\n\
					{FFFFFF}Puedes vender objetos con el comando {"#SILVER_COLOR"}/vender, para más información utiliza {"#SILVER_COLOR"}/man vender.\n\
					{FFFFFF}Para consumir consumibles que lleves contigo utiliza {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes cambiar la ropa de tu personaje en cualquier tienda de ropa, también\n\
					podrás comprarte accesorios y ponertelos o quitartelos {"#SILVER_COLOR"}(/accesorios).\n\
					\n\
					{FFFFFF}Si tienes nivel de búsqueda o estás arrestado y mueres irás a la cárcel después de recuperarte.\n\
					Cuando te arresten los policías te pueden requisar tus pertenencias ilegales {FF846A}(armas y drogas).\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/inv{FFFFFF} o pulsa {"#SILVER_COLOR"}N {FFFFFF}para ver todo lo que llevas encima.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/estilo{FFFFFF} para cambiar el estilo de tu personaje.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_PROPERTIES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedades",
			
				"\
					{FFFFFF}Puedes encontrar diferentes propiedades en todo {FF846A}San Andreas,{FFFFFF} para comprarla tendrás que saber la\n\
					ID de la propiedad e ir a cualquier banco para comprarla, el dinero se descuenta de la cuenta bancaria.\n\
					\n\
					Puedes localizar tus propiedades con el GPS.\n\
					Puedes dejar pasar a cualquiera a tu propiedad, solo tiene que tocar el timbre\n\
					y tu elijes si quieres dejarlo pasar o no.\n\
					\n\
					Si quieres echar a alguien que está dentro de tu propiedad utiliza el comando {"#SILVER_COLOR"}/echar.\n\
					{FFFFFF}Dentro de la propiedad sitúate en la puerta interior y pon {"#SILVER_COLOR"}/casa,{FFFFFF} desde ahí podras\n\
					cambiar el nombre de la propiedad para así localizarla más fácilmente en el GPS.\n\
					{FFFFFF}también podrás echar a todos los huéspedes de tu propiedad.\n\
					Si tienes un MP3 podrás poner música en él y hacer que se reproduzca para toda la gente\n\
					que haya dentro de la propiedad.\n\
					\n\
					Si quieres vender tu propiedad puedes hacerlo en {"#PRIMARY_COLOR"}\"Gobierno San Andreas\"{FFFFFF}, localizaló en el GPS.\n\
					Puedes vendersela al banco al instante, pero te darán solo el 25% de lo que te costó {FF846A}(50% VIP).\n\
					{FFFFFF}también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu propiedad a un jugador puedes ponerla en {"#SILVER_COLOR"}/tienda.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_REPORT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Reportar",
			
				"\
					{FFFFFF}Para un reporte simple utiliza {"#SILVER_COLOR"}/reportar ID{FFFFFF} para reportar a un jugador.\n\
					\n\
					Para reportes más detallado debes publicarlos en el foro aportando imágenes.\n\
					Los reportes de fallos o bugs también deberás hacerlo en el foro junto con imágenes.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_VEHICLES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Vehículos",
			
				"\
					{FF846A}GENERAL\n\
					{FFFFFF}Para arrancar o detener un vehículo presiona {"#SILVER_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}o utiliza {"#SILVER_COLOR"}/motor.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/luces{FFFFFF} para encender o apagar las luces del vehículos.\n\
					Si tu vehículo se daña tendrás que llamar a un mecánico desde tu móvil para que lo repare.\n\
					\n\
					Cada vehículo tiene su cantidad máxima del depósito de gasolina.\n\
					Para repostar el vehículo debes ir a cualquier gasolinera, puedes localizarlas con el GPS.\n\
					también puedes comprar un bidón de gasolina para {"#SILVER_COLOR"}/vertir{FFFFFF} gasolina en cualquier momento.\n\
					Si tienes un MP3 puedes poner una canción en el vehículo con el comando {"#SILVER_COLOR"}/vmp3.\n\
					\n\
					\n\
					{FF846A}VEHICULOS PERSONALES\n\
					{FFFFFF}Para comprarlos ve a cualquier concesionario.\n\
					El dinero para comprarlo es el de la cuenta bancaria.\n\
					Para localizar tus vehículos utiliza el GPS.\n\
					\n\
					Utiliza {"#SILVER_COLOR"}/abrir{FFFFFF} para abrir las puertes de tu vehículo, utiliza {"#SILVER_COLOR"}/cerrar{FFFFFF} para cerrarlas.\n\
					Puedes estacionar tu vehículo con el comando {"#SILVER_COLOR"}/estacionar.\n\
					{FFFFFF}Cuando tu vehículo sea destruido recibirás uno nuevo en tu último estacionamiento.\n\
					Para pintar, tunear o modificar tu vehículo tendrás que hacerlo en el mecánico.\n\
					\n\
					Puedes guardar cosas en el maletero del vehículo con el comando {"#SILVER_COLOR"}/guardar.\n\
					{FFFFFF}Para sacar cosas del maletero puedes utilizar {"#SILVER_COLOR"}/maletero.\n\
					\n\
					{FFFFFF}Si quieres vender tu vehículo puedes hacerlo en \"Gobierno San Andreas\", localizaló en el GPS.\n\
					Puedes venderselo al banco, pero te darán solo el 25% de lo que te costó (50% VIP).\n\
					también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu vehículo a un jugador puedes ponerlo en {"#SILVER_COLOR"}/tienda.\n\
					{FFFFFF}Al vender tu vehículo se venderá con todo lo que haya en el maletero.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			new dialog[45 * sizeof work_info], line_str[45];
			for(new i = 1; i != sizeof work_info; i ++)
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}- %c%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1]);
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trabajos", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_CREWS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Bandas",
			
				"\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/banda{FFFFFF} para crear una banda o administrar la tuya.\n\
					{FFFFFF}Al entrar a una banda puedes conquistar territorios por todo San Andreas.\n\
					\n\
					{FFFFFF}Visita {FF846A}"SERVER_WEBSITE" {FFFFFF}para más información.\n\
					\n\
				"
			
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_SU:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Membresía VIP",
			
				"\
					{"#SILVER_COLOR"}Puedes comprar VIP por 30 días con el comando /vip.\n\
					{"#SILVER_COLOR"}Se compra con "SERVER_COIN", para ver como comprar esta moneda visita nuestra web.\n\
					\n\
					{"#PRIMARY_COLOR"}Ventajas\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_WORKS" trabajos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_VEHICLES" vehículos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_TOYS" accesorios.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_PROPERTIES" propiedades.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_PROPERTY_OBJECTS" muebles por propiedad.\n\
					{"#SILVER_COLOR"}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{"#SILVER_COLOR"}- No pierdes chaleco al morir.\n\
					{"#SILVER_COLOR"}- Al vender un vehículo o propiedad al banco recibes un 50%.\n\
					{"#SILVER_COLOR"}- Te recuperas el doble de rápido en el hospital.\n\
					{"#SILVER_COLOR"}- Al recuperarte tu vida es del 100%.\n\
					{"#SILVER_COLOR"}- Reducción de la condena a la mitad.\n\
					{"#SILVER_COLOR"}- Cuando un médico te cura vida al 50%.\n\
					{"#SILVER_COLOR"}- Comprar armas en mercado negro sin pertenecer a banda.\n\
					{"#SILVER_COLOR"}- Comprar armas sin esperar 5 minutos por cada compra.\n\
					{"#SILVER_COLOR"}- Pagas extras de 300$ en algunos trabajos.\n\
					\n\
					{"#SILVER_COLOR"}Visita {"#PRIMARY_COLOR"}"SERVER_WEBSITE" {"#SILVER_COLOR"}para más información.\n\
					\n\
				"
			
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_SECURE_LOGIN:
		{
			new string[512];
			format(string, sizeof string, 
				"\
					Activa la verificación en dos pasos para proteger tu cuenta.\n\
					Cuando tu IP cambie se enviará un correo electrónico para\n\
					poder verificiar el inicio de sesión\n\
					\n\
					Tu dirección de correo electrónico actual es: %s.\n\
					Puedes cambiar tu correo con el comando /correo.\n\
					\n\
					Para activar o desactivar la verificación en dos pasos utiliza el comando /panel.\
				",
					ACCOUNT_INFO[playerid][ac_EMAIL]
			);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Verificación en dos pasos", string, "Cerrar", "");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, pid, admin_level;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "playerid", pid);
						cache_get_value_name_int(i, "admin_level", admin_level);

						if(connected)
						{
							if(PLAYER_TEMP[pid][pt_ADMIN_SERVICE]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Duty (%d)\n", start_pos + i, name, ADMIN_LEVELS[admin_level], pid);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado (%d)\n", start_pos + i, name, ADMIN_LEVELS[admin_level], pid);
						}
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, ADMIN_LEVELS[admin_level], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, playerid, admin_level FROM player WHERE admin_level > 0 ORDER BY connected DESC, admin_level DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], admin_level;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "admin_level", admin_level);

						if(admin_level > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
							format(caption, sizeof caption, "Admin - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Normal (eliminar)\n");

							for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
							{
								if(i > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
								}
								else
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", ADMIN_LEVELS[i]);
								}
								strcat(dialog, line_str);
							}
							
							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, admin_level FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nueva contraseña.\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
			
			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";
			
			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat", dialog, "Continuar", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
			
			new caption[45], dialog[90];
			
			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];
			
			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", "Continuar", "Atrás");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Estás seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", "{"#SILVER_COLOR"}Propiedad\n{"#SILVER_COLOR"}Vehículo\n{"#SILVER_COLOR"}Otros", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\t{"#SILVER_COLOR"}Precio\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;
				
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;
					
					new line_str[95], veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres remolcar", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Banda", "No perteneces a ninguna banda.\n\n¿Quieres crear una?\nPara crear una banda necesitas ser nivel 5, además cuesta 600.000$.", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear banda", "Introduce el nombre de tu banda.\nHasta 32 caracteres.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,
					
					"\
						{"#SILVER_COLOR"}Nombre de la banda: %s\n\
						{"#SILVER_COLOR"}Color de la banda: {%06x}color %d\n\
						{"#SILVER_COLOR"}Coste de creación: 600.000$\n\
						\n\
						{"#SILVER_COLOR"}¿Quieres crear esta banda?\n\
						{"#SILVER_COLOR"}Una vez creada podrás crear rangos, modificarlos y mucho más.\n\
						\n\
					", 
						PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME],
						RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] + 1
			);
					
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear banda", dialog, "Crear", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "Mi banda -  {%06x}'%s'", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
			
			format(dialog, sizeof dialog, "Ver miembros\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Echar a un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rango de un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Crear rangos o modificarlos\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}
			
			strcat(dialog, "Abandonar banda\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 1;
			listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], caption[64], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						count++;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][ac_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Nombre actual de la banda:\n\t\"%s\"\n\nIndica el nuevo nombre.\nMáximo 32 caracteres.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Echar a un miembro", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][ac_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Echar a un miembro", "¿Estás seguro de que quieres echar a este miembro de la banda?", "Echar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][ac_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Te han ofrecio unirte a una banda.\n\nBanda: %s\nRango: %s\n", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Invitación", dialog, "Unirme", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID])
				{
					if(i < PI[playerid][ac_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(i < PI[playerid][ac_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Rangos", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual del rango:\n\t\"%s\"\n\nIndica el nuevo nombre del rango.\nMáximo 32 caracteres.", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar rango", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new caption[70];
			format(caption, sizeof caption, "Modificar permisos del rango '%s'", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			
			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, "Permiso\tActivado\n");
			
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				
				strcat(dialog, line_str);
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear nuevo rango", "Indica el nombre del rango.\nMáximo 32 caracteres.", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
				if(i == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]) continue;
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][ac_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);
				
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Seleccionar nuevo rango", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new affected_members;
						cache_get_value_index_int(0, 0, affected_members);
						
						new dialog[400];
						format(dialog, sizeof dialog, 
								
							"\
								Rango que se eliminará:\n\
									\t'%s'\n\
								\n\
								Miembros afectados: %d\n\
								El nuevo rango de estos miembros será:\n\
									\t'%s'\n\
								\n\
								¿Seguro que quieres eliminar el rango? Esta opción no se puede deshacer.\n\
								\n\
							",
								CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME],
								affected_members,
								CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar rango", dialog, "Eliminar", "Cancelar");

					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
			MySQL_TQueryInline(srp_db, using inline OnCrewInfoLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new affected_members, crew_territories;
						cache_get_value_index_int(0, 0, affected_members);
						cache_get_value_index_int(0, 0, crew_territories);

						new dialog[450];
						format(dialog, sizeof dialog, 
								
							"\
								Banda: %s\n\
								Miembros: %d\n\
								Territorios: %d\n\
								\n\
								¿De verdad quieres borrar la banda?\n\
								\n\
							",
								CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME],
								affected_members,
								crew_territories
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Eliminar", "Cancelar");
					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(player.id), COUNT(territories.id) FROM player, territories WHERE player.crew = %d AND territories.id_crew = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID]);
			MySQL_TQueryInline(srp_db, using inline OnCrewInfoLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar banda", "¿Quieres abandonar la banda?\nEsta opción no se puede deshacer.", "Abandonar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}Últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Modificar rango de un miembro", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][ac_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnDialogQueryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], crew_rank;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "crew_rank", crew_rank);

						if(crew_rank < PI[playerid][ac_CREW_RANK]) SendNotification(playerid, "No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
						else
						{
							if(crew_rank == 0)
							{
								inline OnCountQueryLoad()
								{
									if(cache_get_row_count(rows))
									{
										if(rows)
										{
											new total;
											cache_get_value_index_int(0, 0, total);
											if(total <= 1) SendNotification(playerid, "No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
											else
											{
												new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
												format(caption, sizeof caption, "Miembro - %s", name);
												for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
												for(new i = 0; i != CREW_RANK_SIZE; i ++)
												{
													if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
													
													if(i < PI[playerid][ac_CREW_RANK])
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													else
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													strcat(dialog, line_str);
													PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
												}
												ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
											}
										}
									}
								}
								mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][ac_CREW]);
								MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
							}
							else
							{
								new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
								format(caption, sizeof caption, "Miembro - %s", name);
								for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
								for(new i = 0; i != CREW_RANK_SIZE; i ++)
								{
									if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
									
									if(i < PI[playerid][ac_CREW_RANK])
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									else
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									strcat(dialog, line_str);
									PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
							}
						}
					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, crew_rank FROM player WHERE id = %d;",  PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			MySQL_TQueryInline(srp_db, using inline OnCrewInfoLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar territorio", "¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", "Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El policía %s te ha puesto una multa.\nImporte: %s$\n", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Multa", dialog, "Pagar", "Cerrar");
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			new dialog[512];
			format(dialog, sizeof dialog,
				
				"\
					PROPIEDADES\t%.4f\n\
					VEHICULOS\t%.4f\n\
					TOYS\t%.4f\n\
					SKINS\t%.4f\n\
					ARMAS\t%.4f\n\
					VIP\t%d "SERVER_COIN"\n\
					VIP JOB EXTRA PAY\t%d\n\
					CHANGE NAME\t%d "SERVER_COIN"\n\
				",
					MULTIPLIER_PROPERITES,
					MULTIPLIER_VEHICLES,
					MULTIPLIER_TOYS,
					MULTIPLIER_SKINS,		
					MULTIPLIER_WEAPONS,
					SU_SD_PRICE,
					SU_WORK_EXTRA_PAY,
					CHANGE_NAME_SD_PRICE
			);	
				
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Multiplicadores", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			new dialog[32];
			switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
			{
				case 0: format(dialog, sizeof dialog, "PROPIEDADES: %f", MULTIPLIER_PROPERITES);
				case 1: format(dialog, sizeof dialog, "VEHICULOS: %f", MULTIPLIER_VEHICLES);
				case 2: format(dialog, sizeof dialog, "TOYS: %f", MULTIPLIER_TOYS);
				case 3: format(dialog, sizeof dialog, "SKINS: %f", MULTIPLIER_SKINS);
				case 4: format(dialog, sizeof dialog, "ARMAS: %f", MULTIPLIER_WEAPONS);
				case 5: format(dialog, sizeof dialog, "Coste VIP: %d "SERVER_COIN"", SU_SD_PRICE);
				case 6: format(dialog, sizeof dialog, "VIP JOB EXTRA PAY: %d", SU_WORK_EXTRA_PAY);
				case 7: format(dialog, sizeof dialog, "Coste cambiar nombre: %d "SERVER_COIN"", CHANGE_NAME_SD_PRICE);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Multiplicador", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El coste del VIP es de %d "SERVER_COIN"\nDuración: 30 días\n\n¿Comprar?", SU_SD_PRICE);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_SU:
		{
			new dialog[256], current_date[24];
			getDateTime(current_date);
			format(dialog, sizeof dialog, 
				
				"\
					Fecha actual: %s\n\
					Fecha caducidad: %s\n\
					\n\
					Renuevalo 30 días más por %d "SERVER_COIN".\n\
					\n\
				",
					current_date,
					ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE],
					SU_SD_PRICE
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Cerrar", "Renovar");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[45];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "1. Mis objetos\n2. Comprar objeto\n3. Añadir texto (500$)\n4. Añadir bandera de país (2.000$)\n5. Añadir panel de país (2.000$)", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Objeto\t{"#BLUE_COLOR"}Colocado\n");
			for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Texto\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
			}
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{		
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);
				
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			new dialog[145];
			format(dialog, sizeof dialog, 
					
					"\
						Color original\n\
						{%06x}Veh Color 1\n\
						{%06x}Veh Color 2\n\
						{FFFFFF}Otro (ARGB)\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Estás seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");	
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, "Texto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Texto actual:\n\"%s\"\n\nIndica el nuevo texto (1-32 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar texto", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Fuente actual:\n\"%s\"\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Tamaño actual: %d\n\nIndica el nuevo tamaño\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar tamaño de letra", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIAlOG_BUY_MASO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{2396FA}Herramientas de minería", "Masa\t\t\t\t\t{16DC45}300${FFFFFF}", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona país",
				
				"\
					Alemania\n\
					Argentina\n\
					Austria\n\
					Belgica\n\
					Bolivia\n\
					Bulgaria\n\
					Chile\n\
					Colombia\n\
					El Salvador\n\
					España\n\
					Estonia\n\
					Francia\n\
					Guatemala\n\
					Holanda\n\
					Hungrúa\n\
					India\n\
					Indonesia\n\
					Irlanda\n\
					Italia\n\
					Lituania\n\
					Luxemburgo\n\
					Madagascar\n\
					Malta\n\
					Malí\n\
					México\n\
					Nigeria\n\
					Panamá\n\
					Paraguay\n\
					Perú\n\
					Polonia\n\
					Rumanía\n\
					Rusia\n\
					Ucrania\n\
					Venezuela\n\
				"
				
			, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			new dialog[512];
			format(dialog, sizeof dialog, 
				
				"\
					Audios del servidor\t%s\n\
					Barras indicadoras (hud)\t%s\n\
					Ver sanciones, kicks, baneos\t%s\n\
					Número en guía telefónica\t%s\n\
					Sonidos del servidor\t%s\n\
					Mostrar hora del servidor\t%s\n\
					Canal de dudas\t%s\n\
					Verificación en dos pasos\t%s\
				",
					(PI[playerid][ac_CONFIG_AUDIO] ? "Sí" : "No"),
					(PI[playerid][ac_CONFIG_HUD] ? "Sí" : "No"),
					(PI[playerid][ac_CONFIG_ADMIN] ? "Sí" : "No"),
					(PI[playerid][ac_PHONE_VISIBLE_NUMBER] ? "Sí" : "No"),
					(PI[playerid][ac_CONFIG_SOUNDS] ? "Sí" : "No"),
					(PI[playerid][ac_CONFIG_TIME] ? "Sí" : "No"),
					(ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] ? "Sí" : "No"),
					(PI[playerid][ac_CONFIG_SECURE_LOGIN] ? "Sí" : "No")
			);
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Panel de configuración del usuario", dialog, "Cambiar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			new caption[128];
			format(caption, sizeof caption, "Placa Nº%d | %c. %s", PI[playerid][ac_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, "Ver Últimos registros a BYC\nBuscar BYC de una persona", "Continuar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Búsqueda", "Introduce el nombre completo del sospechoso.\n\nUsa el guión bajo para separar nombre y apellido\nPor ejemplo: Nombre_Apellido.", "Buscar", "Cerrar");	
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						cache_get_value_name_int(i, "id_player", id);
						cache_get_value_name_int(i, "id_player", id_player);
						cache_get_value_name(i, "text", text);
						cache_get_value_name(i, "date", date);
						cache_get_value_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) cache_get_value_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id ORDER BY police_history.date DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnPoliceHistoryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name_int(i, "id_player", id_player);
						cache_get_value_name(i, "text", text);
						cache_get_value_name(i, "date", date);
						cache_get_value_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) cache_get_value_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "Continuar", "Cerrar");
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id WHERE police_history.id_player = %d ORDER BY police_history.date LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnPoliceHistoryLoad, QUERY_BUFFER);
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "BYC", "¿Borrar esto del historial?", "Borrar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar nombre", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nuevo nombre.\nEl nombre debe respear el formato Nombre_Apellido.\n\nEl coste por el cambio de nombre es de %d "SERVER_COIN"", CHANGE_NAME_SD_PRICE);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar correo electrónico", "Introduce tu contraseña actual.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar correo electrónico", "Introduce tu nuevo correo electrónico.", "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new max_slots = MAX_CLOSET_SLOTS,
				dialog[128 * (MAX_CLOSET_SLOTS + 2)], line_str[128], listitem;

			format(dialog, sizeof dialog, "Tipo\tDescripción\n");
			
			for(new i = 0; i != max_slots; i ++)
			{
				if(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_VALID])
				{
					switch(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE])
					{
						case CLOSET_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT] ][weapon_info_NAME], number_format_thousand(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), number_format_thousand(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT]));
							strcat(dialog, line_str);
						}
					}
					
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, "Armario (%d espacios disponibles)", max_slots - listitem);
			
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_CLOSET_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Continuar", "Cerrar");
		}
		case DIALOG_PROPERTY_CLOSET_DLT_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su armario?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");	
		case DIALOG_PROPERTY_CLOSET_OPTIONS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Armario", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "Continuar", "Atrás");	
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DELETE:
		{
			new dialog[190];
			switch(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE])
			{
				case CLOSET_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_NAME], number_format_thousand( PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT_EXTRA] ));
				case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), number_format_thousand( PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ));
			}			
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OBJECTS_MENU: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Muebles", "1. Editar mueble\n2. Ver muebles guardados\n3. Eliminar todos los muebles", "Continuar", "Cancelar");	
		default: return 0;
	}
	return 1;
}

#include "core/dialog/response"

GetDatabasePages(count, limit)
{
	return floatround(floatdiv(count, limit), floatround_ceil);
}

AddNewAd(playerid, type, price, text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4], date[24];
	getDateTime(date);
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}
	
	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO shop (id_player, type, price, text, modelid, rx, ry, rz, zoom, vcol1, vcol2, date)\
			VALUES (%d, %d, %d, '%e', %d, %f, %f, %f, %f, %d, %d, '%e');\
		",
			ACCOUNT_INFO[playerid][ac_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2, date
	);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}

forward OnPlayerSongFound(index, response_code, data[]);
public OnPlayerSongFound(index, response_code, data[])
{
	if(!PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP]) return 1;
	
	if(response_code == 200)
	{
		if(data[0] == '|' && data[1] == '[')
		{
			new start_song_pos = -1, end_song_pos = -1, delimiter_pos_info = -1, counter, tmp[yt_result];
			for(new i = 0; i != sizeof RESULT_YOUTUBE; i ++) RESULT_YOUTUBE[i] = tmp;
			
			start_song_pos = strfind(data, "|[");
			while(start_song_pos != -1)
			{
				start_song_pos = strfind(data, "|[");
				if(start_song_pos == -1) break;
				delimiter_pos_info = strfind(data, "||");
				strmid(RESULT_YOUTUBE[counter][videoID], data, start_song_pos + 2, delimiter_pos_info, 11 + 1);
				
				end_song_pos = strfind(data, "]|");
				strmid(RESULT_YOUTUBE[counter][yt_title], data, delimiter_pos_info + 2, end_song_pos, 100 + 1);
				strdel(data, 0, end_song_pos + 2);
				counter ++;
			}
			
			if(counter == 0) return SendClientMessage(index, -1, "{"#SILVER_COLOR"}No se encontró ningún resultado para tu búsqueda.");
			
			new dialog_title[50], dialog[120 * MAX_RESULTS], dialog_counter;
			
			for(new i = 0; i != counter; i ++)
			{
				if(isnull(RESULT_YOUTUBE[i][yt_title])) continue;
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][videoID], 11 + 1, "%s", RESULT_YOUTUBE[i][videoID]);
				format(PLAYER_DIALOG_MP3_RESULT[index][dialog_counter][yt_title], 100 + 1, "%s", RESULT_YOUTUBE[i][yt_title]);
				format(dialog, sizeof dialog, "%s{"#SILVER_COLOR"}%d. %s\n", dialog, dialog_counter + 1, RESULT_YOUTUBE[i][yt_title]);
				dialog_counter ++;
			}
			format(dialog_title, sizeof dialog_title, "{"#SILVER_COLOR"}Se han encontado '%d' resultados", dialog_counter);

			PLAYER_TEMP[index][pt_DIALOG_RESPONDED] = false;
			PLAYER_TEMP[index][pt_DIALOG_ID] = DIALOG_PLAYER_MP3_RESULTS;
			ShowPlayerDialog(index, DIALOG_PLAYER_MP3_RESULTS, DIALOG_STYLE_LIST, dialog_title, dialog, "Reproducir", "Cerrar");
		}
		else SendClientMessage(index, -1, "{"#SILVER_COLOR"}El resultado obtenido no puede ser comprendido.");
	}
	else SendClientMessage(index, -1, "{"#SILVER_COLOR"}La búsqueda falló, inténtelo de nuevo más tarde.");
	
	PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP] = false;
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if(!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	Streamer_Update(playerid, STREAMER_TYPE_CP);

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID])
		{
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TAXI)
			{
				if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
				{
					if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
					{
						if(IsValidDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
						{
							DestroyDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
							PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
						}
						PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);
						
						new taxi_info[1];
						taxi_info[0] = CHECKPOINT_TYPE_GPS;
						Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);
						
						Streamer_Update(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], STREAMER_TYPE_CP);
						Auto_SendPlayerAction(playerid, "configura su GPS y se lo muestra al taxista.");
						return 1;
					}
				}
			}
		}
	}
	
	Auto_SendPlayerAction(playerid, "configura su GPS.");
	return 1;
}
	
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	PLAYER_TEMP[playerid][pt_LAST_AREA_ID] = areaid;

	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				PLAYER_TEMP[playerid][pt_LAST_TERRITORY] = index;
				if(PI[playerid][ac_CREW])
				{
					if(TERRITORIES[index][territory_WAR])
					{
						SendFormatNotification(playerid, "Este territorio está siendo atacado por la banda ~r~'%s'~w~.",CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
						
						new r, g, b, a;
						HexToRGBA(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
						SetPlayerColorEx(playerid, RGBAToHex(r, g, b, 0));
						
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawShowForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
					}
				}
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Lumberjack_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					SendNotification(playerid, "Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
					CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				}
			}
			else if(areaid == Farmer_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_FARMER) CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
			}
			else if(areaid == Harvest_Area)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_HARVESTER)
					{
						SendNotification(playerid, "Has abandonado tu trabajo de cosechador porque te has alejado demasiado de la zona.");
						CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
					}
				}
			}
			
			if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL)
			{
				if(areaid == Jail_Areas[0] || areaid == Jail_Areas[1] || areaid == Jail_Areas[2] || areaid == Jail_Areas[3] )
				{
					SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			
			if(TERRITORIES[index][territory_VALID])
			{
				if(PI[playerid][ac_CREW])
				{
					SetPlayerNormalColor(playerid);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Solo aceptaremos la carga del conductor de este camión.");
			
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
				
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				
			PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
			PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;
	
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Solo le pagaremos al conductor que entregó la mercancía.");
			
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];
			
				if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			if(GivePlayerCash(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment, true, false)) {
				PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_TRUCK);
				
				new string[64];
				format(string, sizeof string, "~g~+%s$", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment));
				GameTextForPlayer(playerid, string, 5000, 1);
				SetVehicleToRespawnEx(vehicleid);
			}
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;
			
			new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");
			
			new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
			if(offset > 30.0) offset = 30.0;
			
			PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
			UpdatePlayerTrashRecycleSize(playerid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
			
			TogglePlayerControllableEx(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
			
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
			PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_DRIVER]) return 1;
			
			new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];
			
			new driver_work_extra_payment, passenger_work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[playerid][ac_VIP]) driver_work_extra_payment += SU_WORK_EXTRA_PAY;
				
				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][ac_VIP]) passenger_work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			GivePlayerCash(playerid, money + driver_work_extra_payment, true, false);
			SendFormatNotification(playerid, "Trabajo finalizado, has ganado ~g~%s dólares~w~.", number_format_thousand(money + driver_work_extra_payment));
			PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL] ++;
			AddPlayerJobPoints(playerid, WORK_TRASH);
			
			GivePlayerCash(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment, true, false);
			SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Trabajo finalizado, has ganado ~g~%s dólares~w~.", number_format_thousand(money + passenger_work_extra_payment));
			PLAYER_WORKS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL] ++;
			AddPlayerJobPoints(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], WORK_TRASH);
			
			CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
		}
		case CHECKPOINT_TYPE_LUMBERJACK:
		{
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
				
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 8);
				PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
				ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
				
				new work_extra_payment;
				if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] > 0 && work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL], work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT];
					
					if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_LUMBERJACK);
				
				new amount = minrand(40, 50) + work_extra_payment;
				GivePlayerCash(playerid, amount, true, false);
				
				new string[64];
				format(string, sizeof string, "~g~+%d$", amount);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case CHECKPOINT_TYPE_PIZZA_DEL:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
			PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
			PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			
			SendNotification(playerid, "Genial, vuelve a subir a la moto para continuar.");
		}
		case CHECKPOINT_TYPE_PIZZA_FINISH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED]) return 1;
			if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Solo le pagaremos al conductor que realizó el trabajo.");
		
			new work_extra_payment;
			if(work_info[WORK_PIZZA][work_info_EXTRA_PAY] > 0 && work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_PIZZA][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL], work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT];
			
				if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			
			PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL] ++;
			new money = (PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] * 200) + work_extra_payment;
			GivePlayerCash(playerid, money, true, false);
			SendFormatNotification(playerid, "Gracias por tu trabajo, has repartido %d pizzas y has ganado ~g~%s dólares~w~.", PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS], number_format_thousand(money));
			
			CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		}
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	inline OnPgpsInserted()
	{
		PLAYER_GPS[playerid][slot][player_gps_ID] = cache_insert_id();
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pgps (id_player, name, x, y, z, world, interior) VALUES(%d, '%e', %f, %f, %f, %d, %d);", ACCOUNT_INFO[playerid][ac_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]);
	MySQL_TQueryInline(srp_db, using inline OnPgpsInserted,QUERY_BUFFER );
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
		
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(i >= MAX_NU_TOYS && !ACCOUNT_INFO[playerid][ac_VIP]) break;

		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}
	
	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid, 
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	return 1;
}

EditPlayerToy(playerid)
{
	if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				
	SetPlayerAttachedObject
	(
		playerid, 
		PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);
	
	SendNotification(playerid, "Ajusta el accesorio y haz clic en el icono de guardar, si pulsas ~r~'ESCAPE' ~w~no se guardará la configuración.");
	SendNotification(playerid, "~w~Mantén presionado ~r~'ESPACIO' ~w~para mover la cámara.");
	EditAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(index != PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]) return 0;
	
    if(response)
    {
        if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
	    {
	        SendNotification(playerid, "El tamaño del accesorio es demasiado grande.");
			
			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
	    }
        if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendNotification(playerid, "La posición del objeto está demasiado lejos de ti.");
			
			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid, 
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
        }
        
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;
		
		if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
		
        SendFormatNotification(playerid, "Accesorio ~b~'%s' ~w~actualizado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
    }
    else
    {
        RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid, 
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
			);
		}
		
        SendNotification(playerid, "Has cancelado la edición.");
    }
    return 1;
}

forward OnDatabaseConnected();
forward OnDatabaseConnected_Timer();
public OnDatabaseConnected_Timer()
 {
	CallLocalFunction("OnDatabaseConnected", "");
}

ConnectDatabase()
{
	//mysql
	print("[MySQL] Conectando a la base de datos...");
	mysql_log(ERROR | WARNING);
	//mysql_log(NONE);

	//srp_db
	srp_db = mysql_connect_file("srp_db.ini");
	if(srp_db == MYSQL_INVALID_HANDLE || mysql_errno(srp_db) != 0)
	{
		printf("[MySQL] No se pudo conectar con la base de datos (srp_db) (%d)", mysql_errno(srp_db));
		SendRconCommand("exit");
	}
	else
	{
		mysql_tquery(srp_db, "UPDATE player SET connected = 0, playerid = 0;");
  		printf("[MySQL] Base de datos conectada (srp_db) (%d)", _:srp_db);
		SanAndreas();
	 	LoadServerInfo();
	 	UpdateEconomy();
	}
	return 1;
}

public OnDatabaseConnected() {
	SanAndreas();
	LoadServerInfo();
	UpdateEconomy();
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid) 
	{
		case CR_SERVER_GONE_ERROR: printf("[MySQL] [ERROR]: Se ha perdido la conexión con el servidor (%d)", _:handle);
		case ER_SYNTAX_ERROR: printf("[MySQL] [ERROR]: Syntax error, query: %s (%d)", query, _:handle);
		default: printf("[MySQL] [ERROR] errorid: %d, error: %s, callback: %s, query: %s, handle: %d", errorid, error, callback, query, _:handle);
	}
	return 1;
}

ClearPlayerChat(playerid)
{
	for(new i = 0; i != 32; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

RegisterBankAccountTransaction(from_id, to_id, transaction_type, amount)
{
	new date[24];
	getDateTime(date);
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bank_movements (date, type, from_id, to_id, amount) VALUES('%e', %d, %d, %d, %d);", date, transaction_type, from_id, to_id, amount);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}

forward BajarSegundos();
public BajarSegundos()
{
	for( new i; i < sizeof MinaInfo; i++ )
	{
		if( MinaInfo[i][w_count] == 0 )
		{
			MinaInfo[i][w_time]++;
		}
		if( MinaInfo[i][w_time] >= 30)
		{
			MinaInfo[i][w_object] = CreateDynamicObject(1207, MinaInfo[i][RocaX], MinaInfo[i][RocaY], MinaInfo[i][RocaZ], MinaInfo[i][RocaRX], MinaInfo[i][RocaRY], MinaInfo[i][RocaRZ]);
			SetMinaRoca(MinaInfo[i][w_mina],i);
			SetTexuraRoca(MinaInfo[i][w_object],MinaInfo[i][w_tipo]);
			MinaInfo[i][w_use] =
			MinaInfo[i][w_drop] = false;
			MinaInfo[i][w_count] = 100;
			MinaInfo[i][w_time] = 0;
		}
	}
	return 1;
}


stock GetNombreRoca(roca)
	{
		new namer[60];
		switch(roca)
		{
			case 1:	namer = "Azufre";
			case 2: namer = "Andesita";
			case 3:	namer = "Carbon";
			case 4:	namer = "Cobre";
			case 5:	namer = "Hierro";
			case 6:	namer = "Esmeralda";
			case 7:	namer = "Cobre";
			case 8:	namer = "Andesita";
			case 9:	namer = "Hierro";
			case 10:	namer = "Oro";
			case 11:	namer = "Cuarzo Blanco";
			case 12:	namer = "Obsidiana";
			case 13:	namer = "Carbon";
			case 14:	namer = "Cobre";
			case 15:	namer = "Esmeralda";
			case 16:	namer = "Hierro";
			case 17:	namer = "Andesita";
			case 18:	namer = "Rubi";
			case 19:	namer = "Esmeralda";
			case 20:	namer = "Oro";
			case 21:	namer = "Diamante";
			case 22:	namer = "Hierro";
		}
		return namer;
	}
stock GetColorRoca(roca)
	{
		new colorr;
		switch(roca)
		{
			case 1:	colorr = 0xCEE326FF;//Azufre
			case 2: colorr = 0x999A8FFF;//"Andesita";
			case 3:	colorr = 0x505050FF;//"Carbon";
			case 4:	colorr = 0x943D1BFF;//Cobre
			case 5:	colorr = 0xD6CFCDFF;//"Hierro";
			case 6:	colorr = 0x02A305FF;//"Esmeralda";
			case 7:	colorr = 0x943D1BFF;//"Cobre";
			case 8:	colorr = 0x999A8FFF;//"Andesita";
			case 9:	colorr = 0xD6CFCDFF;//"Hierro";
			case 10:	colorr = 0xFFFC57FF;//"Oro";
			case 11:	colorr = 0xF6F5E6FF;//"Cuarzo";
			case 12:	colorr = 0x741A78FF;//"Obsidiana";
			case 13:	colorr = 0x505050FF;//"Carbon";
			case 14:	colorr = 0x943D1BFF;//"Cobre";
			case 15:	colorr = 0x02A305FF;//"Esmeralda";
			case 16:	colorr = 0xD6CFCDFF;//"Hierro";
			case 17:	colorr = 0x999A8FFF;//"Andesita";
			case 18:	colorr = 0xFF0505FF;//"Rubi";
			case 19:	colorr = 0x02A305FF;//"Esmeralda";
			case 20:	colorr = 0xFFFC57FF;//"Oro";
			case 21:	colorr = 0x05B0FFFF;//"Diamante";
			case 22:	colorr = 0xD6CFCDFF;//"Hierro";
		}
		return colorr;
	}
stock SetTexuraRoca(objeto,tipo)
	{
		switch(tipo)
		{
			//Mina A
			case 1: SetDynamicObjectMaterial(objeto, 0, 18901, "matclothes", "bandanagold", 0x00000000);//Azufre
			case 2: SetDynamicObjectMaterial(objeto, 0, 19071, "wssections", "rockbrown1", 0x00000000);//Andesita
			case 3: SetDynamicObjectMaterial(objeto, 0, 17555, "eastbeach3c_lae2", "decobuild2d_LAn", 0x00000000);//Carbon
			case 4: SetDynamicObjectMaterial(objeto, 0, 11712, "cross1", "cross1", 0x00000000);//Cobre
			case 5: SetDynamicObjectMaterial(objeto, 0, 18901, "matclothes", "metalalumox1", 0x00000000);//Hierro
			//Mina B
			case 6: SetDynamicObjectMaterial(objeto, 0, 2098, "cj_int", "CJ_GREEN_WOOD", 0x00000000);//Esmeralda
			case 7: SetDynamicObjectMaterial(objeto, 0, 11712, "cross1", "cross1", 0x00000000);//Cobre
			case 8: SetDynamicObjectMaterial(objeto, 0, 19071, "wssections", "rockbrown1", 0x00000000);//Andesita
			case 9: SetDynamicObjectMaterial(objeto, 0, 18901, "matclothes", "metalalumox1", 0x00000000);//Hierro
			case 10: SetDynamicObjectMaterial(objeto,0, 19063, "xmasorbs", "foil5-128x128", 0x00000000);//Oro
			//Mina C
			case 11: SetDynamicObjectMaterial(objeto, 0, 3922, "bistro", "Marble2", 0x00000000);//Cuarzo
			case 12: SetDynamicObjectMaterial(objeto, 0, 18996, "mattextures", "bluefoil", 0x00000000);//Obsidiana
			case 13: SetDynamicObjectMaterial(objeto, 0, 17555, "eastbeach3c_lae2", "decobuild2d_LAn", 0x00000000);//Carbon
			case 14: SetDynamicObjectMaterial(objeto, 0, 11712, "cross1", "cross1", 0x00000000);//Cobre
			case 15: SetDynamicObjectMaterial(objeto, 0, 2098, "cj_int", "CJ_GREEN_WOOD", 0x00000000);//Esmeralda
			case 16: SetDynamicObjectMaterial(objeto, 0, 18901, "matclothes", "metalalumox1", 0x00000000);//Hierro
			case 17: SetDynamicObjectMaterial(objeto, 0, 19071, "wssections", "rockbrown1", 0x00000000);//Andresita
			//Mina D
			case 18: SetDynamicObjectMaterial(objeto, 0, 18835, "mickytextures", "red032", 0x00000000);//Rubi
			case 19: SetDynamicObjectMaterial(objeto, 0, 2098, "cj_int", "CJ_GREEN_WOOD", 0x00000000);//Esmeralda
			case 20: SetDynamicObjectMaterial(objeto, 0, 19063, "xmasorbs", "foil5-128x128", 0x00000000);//Oro
			case 21: SetDynamicObjectMaterial(objeto, 0, 3474, "freightcrane", "bluecab4_256", 0x00000000);//Diamante
			case 22: SetDynamicObjectMaterial(objeto, 0, 18901, "matclothes", "metalalumox1", 0x00000000);//Hierro
		}
		return 1;
	}
stock GetPrecioRoca(roca)
	{
		new precio;
		switch(roca)
		{
			//Mina A
			case 1:	precio = 90;
			case 2: precio = 75;
			case 3:	precio = 80;
			case 4:	precio = 95;
			case 5:	precio = 110;
			//Mina B
			case 6:	precio = 230;
			case 7:	precio = 175;
			case 8:	precio = 180;
			case 9:	precio = 185;
			case 10:	precio = 195;
			//Mina C
			case 11:	precio = 250;//Cuarzo
			case 12:	precio = 375;//Obsidiana
			case 13:	precio = 235;//Carbon
			case 14:	precio = 240;//Cobre
			case 15:	precio = 320;//Esmeralda
			case 16:	precio = 255;//Hierro
			case 17:	precio = 195;//Andresita
			//Mina D
			case 18:	precio = 430;//Rubi
			case 19:	precio = 350;//Esmeralda
			case 20:	precio = 360;//Oro
			case 21:	precio = 490;//Diamante
			case 22:	precio = 370;//Hierro
		}
		return precio;
	}
stock GetTiempoRoca(roca)
	{
		new tiempo;
		switch(roca)
		{
			case 1:	tiempo = 2;//Azufre
			case 2: tiempo = 3;//Andesita
			case 3:	tiempo = 3;//Carbon
			case 4:	tiempo = 4;//Cobre
			case 5:	tiempo = 3;//Hierro
			//Mina B
			case 6:	tiempo = 3;//Esmeralda
			case 7:	tiempo = 6;//Cobre
			case 8:	tiempo = 4;//Andesita
			case 9:	tiempo = 3;//Hierro
			case 10:	tiempo = 2;//Oro
			//Mina C
			case 11:	tiempo = 2;//Cuarzo
			case 12:	tiempo = 1;//Obsidiana
			case 13:	tiempo = 3;//Carbon
			case 14:	tiempo = 4;//Cobre
			case 15:	tiempo = 2;//Esmeralda
			case 16:	tiempo = 7;//Hierro
			case 17:	tiempo = 4;//Andesita
			//Mina D
			case 18:	tiempo = 3;//Rubi
			case 19:	tiempo = 2;//Esmeralda
			case 20:	tiempo = 3;//Oro
			case 21:	tiempo = 2;//Diamante
			case 22:	tiempo = 3;//Hierro
		}
		return tiempo;
	}

stock randomize( min, max ) // Rango aleatorio
{
	max++;
	new
	a = random( max - min ) + min;
	return a;
}	
	
stock SetMinaRoca(mina,i)
	{
		new roca;
		switch(mina)
		{
			case 1:
			{
				roca = randomize(1, 5);
			}
			case 2:
			{
				roca = randomize(6, 10);
			}
			case 3:
			{
				roca = randomize(11, 17);
			}
			case 4:
			{
				roca = randomize(18, 22);
			}
		}
		MinaInfo[i][w_tipo] = roca;
		return 1;
	}
stock EnProcesadora(playerid)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 597.3271,-41.2564,791.6342))		return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 591.7543,-41.0298,791.5934)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 568.9272,-41.1961,791.6544)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 563.0521,-41.0409,791.7198)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 511.8504,-37.4351,791.1703)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 506.3676,-35.9534,791.1245)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 456.9895,-35.9433,790.8328)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 451.4697,-36.5215,790.8202)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 380.8173,-38.6107,790.6462)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 374.9194,-36.8096,790.9003)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 270.3931,-38.0284,790.7828)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 236.9331,-37.8291,790.7186)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 263.7611,-37.5496,790.5789)) return 1;
		return 0;
	}


forward TimerPicando(playerid, wood);
public TimerPicando(playerid, wood)
{	
	if(ProcesoPicando[playerid] < 20) SetPlayerAttachedObject(playerid,0,19631,6,0.056999,0.015000,0.132999,-87.599998,95.299995,-1.900005,1.000000,1.000000,1.000000);
	if(ProcesoPicando[playerid] < 100)
	{
		ProcesoPicando[playerid] += GetTiempoRoca(MinaInfo[wood][w_tipo]);
		if(ProcesoPicando[playerid] > 99) ProcesoPicando[playerid] = 100;
		new PicandoT[126];
		format(PicandoT, sizeof PicandoT, "Picando %s...~n~~r~%d%",GetNombreRoca(MinaInfo[wood][w_tipo]),ProcesoPicando[playerid]);
		ShowPlayerMessage(playerid, PicandoT,3000);
		TimerMinando[playerid] = SetTimerEx( "TimerPicando", 700, false, "ddd", playerid, wood);
		ApplyAnimation(playerid, "BASEBALL","Bat_4", 4.1, 1, 0, 0, 1, 1000);
		return 1;
	}
	TogglePlayerControllableEx( playerid, true );
	KillTimer(TimerSonido[playerid]);
	new colorroca,colorfinal;
	colorroca = GetColorRoca(MinaInfo[wood][w_tipo]);
	colorfinal = RGBAToARGB(colorroca);
	RemovePlayerAttachedObject(playerid, 0);
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
	ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
	SetPlayerAttachedObject(playerid,5,905,5,0.139000,0.085000,0.136000,75.700004,0.000000,0.000000,0.555000,0.409999,0.640999,colorfinal);
	ProcesoPicando[playerid] = 0;
	MinaInfo[wood][w_count] = 0;
	MinaInfo[wood][w_drop] = true;
	MinaInfo[wood][w_use] = false;
	ShowPlayerMessage(playerid, "Presiona ~y~ALT~w~ en la ~r~procesadora~w~ para entregar el mineral.",8000);	
	TieneRoca[playerid]	= MinaInfo[wood][w_tipo];
	SetPVarInt( playerid, "Job:MineroCP",1);
	if( MinaInfo[wood][w_count] <= 0 && IsValidDynamicObject(MinaInfo[wood][w_object])) DestroyDynamicObject( MinaInfo[wood][w_object] );
	return 1;
}


forward TimerSound(playerid);
public TimerSound(playerid)
	{
		PlayerPlaySound(playerid,1135,0.0,0.0,0.0);
		return 1;
	}

stock	ShowPlayerMessage(playerid, message[],tiempo = 5000)
	{
		KillTimer(TimerMensaje[playerid]);
		for(new len = strlen(message), pos; pos < len; pos ++)
		{
			switch(message[pos])
			{
				case 'à': message[pos] = 151;
				case 'á': message[pos] = 152;
				case 'â': message[pos] = 153;
				case 'ä': message[pos] = 154;
				case 'À': message[pos] = 128;
				case 'Á': message[pos] = 129;
				case 'Â': message[pos] = 130;
				case 'Ä': message[pos] = 131;
				case 'è': message[pos] = 157;
				case 'é': message[pos] = 158;
				case 'ê': message[pos] = 159;
				case 'ë': message[pos] = 160;
				case 'È': message[pos] = 134;
				case 'É': message[pos] = 135;
				case 'Ê': message[pos] = 136;
				case 'Ë': message[pos] = 137;
				case 'ì': message[pos] = 161;
				case 'í': message[pos] = 162;
				case 'î': message[pos] = 163;
				case 'ï': message[pos] = 164;
				case 'Ì': message[pos] = 138;
				case 'Í': message[pos] = 139;
				case 'Î': message[pos] = 140;
				case 'Ï': message[pos] = 141;
				case 'ò': message[pos] = 165;
				case 'ó': message[pos] = 166;
				case 'ô': message[pos] = 167;
				case 'ö': message[pos] = 168;
				case 'Ò': message[pos] = 142;
				case 'Ó': message[pos] = 143;
				case 'Ô': message[pos] = 144;
				case 'Ö': message[pos] = 145;
				case 'ù': message[pos] = 169;
				case 'ú': message[pos] = 170;
				case 'û': message[pos] = 171;
				case 'ü': message[pos] = 172;
				case 'Ù': message[pos] = 146;
				case 'Ú': message[pos] = 147;
				case 'Û': message[pos] = 148;
				case 'Ü': message[pos] = 149;
				case 'ñ': message[pos] = 174;
				case 'Ñ': message[pos] = 173;
				case '¡': message[pos] = 64;
				case '¿': message[pos] = 175;
				case '`': message[pos] = 177;
				case '&': message[pos] = 38;
				default:  message[pos] = message[pos];
			}
		}
		PlayerTextDrawSetString(playerid, MensajeTD[playerid], message);
		PlayerTextDrawShow(playerid, MensajeTD[playerid]);
		TimerMensaje[playerid] = SetTimerEx("HidePlayerMessageP", tiempo, false, "i", playerid);
		//if(sound) PlayerPlaySoundEx(playerid, sound, 0.0, 0.0, 0.0);
		return 1;
	}
	callbackp:HidePlayerMessageP(playerid)
	{
		KillTimer(TimerMensaje[playerid]);
		PlayerTextDrawSetString(playerid, MensajeTD[playerid], "_");
		PlayerTextDrawHide(playerid, MensajeTD[playerid]);
		return 1;
	}	

RegisterNewPlayer(playerid)
{
	if(PLAYER_TEMP[playerid][pt_USER_EXIST]) return 0;
	
	inline OnPlayerInserted()
	{
		ACCOUNT_INFO[playerid][ac_ID] = cache_insert_id();
		if(ACCOUNT_INFO[playerid][ac_ID])
		{
			PLAYER_TEMP[playerid][pt_USER_EXIST] = true;
			PI[playerid][ac_PHONE_NUMBER] = getPhoneNumber(ACCOUNT_INFO[playerid][ac_ID]);
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET phone_number = %d WHERE id = %d;", PI[playerid][ac_PHONE_NUMBER], ACCOUNT_INFO[playerid][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
			CreateDefaultContacts(playerid);
			CallLocalFunction("OnPlayerRegister", "i", playerid);
		}
		else Kick(playerid);
		return 1;
	}

	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
		"\
			INSERT INTO player\
			(\
				name,\
				ip,\
				email,\
				salt,\
				pass,\
				reg_date,\
				last_connection_timestamp,\
				level,\
				rep,\
				connected,\
				playerid,\
				time_for_rep,\
				skin,\
				cash,\
				pos_x,\
				pos_y,\
				pos_z,\
				angle,\
				state,\
				fight_style,\
				health,\
				hungry,\
				thirst,\
				config_sounds,\
				config_audio,\
				config_time,\
				config_hud,\
				config_admin,\
				config_secure_login,\
				phone_visible_number,\
				doubt_channel\
			) \
			VALUES\
			(\
				'%e', '%e', '%e', '%e', '%e', '%e', %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %d, %d, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d, %d\
			);\
		",
			ACCOUNT_INFO[playerid][ac_NAME],
			ACCOUNT_INFO[playerid][ac_IP],
			ACCOUNT_INFO[playerid][ac_EMAIL],
			ACCOUNT_INFO[playerid][ac_SALT],
			ACCOUNT_INFO[playerid][ac_PASS],
			ACCOUNT_INFO[playerid][ac_REG_DATE],
			ACCOUNT_INFO[playerid][ac_LAST_CONNECTION],
			ACCOUNT_INFO[playerid][ac_LAST_CONNECTION_TIMESTAMP],
			ACCOUNT_INFO[playerid][ac_LEVEL],
			ACCOUNT_INFO[playerid][ac_REP],
			PI[playerid][ac_CONNECTED],
			PI[playerid][ac_PLAYERID],
			ACCOUNT_INFO[playerid][ac_TIME_FOR_REP],
			PI[playerid][ac_SKIN],
			PI[playerid][ac_CASH],
			PI[playerid][ac_POS_X],
			PI[playerid][ac_POS_Y],
			PI[playerid][ac_POS_Z],
			PI[playerid][ac_ANGLE],
			PI[playerid][ac_STATE],
			PI[playerid][ac_FIGHT_STYLE],
			PI[playerid][ac_HEALTH],
			PI[playerid][ac_HUNGRY],
			PI[playerid][ac_THIRST],
			PI[playerid][ac_CONFIG_SOUNDS],
			PI[playerid][ac_CONFIG_AUDIO],
			PI[playerid][ac_CONFIG_TIME],
			PI[playerid][ac_CONFIG_HUD],
			PI[playerid][ac_CONFIG_ADMIN],
			PI[playerid][ac_CONFIG_SECURE_LOGIN],
			PI[playerid][ac_PHONE_VISIBLE_NUMBER],
			ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]
	);
	MySQL_TQueryInline(srp_db, using inline OnPlayerInserted, QUERY_BUFFER );
	return 1;
}

CreateDefaultContacts(playerid)
{
	new slot;
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policia");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Banco");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 6740;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Aseguradora");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 38350;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Taxi");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 450;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	return 1;
}


/*eSendClientMessageEx(playerid, color, form[], {Float, _}: ...)
{
    #pragma unused form

    static
        tmp[145]
    ;
    new
        t1 = playerid,
        t2 = color
    ;
    const
        n4 = -4,
        n16 = -16,
        size = sizeof tmp
    ;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16

    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}*/
SendClientMessageEx(playerid, colour, const message[], {Float, _}:...)
{
	new out[145];
	format(out, sizeof(out), message, ___(3));
	return SendClientMessage(playerid, colour, out);
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

stock TimeConvertExAsText(sec, bool:lastMinute = false)
{
	new string[128] = "", auxString[32];
	
	if(lastMinute && sec < 60) {
		string = "menos de 1 minuto";
		return string;
	}

	if(sec <= 0) {
		string = "nada";
		return string;
	}

	new days, hours, minutes, seconds;
	TimeConvertEx(sec, days, hours, minutes, seconds);

	if(days) {
		format(auxString, sizeof auxString, "%d días", days);
		strcat(string, auxString);
	}

	if(hours) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d horas", hours);
		strcat(string, auxString);
	}

	if(minutes) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d minutos", minutes);
		strcat(string, auxString);
	}

	if(seconds) {
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d segundos", seconds);
		strcat(string, auxString);
	}
   	return string;
}

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5, div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;
	
	if(div)
	{
		format(line1_str, div + 1, "%s", string);
		if(strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);
	
	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col1, line1_str);
			if(div && line2_used) SendClientMessage(i, col1, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col2, line1_str);
			if(div && line2_used) SendClientMessage(i, col2, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col3, line1_str);			
			if(div && line2_used) SendClientMessage(i, col3, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col4, line1_str);	
			if(div && line2_used) SendClientMessage(i, col4, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col5, line1_str);
			if(div && line2_used) SendClientMessage(i, col5, line2_str);
		}
	}
	return 1;
}

NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, const string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 					
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;
		
		if(IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}

IsValidRPName(const string[])
{
	new Regex:reg_exp = Regex_New("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*");
	new result = Regex_Check(string, reg_exp);
	Regex_Delete(reg_exp);
	return result;
}

IsValidEmail(const string[])
{
	new Regex:reg_exp = Regex_New("[a-zA-Z0-9_\\.]+@([a-zA-Z0-9\\-]+\\.)+[a-zA-Z]{2,4}"); 
	new result = Regex_Check(string, reg_exp); 
	Regex_Delete(reg_exp); 
	return result; 
}

/*
IsValidName(name[])
{
	for(new c = 0; c < strlen(name); c++)
	{
	    switch(name[c])
	    {
	        case 'A' .. 'Z', 'a' .. 'z', '_': continue;
	        default: return false;
	    }
	}
	return true;
}
*/
KickEx(playerid, time = 0)
{
	PLAYER_TEMP[playerid][pt_KICKED] = true;
	if(!time) Kick(playerid);
	else
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][0]);
		PLAYER_TEMP[playerid][pt_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	return Kick(playerid);
}

SetRolePlayNames(playerid)
{
	if(isnull(PLAYER_TEMP[playerid][pt_NAME])) return 0;
	
	new name[24], bool:underscore;
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	format(PLAYER_TEMP[playerid][pt_RP_NAME], 24, "%s", name);
	for(new i = 0; i < 24; i++) 
	{
		if(name[i] == '_')
		{
			PLAYER_TEMP[playerid][pt_RP_NAME][i] = ' ';
			if(!underscore)
			{
				strmid(PLAYER_TEMP[playerid][pt_FIRST_NAME], name, 0, i);
				strmid(PLAYER_TEMP[playerid][pt_SUB_NAME], name, i + 1, 24);
				underscore = true;
			}
		}
	}
	return 1;
}

RP_GetPlayerName(playerid)
{
	new name[24];
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
    for(new i = 0; i < 24; i++) {
		if (name[i] == '_') name[i] = ' ';
	}
 
	return name;
}

LoadPlayerPhoneBook(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPhoneBookLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], number;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "number", number);
				
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID] = true;
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_ID] = id;
				format(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], 24, "%s", name);
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER] = number;
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pbook WHERE id_player = %d LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PHONE_CONTACTS);
	MySQL_TQueryInline(srp_db,  using inline OnPhoneBookLoad, QUERY_BUFFER);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	inline OnContactInserted()
	{
		PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = cache_insert_id();
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pbook (id_player, name, number) VALUES (%d, '%e', %d);", ACCOUNT_INFO[playerid][ac_ID], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
	MySQL_TQueryInline(srp_db,  using inline OnContactInserted, QUERY_BUFFER);
	return 1;
}

RegisterPhoneMessage(from_id, to_id, message[], offline = 0)
{
	new date[24], from_id_insert[24] = "NULL", to_id_insert[24] = "NULL";
	getDateTime(date);
	if(from_id) format(from_id_insert, 24, "%d", from_id);
	if(to_id) format(to_id_insert, 24, "%d", to_id);

	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pmessages (from_id, to_id, message, date, offline) VALUES (%s, %s, '%e', '%e', %d);", from_id_insert, to_id_insert, message, date, offline);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}


forward NoCallResponse(playerid);
public NoCallResponse(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;
	
	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;
	
	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
			
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
			SendClientMessage(to_playerid, -1, "{"#SILVER_COLOR"}No respondieron el teléfono...");
			KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);
			
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
			SendClientMessage(to_playerid, -1, "{"#PRIMARY_COLOR"}Llamada finalizada.");
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
			
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists) format(f_string, sizeof f_string, "%d", number);
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPocketObject(playerid, slot)
{
	inline OnPfoodInserted()
	{
		PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = cache_insert_id();
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pfoods (id_player, name, hungry, thirst, drunk) VALUES (%d, '%e', %f, %f, %d);", ACCOUNT_INFO[playerid][ac_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
	MySQL_TQueryInline(srp_db,  using inline OnPfoodInserted, QUERY_BUFFER);
	return 1;
}

LoadPlayerPocketData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPfoodsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_POCKET[playerid][i][player_pocket_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_POCKET[playerid][i][player_pocket_object_ID]);
				cache_get_value_name(i, "name", PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
				cache_get_value_name_float(i, "hungry", PLAYER_POCKET[playerid][i][player_pocket_object_HUNGRY]);
				cache_get_value_name_float(i, "thirst", PLAYER_POCKET[playerid][i][player_pocket_object_THIRST]);
				cache_get_value_name_int(i, "drunk", PLAYER_POCKET[playerid][i][player_pocket_object_DRUNK]);
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pfoods WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db,  using inline OnPfoodsLoad, QUERY_BUFFER);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pfoods SET id_player = %d WHERE id = %d;", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];
	
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pfoods WHERE id = %d;", PLAYER_POCKET[playerid][slot][player_pocket_object_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPgpsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_GPS[playerid][i][player_gps_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_GPS[playerid][i][player_gps_ID]);
				cache_get_value_name(i, "name", PLAYER_GPS[playerid][i][player_gps_NAME]);
				cache_get_value_name_float(i, "x", PLAYER_GPS[playerid][i][player_gps_X]);
				cache_get_value_name_float(i, "y", PLAYER_GPS[playerid][i][player_gps_Y]);
				cache_get_value_name_float(i, "z", PLAYER_GPS[playerid][i][player_gps_Z]);
				cache_get_value_name_int(i, "world", PLAYER_GPS[playerid][i][player_gps_WORLD]);
				cache_get_value_name_int(i, "interior", PLAYER_GPS[playerid][i][player_gps_INTERIOR]);
				
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pgps WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db,  using inline OnPgpsLoad, QUERY_BUFFER);
	return 1;
}

LoadPlayerToys(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPlayerToysLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_TOYS[playerid][i][player_toy_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_TOYS[playerid][i][player_toy_ID]);
				cache_get_value_name(i, "name", PLAYER_TOYS[playerid][i][player_toy_NAME]);
				cache_get_value_name_int(i, "attached", PLAYER_TOYS[playerid][i][player_toy_ATTACHED]);
				cache_get_value_name_int(i, "modelid", PLAYER_TOYS[playerid][i][player_toy_MODELID]);
				cache_get_value_name_int(i, "bone", PLAYER_TOYS[playerid][i][player_toy_BONE]);
				cache_get_value_name_float(i, "offset_x", PLAYER_TOYS[playerid][i][player_toy_OFFSET_X]);
				cache_get_value_name_float(i, "offset_y", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y]);
				cache_get_value_name_float(i, "offset_z", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z]);
				cache_get_value_name_float(i, "rot_x", PLAYER_TOYS[playerid][i][player_toy_ROT_X]);
				cache_get_value_name_float(i, "rot_y", PLAYER_TOYS[playerid][i][player_toy_ROT_Y]);
				cache_get_value_name_float(i, "rot_z", PLAYER_TOYS[playerid][i][player_toy_ROT_Z]);
				cache_get_value_name_float(i, "scale_x", PLAYER_TOYS[playerid][i][player_toy_SCALE_X]);
				cache_get_value_name_float(i, "scale_y", PLAYER_TOYS[playerid][i][player_toy_SCALE_Y]);
				cache_get_value_name_float(i, "scale_z", PLAYER_TOYS[playerid][i][player_toy_SCALE_Z]);
				cache_get_value_name_int(i, "color1", PLAYER_TOYS[playerid][i][player_toy_COLOR_1]);
				cache_get_value_name_int(i, "color2", PLAYER_TOYS[playerid][i][player_toy_COLOR_2]);
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM ptoys WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db,  using inline OnPlayerToysLoad, QUERY_BUFFER);
	return 1;
}

SavePlayerToys(playerid)
{
	if(!ACCOUNT_INFO[playerid][ac_ID]) return 0;
	
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;
		mysql_format
		(
			srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
			"\
				UPDATE ptoys SET \
					name = '%e',\
					attached = %d,\
					modelid = %d,\
					bone = %d,\
					offset_x = %f,\
					offset_y = %f,\
					offset_z = %f,\
					rot_x = %f,\
					rot_y = %f,\
					rot_z = %f,\
					scale_x = %f,\
					scale_y = %f,\
					scale_z = %f,\
					color1 = %d,\
					color2 = %d \
				WHERE id = %d;\
			",
			PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED], PLAYER_TOYS[playerid][i][player_toy_MODELID],
			PLAYER_TOYS[playerid][i][player_toy_BONE], PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][i][player_toy_ROT_Z], PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][i][player_toy_SCALE_Z], PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],
			PLAYER_TOYS[playerid][i][player_toy_ID]
		);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
	return random(max - min) + min;
}

stock ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

CreatePlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++) PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;

 	MensajeTD[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "_");
	PlayerTextDrawLetterSize(playerid, MensajeTD[playerid], 0.298333, 1.976000);
	PlayerTextDrawAlignment(playerid, MensajeTD[playerid], 2);
	PlayerTextDrawColor(playerid,MensajeTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, MensajeTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, MensajeTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, MensajeTD[playerid], 255);
	PlayerTextDrawFont(playerid, MensajeTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MensajeTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MensajeTD[playerid], 1);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.000000, 100.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 368.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	
	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 27.410259, 5.897183);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 145);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.361666, 1.400889);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 90);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "COMPRAR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -201); // Money = 9306312   ,  -1459617611  No money
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "SIGUIENTE");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "ANTERIOR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Precio:_0$~n~Ropa:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0.171666, 0.782815);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], -86);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	
	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0] = CreatePlayerTextDraw(playerid, 320.000000, 298.000000, "l");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 33.579376, 12.750882);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 172);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1] = CreatePlayerTextDraw(playerid, 320.000000, 316.000000, "Ropa_del_personaje");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], -81);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2] = CreatePlayerTextDraw(playerid, 290.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -256); // seleccionado -94);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3] = CreatePlayerTextDraw(playerid, 290.000000, 342.000000, "hombre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4] = CreatePlayerTextDraw(playerid, 350.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -256);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5] = CreatePlayerTextDraw(playerid, 350.000000, 342.000000, "mujer");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], true);
	
	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "continuar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7] = CreatePlayerTextDraw(playerid, 362.000000, 365.000000, ">>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 13.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8] = CreatePlayerTextDraw(playerid, 278.000000, 365.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0.221999, 1.147852);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 13.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0.158000, 0.770370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], -171);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);

	
	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 159.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 15.033352);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1869574143);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 156.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2] = CreatePlayerTextDraw(playerid, 215.000000, 184.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 80.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -19201);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 18864);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3] = CreatePlayerTextDraw(playerid, 217.000000, 186.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 76.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -926365441);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[0][shop_toy_model]);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4] = CreatePlayerTextDraw(playerid, 311.000000, 207.000000, "Modelo:__~n~Precio:__$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0.219000, 1.081481);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5] = CreatePlayerTextDraw(playerid, 363.000000, 233.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775); // sin dinero color = -900267777
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6] = CreatePlayerTextDraw(playerid, 404.000000, 233.000000, ">>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7] = CreatePlayerTextDraw(playerid, 322.000000, 233.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8] = CreatePlayerTextDraw(playerid, 255.000000, 271.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0.163666, 0.832593);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], -66);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9] = CreatePlayerTextDraw(playerid, 320.000000, 284.000000, "Accesorios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0] = CreatePlayerTextDraw(playerid, 553.000000, 176.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 8.766664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1] = CreatePlayerTextDraw(playerid, 505.000000, 181.000000, "Interior:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0.300000, 1.438221);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2] = CreatePlayerTextDraw(playerid, 505.000000, 206.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 546.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3] = CreatePlayerTextDraw(playerid, 555.000000, 206.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 600.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4] = CreatePlayerTextDraw(playerid, 505.000000, 230.000000, "Crear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 533.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5] = CreatePlayerTextDraw(playerid, 542.000000, 230.000000, "Cancelar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 583.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], true);
	
	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0] = CreatePlayerTextDraw(playerid, 320.000000, 317.000000, "Cargando_camión...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0.255666, 1.176888);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1] = CreatePlayerTextDraw(playerid, 250.000000, 332.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0.000000, 3.766666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 390.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Abajo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 387.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -594542436);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 250.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -594542357);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0] = CreatePlayerTextDraw(playerid, 320.000000, 315.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0.298999, 1.483852);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], -161);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 130.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2021161125);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1988896255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);

	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0] = CreatePlayerTextDraw(playerid, 604.000000, 126.000000, "]]]]]]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0.491999, 1.960886);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 95);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1] = CreatePlayerTextDraw(playerid, 604.000000, 126.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0.491999, 1.960886);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], -336860171);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0] = CreatePlayerTextDraw(playerid, 275.000000, 325.000000, "+_Publicar_anuncio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1] = CreatePlayerTextDraw(playerid, 365.000000, 325.000000, "-_Mis_anuncios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2] = CreatePlayerTextDraw(playerid, 320.000000, 307.000000, "Cerrar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3] = CreatePlayerTextDraw(playerid, 380.000000, 307.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4] = CreatePlayerTextDraw(playerid, 260.000000, 307.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], true);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE] = CreatePlayerTextDraw(playerid, 320.000000, 134.000000, "-_0/0_-");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0.169000, 0.766222);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	
	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER] = CreatePlayerTextDraw(playerid, 320.000000, 152.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0.214666, 0.936296);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0.259333, 1.181036);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], -36);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	
	PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Objeto:_0/0~n~Precio:_0$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_MESSAGE] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0.298333, 1.376000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	
	
	PlayerTextdraws[playerid][ptextdraw_HUD][0] = CreatePlayerTextDraw(playerid, 0.000000, 446.000000, "barraReputacion");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.000000, 0.500000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0xfce679FF);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][1] = CreatePlayerTextDraw(playerid, 500.699981, 104.000000, "barraHambre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0.000000, 0.238333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 500.699981, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1923088639);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][2] = CreatePlayerTextDraw(playerid, 557.699981, 104.000000, "barraSed");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0.000000, 0.238333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 557.699981, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 12124080);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][3] = CreatePlayerTextDraw(playerid, 320.000000, 433.000000, "Siguiente_nivel:");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0.169666, 0.832592);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	return 1;
}

DestroyPlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++)
	{
		if(PlayerTextdraws[playerid][Player_Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][Player_Textdraws_Enum:i]);
		PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
		PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	
		if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
		{
			SendNotification(playerid, "Antes de continuar debes leer el tutorial de conceptos.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}
		
		if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
		{
			SendNotification(playerid, "Antes de continuar debes elegir tu sexo y tu ropa.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}	

		if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) // Tiene abierto el menú de ropa
		{
			ClosePlayerClothingMenu(playerid);
			ExitPlayerWardrobe(playerid);
		}
		
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
		
		if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
		{
			CancelPlayerTuningShop(playerid);
			ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_SHOP] && (PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if(clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if(!PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]) return SendNotification(playerid, "Este anuncio ya no está disponible.");
				
				inline OnShopChecked()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID] = PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i];
							PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_AD;
							UpdatePlayerShop(playerid);
						}
						else SendNotification(playerid, "Este anuncio ya no está disponible.");
					}
					else SendNotification(playerid, "Este anuncio ya no está disponible.");
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]);
				MySQL_TQueryInline(srp_db,  using inline OnShopChecked, QUERY_BUFFER);
				break;
			}
		}
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
	{
		if(clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
			if(!ACCOUNT_INFO[playerid][ac_VIP] && slot >= MAX_NU_VOBJECTS)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU_VOBJECTS);
				return 1;
			}
			if(slot == -1)
			{
				SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
				return 1;
			}
			
			if(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] > PI[playerid][ac_CASH])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] - PI[playerid][ac_CASH]));
				return 1;
			}
			
			if(GivePlayerCash(playerid, -Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE], true, true)) {
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID];
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_NAME]);
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
				
				RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
				CancelPlayerTuningShop(playerid);
				
				SendNotification(playerid, "Ajusta el objeto y haz clic en el icono de guardar, si pulsas ~r~'ESCAPE' ~w~no se guardará la configuración.");
				SendNotification(playerid, "Mantén presionado ~r~'W' ~w~para mover la cámara.");
				EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			}
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == (sizeof(Tuning_Shop_Objects) - 1)) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;			
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == 0) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = sizeof(Tuning_Shop_Objects) - 1;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		return 1;
	}
	
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;			
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		return 1;
	}
	
	
	if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][2]) // Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1 >= sizeof(Server_Rules) )
			{
				PLAYER_TEMP[playerid][pt_READING_GUIDE] = false;
				PLAYER_TEMP[playerid][pt_GUIDE_STEP] = 0;
				DestroyPlayerRulesTextDraw(playerid);
				
				for(new i = 0; i < LOAD_SCREEN_TEXTDRAWS_SIZE; i ++) {
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);
				}

				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);
				
				PI[playerid][ac_GENDER] = -1;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = true;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;
			
				new td_str[64];
				format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
				
				SendNotification(playerid, "Elige tu personaje, presionar 'continuar' para finalizar.");
				SelectTextDrawEx(playerid, 0xe8d08fFF);
				return 1;
			}
			
			PLAYER_TEMP[playerid][pt_GUIDE_STEP] ++;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][3]) // Anterior
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] <= 0) return 1;
			
			PLAYER_TEMP[playerid][pt_GUIDE_STEP] --;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]) // Hombre
		{
			PI[playerid][ac_GENDER] = 0;
			
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][ac_GENDER]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]) // Mujer
		{
			PI[playerid][ac_GENDER] = 1;
			
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][ac_GENDER]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]) // Continuar
		{
			if(PI[playerid][ac_GENDER] == -1)
			{
				SendNotification(playerid, "Antes de continuar debes optar por un género para tu personaje.");
				SelectTextDrawEx(playerid, 0xe8d08fFF);
				return 1;
			}
			
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
			PI[playerid][ac_SKIN] = Intro_Skins[PI[playerid][ac_GENDER]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]];
			
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);
			
			PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = false;
			PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;

			CancelSelectTextDrawEx(playerid);
			DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;			

			// Spawn 
			SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
			PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
			ResetPlayerWeapons(playerid);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PI[playerid][ac_CASH]);
			SetPlayerFightingStyle(playerid, PI[playerid][ac_FIGHT_STYLE]);
			SetPlayerHealthEx(playerid, PI[playerid][ac_HEALTH]);
			SetPlayerArmourEx(playerid, PI[playerid][ac_ARMOUR]);
			SetPlayerVirtualWorld(playerid, 0);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], 0, 0, 0, 0, 0, 0);
			SetPlayerInterior(playerid, PI[playerid][ac_INTERIOR]);
			
			//
			RegisterNewPlayer(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]) // Siguiente ropa
		{
			if(PI[playerid][ac_GENDER] == -1) return SendNotification(playerid, "Debes optar por un género antes de cambiar de ropa.");
			
			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == (sizeof(Intro_Skins[]) - 1)) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;			
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] ++;
			
			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][ac_GENDER]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]) // Anterior ropa
		{
			if(PI[playerid][ac_GENDER] == -1) return SendNotification(playerid, "Debes optar por un género antes de cambiar de ropa.");
			
			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = sizeof(Intro_Skins[]) - 1;
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] --;
			
			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);
			
			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][ac_GENDER]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 0;
	
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]) // Comprar
		{
			new clothe_info[3];
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE: clothe_info = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
			}
			
			if(PI[playerid][ac_CASH] >= clothe_info[2])
			{
				if(GivePlayerCash(playerid, -clothe_info[2], true, true)) {
					PI[playerid][ac_SKIN] = clothe_info[0];
					
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Gracias por comprar ropa en ~g~%s~w~, vuelva pronto.", Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);
					
					ClosePlayerClothingMenu(playerid);
					ExitPlayerWardrobe(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar esta ropa.", number_format_thousand(clothe_info[2] - PI[playerid][ac_CASH]));
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][ac_GENDER])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
			}
			
			UpdateClothingShop(playerid);
			return 1;
		}
	}
	
	if(PLAYER_TEMP[playerid][pt_TOYS_SHOP])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
		{		
			if(PI[playerid][ac_CASH] >= Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price])
			{
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_VIP] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d accesorios! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_TOYS);
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}
				
				if(GivePlayerCash(playerid, -Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price], true, true)) {
					PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
					format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
					PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
					PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
					PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
					PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
					RegisterNewPlayerToy(playerid, slot);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Gracias por comprar accesorios en ~g~%s~w~, para ponertelo usa ~g~/accesorios~w~.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
					
					ClosePlayerToysMenu(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar esta ropa.", number_format_thousand(Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - PI[playerid][ac_CASH]));
			}
			
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			
			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;
			
			UpdateToysShop(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);
			
			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop) - 1;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;
			
			UpdateToysShop(playerid);
		}
		
	}
	
	if(PLAYER_TEMP[playerid][pt_SHOP])
	{
		HidePlayerDialog(playerid);
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para publicar anuncios.");
					
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnShopChecked()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new total_ads;
								cache_get_value_index_int(0, 0, total_ads);

								if(total_ads >= MAX_ADS_PER_PLAYER) SendFormatNotification(playerid, "No puedes publicar más de %d anuncios, borra alguno.", MAX_ADS_PER_PLAYER);
								else
								{
									HidePlayerShop(playerid);
									ShowDialog(playerid, DIALOG_SHOP_ADD);
								}
							}
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
					MySQL_TQueryInline(srp_db,  using inline OnShopChecked, QUERY_BUFFER);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = true;
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					MySQL_TQueryInline(srp_db,  using inline OnCountQueryLoad, "SELECT COUNT(id) FROM shop;");
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
					MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					MySQL_TQueryInline(srp_db,  using inline OnCountQueryLoad, "SELECT COUNT(id) FROM shop;");
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();
					
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
					MySQL_TQueryInline(srp_db,  using inline OnCountQueryLoad, QUERY_BUFFER);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
    return 1;
}

UpdateReputationTextDraws(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER, str[64];
	if(ACCOUNT_INFO[playerid][ac_REP] >= neccessary_rep)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 640.0, 0.0);
		if(PI[playerid][ac_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "Nivel_%d__(/comprarnivel)", ACCOUNT_INFO[playerid][ac_LEVEL]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	else
	{
		new Float:sizeX = floatmul(floatdiv(ACCOUNT_INFO[playerid][ac_REP], neccessary_rep), 640.0);
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], sizeX, 0.0);
		if(PI[playerid][ac_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "Nivel_%d__(%d/%d)", ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], neccessary_rep);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	return 1;
}

forward AddPlayerReputation(playerid);
public AddPlayerReputation(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
	{
		ACCOUNT_INFO[playerid][ac_REP] ++;
		UpdateReputationTextDraws(playerid);
		
		if(ACCOUNT_INFO[playerid][ac_REP] >= neccessary_rep) SendNotification(playerid, "Escribe ~g~/comprarnivel ~w~para subir de nivel.");
		
		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] ++;
		if(ACCOUNT_INFO[playerid][ac_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = 0;
		}
		
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	return 0;
}

CMD:comprarnivel(playerid, params[])
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * REP_MULTIPLIER;
	if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep) return SendNotification(playerid, "Aún no tienes la suficiente reputación para subir de nivel.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] * 150 > PI[playerid][ac_CASH]) return SendFormatNotification(playerid, "No tienes suficiente dinero para subir de nivel, te faltan ~g~%s dólares~w~ para poder comprarlo.", number_format_thousand((ACCOUNT_INFO[playerid][ac_LEVEL] * 150) - PI[playerid][ac_CASH]));
	
	if(GivePlayerCash(playerid, -(ACCOUNT_INFO[playerid][ac_LEVEL] * 150), true, true)) {
		ACCOUNT_INFO[playerid][ac_REP] = 1;
		ACCOUNT_INFO[playerid][ac_LEVEL] ++;
		UpdateReputationTextDraws(playerid);
		SetPlayerSkillLevels(playerid);
		
		SendFormatNotification(playerid, "~g~¡Felicidades! ~w~Has subido al nivel %d. Pagaste ~g~%d dólares~w~ por él.", ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_LEVEL] * 150);
		SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
		PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
		
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
		
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
	}
	return 1;
}

stock SetPlayerCash(playerid, amount, bool:update = true)
{
	PI[playerid][ac_CASH] = amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][ac_CASH]);
	
	if(update)
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET cash = %d WHERE id = %d;", PI[playerid][ac_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	return 1;
}

GivePlayerCash(playerid, amount, bool:update = true, bool:negative = false)
{
	if(amount == 0) return 1;
	if(!negative && amount < 0) return 0;
	if(negative && amount > 0) return 0;
	if(negative && (PI[playerid][ac_CASH] + amount) < 0) return 0;

	PI[playerid][ac_CASH] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][ac_CASH]);
	
	if(update)
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET cash = %d WHERE id = %d;", PI[playerid][ac_CASH], ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];
		
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == 0 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == 0) format(label_str, sizeof label_str, "{FF7373}%s\n{FFFFFF}Presiona {FF7373}[ Y ] {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME]);
		else if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == -1 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == -1) format(label_str, sizeof label_str, "{FF7373}%s\n{"#SILVER_COLOR"}PRÓXIMA APERTURA", ENTER_EXIT[total_enterexits][ee_NAME]);
		else format(label_str, sizeof label_str, "{FF7373}%s\n\n{FFFFFF}Horario: {FF7373}%02d:00h {FFFFFF}- {FF7373}%02d:00h\n\n{FFFFFF}Presiona {FF7373}[ Y ] {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME], ENTER_EXIT[total_enterexits][ee_TIME_OPEN], ENTER_EXIT[total_enterexits][ee_TIME_CLOSE]);
		
		ENTER_EXIT[total_enterexits][ee_INT_LABEL_ID] = CreateDynamic3DTextLabel("{FF7373}Salida\n{FFFFFF}Presiona {FF7373}[ Y ] {FFFFFF}para salir", 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		if(ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if(ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);
		
		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(1318, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.10, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		ENTER_EXIT[total_enterexits][ee_MAIN_ACTOR] = CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);

		//textdraw intimidación
		if(ENTER_EXIT[total_enterexits][ee_ROBBABLE]) {
			ENTER_EXIT[total_enterexits][ee_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Intimidación:_0.00%%");
			TextDrawLetterSize(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0.286000, 1.276444);
			TextDrawAlignment(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 2);
			TextDrawColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], -76);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawSetOutline(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawBackgroundColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 255);
			TextDrawFont(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetProportional(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
		}
		
		total_enterexits ++;
	}
	return 1;
}

CreatePropertyInfo(i, pid, pname[], cid, cname[])
{
	if(PROPERTY_INFO[i][property_EXT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_EXT_LABEL_ID]);
		PROPERTY_INFO[i][property_EXT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_INT_LABEL_ID]);
		PROPERTY_INFO[i][property_INT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_EXT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
		PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_INT_PICKUP_ID]);
		PROPERTY_INFO[i][property_INT_PICKUP_ID] = INVALID_STREAMER_ID;
	}

	new info[3], label_str[256], pickup_modelid;
	if(pid)
	{
		pickup_modelid = 0;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = pid;
		PROPERTY_INFO[i][property_CREW_ID] = 0;
		format(label_str, sizeof label_str, "Propiedad {"#PRIMARY_COLOR"}#%d\n\n{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para entrar.", PROPERTY_INFO[i][property_ID], pname);
	}
	else if(cid)
	{
		pickup_modelid = 0;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = true;
		PROPERTY_INFO[i][property_CREW_ID] = cid;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "Propiedad %d", PROPERTY_INFO[i][property_ID]);
		format(label_str, sizeof label_str, "Propiedad {"#PRIMARY_COLOR"}#%d\n\n{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para entrar.", PROPERTY_INFO[i][property_ID], cname);
	}
	else
	{
		pickup_modelid = 1273;
		PROPERTY_INFO[i][property_SOLD] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "Propiedad %d", PROPERTY_INFO[i][property_ID]);
		if(PROPERTY_INFO[i][property_VIP_LEVEL])
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
		else
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
	}
	
	PROPERTY_INFO[i][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[i][property_EXT_INTERIOR]);

	new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Z];
	if(PROPERTY_INFO[i][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
	PROPERTY_INFO[i][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para salir\n\nEscribe {"#PRIMARY_COLOR"}/casa {FFFFFF}para más opciones", 0xFFFFFFFF, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], z_pos + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[i][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
	PROPERTY_INFO[i][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INFO[i][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	PROPERTY_INFO[i][property_POLICE_FORCING] = false;
	PROPERTY_INFO[i][property_POLICE_FORCED] = false;
	PROPERTY_INFO[i][property_POLICE_FORCE_TIMER] = -1;
	return 1;
}

forward OnPropertiesLoaded();
LoadProperties()
{
	inline OnPropertiesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_PROPERTIES)
				{
					printf("---> Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
					break;
				}

				TOTAL_PROPERTIES_LOADED ++;

				new bool:isnull_name;
				PROPERTY_INFO[i][property_VALID] = true;
				cache_get_value_name_int(i, "id", PROPERTY_INFO[i][property_ID]);
				cache_is_value_name_null(i, "name", isnull_name);
				if(!isnull_name) cache_get_value_name(i, "name", PROPERTY_INFO[i][property_NAME]);
				cache_get_value_name_float(i, "ext_x", PROPERTY_INFO[i][property_EXT_X]);
				cache_get_value_name_float(i, "ext_y", PROPERTY_INFO[i][property_EXT_Y]);
				cache_get_value_name_float(i, "ext_z", PROPERTY_INFO[i][property_EXT_Z]);
				cache_get_value_name_float(i, "ext_angle", PROPERTY_INFO[i][property_EXT_ANGLE]);
				cache_get_value_name_int(i, "ext_interior", PROPERTY_INFO[i][property_EXT_INTERIOR]);
				cache_get_value_name_int(i, "ext_freeze", PROPERTY_INFO[i][property_EXT_FREEZE]);
				cache_get_value_name_int(i, "id_interior", PROPERTY_INFO[i][property_ID_INTERIOR]);
				cache_get_value_name_int(i, "price", PROPERTY_INFO[i][property_PRICE]);
				PROPERTY_INFO[i][property_PRICE_BASE] = PROPERTY_INFO[i][property_PRICE];
				cache_get_value_name_int(i, "level", PROPERTY_INFO[i][property_LEVEL]);
				cache_get_value_name_int(i, "extra", PROPERTY_INFO[i][property_EXTRA]);
				cache_get_value_name_int(i, "vip_level", PROPERTY_INFO[i][property_VIP_LEVEL]);
				cache_get_value_name_int(i, "dis_default_interior", PROPERTY_INFO[i][property_DIS_DEFAULT_INTERIOR]);

				if(PROPERTY_INFO[i][property_EXTRA]) PROPERTY_INFO[i][property_PRICE] = 0;
				if(PROPERTY_INFO[i][property_VIP_LEVEL]) PROPERTY_INFO[i][property_LEVEL] = 1;

				new id_player, pname[24], tid, bool:isnull_id_player, bool:isnull_pname, bool:isnull_tid;
				cache_is_value_name_null(i, "id_player", isnull_id_player);
				if(!isnull_id_player) cache_get_value_name_int(i, "id_player", id_player);
				cache_is_value_name_null(i, "pname", isnull_pname);
				if(!isnull_pname) cache_get_value_name(i, "pname", pname);
				cache_is_value_name_null(i, "tid", isnull_tid);
				if(!isnull_tid) cache_get_value_name_int(i, "tid", tid);
				if(id_player) CreatePropertyInfo(i, id_player, pname, 0, "");
				else if(tid)
				{
					inline OnCrewInfoLoad()
					{
						new crows;
						if(cache_get_row_count(crows))
						{
							if(crows)
							{
								new cid, cname[24];
								cache_get_value_index_int(0, 0, cid);
								cache_get_value_index(0, 1, cname);
								if(cid) CreatePropertyInfo(i, 0, "", cid, cname);
								else CreatePropertyInfo(i, 0, "", 0, "");
							}
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT crews.id, crews.name FROM territories INNER JOIN crews ON territories.id_crew = crews.id WHERE territories.id = %d;", tid);
					MySQL_TQueryInline(srp_db,  using inline OnCrewInfoLoad, QUERY_BUFFER);
				}
				else CreatePropertyInfo(i, 0, "", 0, "");

				inline OnPropertyClosetLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							PROPERTY_CLOSET[i][x][property_closet_VALID] = true;
							cache_get_value_name_int(x, "id", PROPERTY_CLOSET[i][x][property_closet_OBJECT_ID]);
							cache_get_value_name_int(x, "type", PROPERTY_CLOSET[i][x][property_closet_TYPE]);
							cache_get_value_name_int(x, "int", PROPERTY_CLOSET[i][x][property_closet_INT]);
							cache_get_value_name_int(x, "int_extra", PROPERTY_CLOSET[i][x][property_closet_INT_EXTRA]);
						}
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM property_closet WHERE id_property = %d LIMIT %d;", PROPERTY_INFO[i][property_ID], MAX_CLOSET_SLOTS);
				MySQL_TQueryInline(srp_db,  using inline OnPropertyClosetLoad, QUERY_BUFFER);
			}
			CallLocalFunction("OnPropertiesLoaded", "");
			LoadCrews();
		}
	}
	new query[] = "SELECT properties.*, player.id AS pid, player.name AS pname, territories.id AS tid FROM properties LEFT JOIN player ON properties.id_player = player.id LEFT JOIN territories ON properties.id_territory = territories.id;";
	MySQL_TQueryInline(srp_db, using inline OnPropertiesLoad, query);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if(PI[i][ac_LOCAL_INTERIOR] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

LoadCrews()
{
	inline OnCrewsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_CREWS)
				{
					printf("---> Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
					break;
				}

				CREW_INFO[i][crew_VALID] = true;
				cache_get_value_name_int(i, "id", CREW_INFO[i][crew_ID]);
				cache_get_value_name(i, "name", CREW_INFO[i][crew_NAME]);
				cache_get_value_name_int(i, "color", CREW_INFO[i][crew_COLOR]);
				CREW_INFO[i][crew_ONLINE_MEMBERS] = 0;

				//count
				inline OnCountQueryLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						if(crows)
						{
							cache_get_value_index_int(0, 0, CREW_INFO[i][crew_MEMBERS]);
						}
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", CREW_INFO[i][crew_ID]);
				MySQL_TQueryInline(srp_db,  using inline OnCountQueryLoad, QUERY_BUFFER);

				//ranks
				inline OnCrewRanksLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							new rank_pos;
							cache_get_value_name_int(x, "rank_pos", rank_pos);
							if(rank_pos < 0 || rank_pos > MAX_CREW_RANKS) continue;

							CREW_RANK_INFO[i][rank_pos][crew_rank_VALID] = true;
							cache_get_value_name_int(x, "id", CREW_RANK_INFO[i][rank_pos][crew_rank_ID]);
							cache_get_value_name(x, "rank_name", CREW_RANK_INFO[i][rank_pos][crew_rank_NAME]);
							cache_get_value_name_int(x, "permission0", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][0]);
							cache_get_value_name_int(x, "permission1", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][1]);
							cache_get_value_name_int(x, "permission2", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][2]);
							cache_get_value_name_int(x, "permission3", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][3]);
							cache_get_value_name_int(x, "permission4", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][4]);
							cache_get_value_name_int(x, "permission5", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][5]);
							cache_get_value_name_int(x, "permission6", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][6]);
							cache_get_value_name_int(x, "permission7", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][7]);
							cache_get_value_name_int(x, "permission8", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][8]);
							cache_get_value_name_int(x, "permission9", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][9]);
							cache_get_value_name_int(x, "permission10", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][10]);

							if(rank_pos == 0) {
								for(new j = 0; j < CREW_RANK_SIZE; j ++)
								CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][j] = 1;
							}
						}
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM crew_ranks WHERE id_crew = %d;", CREW_INFO[i][crew_ID]);
				MySQL_TQueryInline(srp_db,  using inline OnCrewRanksLoad, QUERY_BUFFER);
			}
			LoadGangZones();
		}
	}
	MySQL_TQueryInline(srp_db,  using inline OnCrewsLoad, "SELECT * FROM crews;");
	return 1;
}


LoadGangZones()
{
	inline OnSaZonesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_TERRITORIES)
				{
					printf("---> Límite superado en array 'TERRITORIES' al intentar cargar de la base de datos.");
					break;
				}

				new crewid, color, bool:isnull_crewid;
				TERRITORIES[i][territory_VALID] = true;
				cache_get_value_name_int(i, "id", TERRITORIES[i][territory_ID]);
				cache_get_value_name(i, "name", TERRITORIES[i][territory_NAME]);
				cache_get_value_name_float(i, "min_x", TERRITORIES[i][territory_MIN_X]);
				cache_get_value_name_float(i, "min_y", TERRITORIES[i][territory_MIN_Y]);
				cache_get_value_name_float(i, "min_z", TERRITORIES[i][territory_MIN_Z]);
				cache_get_value_name_float(i, "max_x", TERRITORIES[i][territory_MAX_X]);
				cache_get_value_name_float(i, "max_y", TERRITORIES[i][territory_MAX_Y]);
				cache_get_value_name_float(i, "max_z", TERRITORIES[i][territory_MAX_Z]);
				cache_is_value_name_null(i, "id_crew", isnull_crewid);
				if(!isnull_crewid) {
					cache_get_value_name_int(i, "id_crew", crewid);
					cache_get_value_name_int(i, "color", color);
				}
				TERRITORIES[i][territory_WAR] = false;
				TERRITORIES[i][territory_ATTACKER_CREW_INDEX] = 0;

				if(crewid)
				{
					TERRITORIES[i][territory_OCCUPIED] = true;
					TERRITORIES[i][territory_CREW_ID] = crewid;
					
					new r, g, b, a;
					HexToRGBA(color, r, g, b, a);
					TERRITORIES[i][territory_COLOR] = RGBAToHex(r, g, b, 135);
					TERRITORIES[i][territory_CREW_INDEX] = GetCrewIndexById(crewid);
				}
				else
				{
					TERRITORIES[i][territory_OCCUPIED] = false;
					TERRITORIES[i][territory_CREW_ID] = 0;
					TERRITORIES[i][territory_CREW_INDEX] = 0;
					TERRITORIES[i][territory_COLOR] = 0xCCCCCC55;
				}

				TERRITORIES[i][territory_AREA] = CreateDynamicCube(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MIN_Z], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y], TERRITORIES[i][territory_MAX_Z], 0, 0);

				new info[2];
				info[0] = AREA_TYPE_GANGZONE;
				info[1] = i;
				Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIES[i][territory_AREA], E_STREAMER_EXTRA_ID, info);
				TERRITORIES[i][territory_GANG_ZONE] = GangZoneCreate(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y]);
				
				TERRITORIES[i][territory_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
				TextDrawLetterSize(TERRITORIES[i][territory_TEXTDRAW], 0.286000, 1.276444);
				TextDrawAlignment(TERRITORIES[i][territory_TEXTDRAW], 2);
				TextDrawColor(TERRITORIES[i][territory_TEXTDRAW], -76);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawSetOutline(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawBackgroundColor(TERRITORIES[i][territory_TEXTDRAW], 255);
				TextDrawFont(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetProportional(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
			}
			CallLocalFunction("OnTerritoriesLoaded", "");
			SetTimerEx("server_loaded_request", 1000, false, "b", true);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT territories.*, crews.id AS crewid, crews.color FROM territories LEFT JOIN crews ON territories.id_crew = crews.id WHERE territories.gangzone = 1 LIMIT %d;", MAX_TERRITORIES);
	MySQL_TQueryInline(srp_db,   using inline OnSaZonesLoad, QUERY_BUFFER);
	return 1;
}

forward server_loaded_request(bool:toggle);
public server_loaded_request(bool:toggle) {
	server_loaded = toggle;
	if(toggle) {
		SendRconCommand("hostname "SERVER_HOSTNAME"");
	}
}

GetCrewIndexById(id)
{
	for(new x = 0; x != MAX_CREWS; x ++)
	{
		if(!CREW_INFO[x][crew_VALID]) continue;
		
		if(CREW_INFO[x][crew_ID] == id)
		{
			return x;
		}
	}
	return -1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] = pickupid;
	return 1;
}

hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;
	
	if(newkeys &  KEY_CTRL_BACK)
	{
		for(new i = 0; i != E_WORKS; i ++)	
		{
			if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
			
			if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
				{
					PC_EmulateCommand(playerid, "/trabajar");
					return 1;
				}
			}
		}
  		if(IsPlayerInRangeOfPoint(playerid, 1.0, 626.2347,116.3636,8.0031)) return ShowDialog(playerid, DIAlOG_BUY_MASO);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return PC_EmulateCommand(playerid, "/pvender");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return PC_EmulateCommand(playerid, "/grua");

		if(IsPlayerInDynamicArea(playerid, Farmer_Area))
		{
			for(new i = 0; i != MAX_PLANTS; i ++)
			{
				new Float:pos[3];
				GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

				if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
				{
					PC_EmulateCommand(playerid, "/recoger");
					return 1;
				}
			}
		}

		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			new index = GetBankLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(index != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) 
				{
					PC_EmulateCommand(playerid, "/banco");
					return 1;
				}
			}
		}

		new info[3];
		new Float:pos[3];
		Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		if(info[0] == PICKUP_TYPE_ATM)
		{
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2]))
			{
				PC_EmulateCommand(playerid, "/cajero");
				return 1;
			}
		}

		new indexx = GetPlayerFastFoodIndex(playerid);
		if(indexx != -10) return PC_EmulateCommand(playerid, "/pedir");

		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z]))
				{
					ShowDialog(playerid, DIALOG_CLOTHES);
					return 1;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2119.059814, -2001.701904, 7.984375)) 
		{
			PC_EmulateCommand(playerid, "/mercado");
			return 1;
		}
		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_247)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) 
			{
				PC_EmulateCommand(playerid, "/productos");
				return 1;
			}
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 253.280288, 76.219017, 1003.640625) || IsPlayerInRangeOfPoint(playerid, 1.0, 266.547180, 119.652816, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 1.0, 217.816406, 187.667922, 1003.031250))
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
			{
				SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
				return 1;
			}
			
			if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
			else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);

			return 1;
		}

		if((IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250)) && PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");

			ShowDialog(playerid, DIALOG_POLICE_SHOP);
			return 1;
		}
	}
	else if(newkeys & KEY_FIRE)
	{
		if(ACCOUNT_INFO[playerid][ac_LEVEL] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
		return 1;
	}
	else if(newkeys == KEY_F && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && TieneRoca[playerid] == 0 )
	//else if(newkeys == KEY_F && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && TieneRoca[playerid] == 0 && PI[playerid][ac_GPS] == 1 && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MINERO)
		{
			for( new i; i < sizeof MinaInfo; i++ )
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.8, MinaInfo[i][RocaX],MinaInfo[i][RocaY],MinaInfo[i][RocaZ]))
				{
					if(MinaInfo[i][w_use]) return 1;
					if(ProcesoPicando[playerid] != 0) return 1;
					if(PI[playerid][ac_Maso] == 0) return SendNotification(playerid, "No tienes un maso para minar, compralo afuera.");
					if( MinaInfo[i][w_count] > 0 )
					{
						ProcesoPicando[playerid] = 0;		
						//TiempoTecla[playerid] = 2;
						TieneRoca[playerid] = 0;		
						MinaInfo[i][w_use] = true;
						ApplyAnimation(playerid, "BASEBALL","Bat_4", 4.1, 1, 0, 0, 1, 1000);
						TimerMinando[playerid] = SetTimerEx( "TimerPicando", 300, false, "dd", playerid, i);
						TogglePlayerControllableEx(playerid, false );
						ApplyAnimation(playerid, "BASEBALL","Bat_4", 4.1, 1, 0, 0, 1, 1000);
						TimerSonido[playerid] = SetTimerEx( "TimerSound", 1130, true, "d", playerid);
						return 1;
					}
				}
			}
		}
	else if(newkeys & KEY_CROUCH)
	{
		if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, San_Andreas_Barriers[i][barrier_DISTANCE], San_Andreas_Barriers[i][barrier_PLAYER_X], San_Andreas_Barriers[i][barrier_PLAYER_Y], San_Andreas_Barriers[i][barrier_PLAYER_Z]))
					{
						if(GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
								{
									if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] != WORK_NONE)
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET] && !PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] ][pwork_SET]) break;
									}
									else
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET]) break;
									}
								}
							}
							if(IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;
							if(San_Andreas_Barriers[i][barrier_PRICE] > 0) {
								if(GivePlayerCash(playerid, -San_Andreas_Barriers[i][barrier_PRICE], false, true)) {
									SendFormatNotification(playerid, "Has pagado el peaje por ~y~%s ~w~dólares.", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
								}
								else {
									SendNotification(playerid, "No tienes suficiente dinero para pagar el peaje.");
									break;
								}
							}
							
							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}
			}
			
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
				{
					for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 20.0, POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z]))
						{
							if(IsDynamicObjectMoving(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID]) && !POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING]) break;
							
							KillTimer(POLICE_GARAGE_DOORS[i][police_gdoor_TIMER]);
							POLICE_GARAGE_DOORS[i][police_gdoor_TIMER] = SetTimerEx("ClosePoliceGarageDoor", 5000, false, "i", i);
							MoveDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_X], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RZ]);
							POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING] = false;
							break;
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
			{
				if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1208.744140, -34.261119, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 1213.738037, -33.667881, 1000.953125))
                    {
                        if(PI[playerid][ac_CASH] <= 25) return SendNotification(playerid, "Digamos que no tienes mucho dinero como para estar gastándotelo en esto...");
						
						if(GivePlayerCash(playerid, -random(25), false, true)) {
							ApplyAnimation(playerid, "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 0, 0, 0, 0, 0);
						}
                        return 1;
                    }
				}
			}
	
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				for(new i = 0; i != sizeof POLICE_DOORS; i ++)
				{
					if(GetPlayerInterior(playerid) != POLICE_DOORS[i][police_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != POLICE_DOORS[i][police_door_WORLD]) continue;
					if(IsDynamicObjectMoving(POLICE_DOORS[i][police_door_OBJECT_ID]) || !POLICE_DOORS[i][police_door_CLOSED]) continue;
					
					new Float:pos[4];
					
					pos[0] = POLICE_DOORS[i][police_door_X] + (1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[1] = POLICE_DOORS[i][police_door_Y] + (1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[2] = POLICE_DOORS[i][police_door_X] + (-1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[3] = POLICE_DOORS[i][police_door_Y] + (-1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					
					if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] - 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] + 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_NO)
	{
		if(IsPlayerInDynamicArea(playerid, Lumberjack_Area))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] == -1)
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Lleva la leña cortada al punto marcado para talar más árboles.");
						
						for(new i = 0; i != sizeof LUMBER_TREES; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z]))
							{
								if(LUMBER_TREES[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
								{
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
									LUMBER_TREES[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
									PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = i;
									
									RemovePlayerAttachedObject(playerid, 9);
									SetPlayerAttachedObject(playerid, 9, 341, 6);
									SetPlayerArmedWeapon(playerid, 0);
									
									new label_str[256];
									format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE], 0.0);
									UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
									SetPlayerKeyPress(playerid, minrand(30, 50));
								}
								return Y_HOOKS_BREAK_RETURN_1;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	
	else if(newkeys == KEY_WALK && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && TieneRoca[playerid] != 0 && EnProcesadora(playerid))
		{
			new ganancia;
			ganancia = GetPrecioRoca(TieneRoca[playerid]);
			GivePlayerCash(playerid, ganancia, true, false);
			PLAYER_WORKS[playerid][WORK_MINERO][pwork_LEVEL] ++;
			SendNotification(playerid, "+1 EXP en habilidad de minero.");
			new stringD[120];
			format(stringD, sizeof(stringD), "~g~+%d$", ganancia);		
			GameTextForPlayer(playerid, stringD, 1000, 1);
			TieneRoca[playerid] = 0;
			ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 5);
			return 1;
		}
	
	else if(newkeys & KEY_YES) {
		switch(GetPlayerState(playerid)) {
			case PLAYER_STATE_DRIVER: {
				new vehicleid = GetPlayerVehicleID(playerid);

				if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) {
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendNotification(playerid, "Debes esperar a que se cargue el vehículo para arrancar.");
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendNotification(playerid, "Debes esperar a que se descargue el vehículo para arrancar.");
					}
					
					if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendNotification(playerid, "Termina primero.");
				}
				
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
				{
					PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
					UpdateVehicleParams(vehicleid);
					
					if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
					else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
				}
				else
				{
					if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0) {
						SendNotification(playerid, "El vehículo tiene un cepo y no puede arrancar.");
						return 1;
					}
					SendNotification(playerid, "Encendiendo...");
					PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
				}
			}
			case PLAYER_STATE_ONFOOT: {
				if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return 1;
				if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return 1;
					
				new info[3];
				new Float:pos[3];
				Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				if(info[0] == PICKUP_TYPE_NONE) return 1;

				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
				Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return 1;

				switch(info[0])
				{
					case PICKUP_TYPE_ENTER_EXIT:
					{
						PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
							PI[playerid][ac_LOCAL_INTERIOR] = 0;
							PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
							SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
							FreezePlayer(playerid);
							CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
						}
						else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
							{
								ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_INTERIOR;
								PI[playerid][ac_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
								PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
								SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
								CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
							}
							else
							{
								if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
								{
									ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_INTERIOR;
									PI[playerid][ac_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
									PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
									SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
									FreezePlayer(playerid);
									CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);

									if(ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");							
								}
								else {
									if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendFormatNotification(playerid, "~r~%s abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
									else SendFormatNotification(playerid, "~r~%s ~w~está cerrado, su horario es: ~r~%02d:00h ~w~- ~r~%02d:00h~w~.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
								}
							}
						}
						else return 1;
					}
					case PICKUP_TYPE_PROPERTY:
					{
						PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
						
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
							PI[playerid][ac_LOCAL_INTERIOR] = 0;
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
							SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
							FreezePlayer(playerid);
						}
						else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE)) {
								new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
								if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
								return 1;
							}
							if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendNotification(playerid, "Esta propiedad está en venta.");
							if(PROPERTY_INFO[info[1]][property_CREW])
							{
								if(!PI[playerid][ac_CREW]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
								if(PI[playerid][ac_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
								
								ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
								PI[playerid][ac_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
								PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

								new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
								if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
								FreezePlayer(playerid);
							}
							else
							{
								if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
								{
									ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
									PI[playerid][ac_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
									PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

									new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
									if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
									SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
									FreezePlayer(playerid);
								}
								else
								{
									if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendNotification(playerid, "Espera para volver a tocar, si no te quieren abrir, vete.");
									
									new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
									if(owner_playerid == -1) return SendNotification(playerid, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");
									
									PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
									PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
									SendFormatNotification(owner_playerid, "~b~%s ~w~está tocando la puerta, para dejarle entrar ve a la puerta y usa ~b~/puerta~w~.", PLAYER_TEMP[playerid][pt_RP_NAME]);
									SendNotification(playerid, "Has tocado en la puerta, espera para que te abran o vete.");
								}
							}
						}
						else return 1;
					}
					default: return 1;
				}
			}
		}
	}
	return 1;
}

forward ClosePoliceDoor(i);
public ClosePoliceDoor(i)
{
	POLICE_DOORS[i][police_door_CLOSED] = true;
	MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
	return 1;
}

forward ClosePoliceGarageDoor(index);
public ClosePoliceGarageDoor(index)
{
	POLICE_GARAGE_DOORS[index][police_gdoor_CLOSING] = true;
	MoveDynamicObject(POLICE_GARAGE_DOORS[index][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[index][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RZ]);
	return 1;
}

forward CloseBarrier(i);
public CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}


public OnPlayerUpdate(playerid)
{

	if(GetPlayerInterior(playerid) == 66 && GetPlayerVirtualWorld(playerid) == 66) SetPlayerMyTime(playerid, 0, 0);
	else SetPlayerMyTime(playerid, GetMyWorldHour(), 0);
	if(PLAYER_TEMP[playerid][pt_KICKED] || PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || ACCOUNT_INFO[playerid][ac_ID] <= 0 || ACCOUNT_INFO[playerid][ac_LEVEL] <= 0) return 0;
	
	new player_state = GetPlayerState(playerid);
	if(player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;
	
	new player_action = GetPlayerSpecialAction(playerid), Float:player_health, Float:player_armour, player_weapon = GetPlayerWeapon(playerid), current_gettime = gettime();
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);
	if(player_weapon) CheckWeaponAndAmmo(playerid, player_weapon);
	
	if(ac_Info[CHEAT_PLAYER_HEALTH][ac_Enabled])
	{
		if(player_health > PI[playerid][ac_HEALTH] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				}
			}
		}
	}
	
	if(ac_Info[CHEAT_PLAYER_ARMOUR][ac_Enabled])
	{
		if(player_armour > PI[playerid][ac_ARMOUR] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_ARMOUR][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				}
			}
		}
	}
	
	if(ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if(player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				}
			}
		}
	}
	
	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}
	
	if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled] && vehicleid && player_state == PLAYER_STATE_PASSENGER)
	{
		if(floatabs(dis) > 20.0)
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = current_gettime + 5;
			}
		}
	}
	
	if(ac_Info[CHEAT_HIGH_POS][ac_Enabled])
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
		{
			if(floatabs(dis) > 80.0 && PI[playerid][ac_POS_Z] > -97.0)
			{
				if(player_state != PLAYER_STATE_PASSENGER)
				{
					if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					}
				}
			}
		}
	}

	switch(player_state)
	{
		case PLAYER_STATE_ONFOOT:
		{
			if(ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
				{
					new speed = GetPlayerSpeed(playerid);
					if(speed > 1000)
					{
						if(!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
					{
						if(floatabs(dis) > 6.0 && PI[playerid][ac_POS_Z] > -97.0)
						{
							if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
			}
		}
		case PLAYER_STATE_DRIVER:
		{	
			new Float:vspeed = GetVehicleSpeed(vehicleid);
			
			if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
				{
					if(vspeed > 1000.0)
					{
						if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled])
			{
				if(vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
					{						
						if(!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(vspeed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
					{
						if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						}
					}
				}
			}
			
			if(ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
			{
				new Keys, ud, lr;
				GetPlayerKeys(playerid, Keys, ud, lr);
				if(Keys == KEY_SPRINT)
				{
					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && vspeed > 60.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
					{
						if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							}
						}
					}
				}
			}
		}
	}
	
	PI[playerid][ac_HEALTH] = player_health;
	PI[playerid][ac_ARMOUR] = player_armour;
	GetPlayerPos(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z]);
	if(vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	
	if(addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}
	
	PI[playerid][ac_POS_X] = x;
	PI[playerid][ac_POS_Y] = y;
	PI[playerid][ac_POS_Z] = z;
	PI[playerid][ac_ANGLE] = angle;
	
	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);
	
	if(freeze)
	{
		TogglePlayerControllableEx(playerid, false);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	return 1;
}

forward TogglePlayerControl(playerid, bool:controlable);
public TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllableEx(playerid, controlable);
}


GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
        Float:tmp_distance,
        closest = -1; 

    for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) 
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], Hospital_Spawn_Positions[i][hspi_Z]); 
		if (tmp_distance < distance) 
		{ 
			distance = tmp_distance; 
			closest = i;
		}
	}

	if(closest == -1) closest = 1;
	return closest;
}

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][hspi_X];
	y = Hospital_Spawn_Positions[hospital][hspi_Y];
	z = Hospital_Spawn_Positions[hospital][hspi_Z];
	angle = Hospital_Spawn_Positions[hospital][hspi_ANGLE];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.0 + ( PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] * 0.98), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
	return 1;
}

forward HealthUp(playerid);
public HealthUp(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;
	
	if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] < 100.0)
	{
		if(ACCOUNT_INFO[playerid][ac_VIP]) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 10.0;
		else PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 5.0;
		
		if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] > 100.0) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 100.0;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
		PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if(ACCOUNT_INFO[playerid][ac_VIP]) PI[playerid][ac_HEALTH] = 100.0;
		else PI[playerid][ac_HEALTH] = 50.0;
		
		SetPlayerHealthEx(playerid, PI[playerid][ac_HEALTH]);
		
		ClearPlayerChat(playerid);
		SendNotification(playerid, "Te has recuperado.");
		new price = ACCOUNT_INFO[playerid][ac_LEVEL] * 200;
		if(price > 1200) price = 1200;
		price += minrand(100, 200);
		
		if(price > PI[playerid][ac_CASH])
		{
			price = PI[playerid][ac_CASH];
			if(price < 0) price = 0;
		}

		SendFormatNotification(playerid, "El coste de los servicios médicos ofrecidos es de ~r~%s dólares~w~.", number_format_thousand(price));
		GivePlayerCash(playerid, -price, false, true);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
		PI[playerid][ac_LOCAL_INTERIOR] = 0;
		PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
		
		if(PI[playerid][ac_WANTED_LEVEL] > 0 || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_JAIL;
			if(ACCOUNT_INFO[playerid][ac_VIP]) PI[playerid][ac_POLICE_JAIL_TIME] = 150 * PI[playerid][ac_WANTED_LEVEL];
			else PI[playerid][ac_POLICE_JAIL_TIME] = 300 * PI[playerid][ac_WANTED_LEVEL];
			PI[playerid][ac_WANTED_LEVEL] = 0;
			PI[playerid][ac_POLICE_JAIL_ID] = 0;
			PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			PI[playerid][ac_INTERIOR] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR];
			SetPlayerVirtualWorld(playerid, 0);
			
			new time = PI[playerid][ac_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
			SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));
		}
		else
		{
			GetHospitalSpawnPosition(PLAYER_TEMP[playerid][pt_HOSPITAL], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], PI[playerid][ac_INTERIOR], PI[playerid][ac_LOCAL_INTERIOR], ACCOUNT_INFO[playerid][ac_STATE]);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		TogglePlayerSpectatingEx(playerid, false);
	}
	return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE] = spectate;
	return TogglePlayerSpectating(playerid, spectate);
}

#define MAX_INTERIOR_ACTORS 10
enum Interior_Actor_Enum
{
	bool:ia_VALID,
	ia_SKIN,
	Float:ia_POS_X,
	Float:ia_POS_Y,
	Float:ia_POS_Z,
	Float:ia_POS_A,
}

CreateInteriorActor(interior_type, world, interior)
{
	if(interior_type == INTERIOR_NO_INFO) return INVALID_ACTOR_ID;
	
	new InteriorActorInfo[MAX_INTERIOR_ACTORS][Interior_Actor_Enum];
	
	switch(interior_type)
	{
		/*case INTERIOR_GENERAL_HOSPITAL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 308;
			InteriorActorInfo[0][ia_POS_X]	= 1969.236572;
			InteriorActorInfo[0][ia_POS_Y]	= 1169.541259;
			InteriorActorInfo[0][ia_POS_Z]	= -5.208700;
			InteriorActorInfo[0][ia_POS_A]	= 178.0;
		}*/
		case INTERIOR_BINCO:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 119;
			InteriorActorInfo[0][ia_POS_X]	= 208.376373;
			InteriorActorInfo[0][ia_POS_Y]	= -98.703956;
			InteriorActorInfo[0][ia_POS_Z]	= 1005.257812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 191;
			InteriorActorInfo[0][ia_POS_X]	= 203.826187;
			InteriorActorInfo[0][ia_POS_Y]	= -41.667518;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 190;
			InteriorActorInfo[0][ia_POS_X]	= 207.139907;
			InteriorActorInfo[0][ia_POS_Y]	= -127.805473;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 169;
			InteriorActorInfo[0][ia_POS_X]	= 204.275909;
			InteriorActorInfo[0][ia_POS_Y]	= -157.829010;
			InteriorActorInfo[0][ia_POS_Z]	= 1000.523437;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_VICTIM:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 217;
			InteriorActorInfo[0][ia_POS_X]	= 204.853225;
			InteriorActorInfo[0][ia_POS_Y]	= -8.764448;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.210937;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		case INTERIOR_ZIP:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 211;
			InteriorActorInfo[0][ia_POS_X]	= 162.226135;
			InteriorActorInfo[0][ia_POS_Y]	= -81.191978;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_247:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X]	= -27.483411;
			InteriorActorInfo[0][ia_POS_Y]	= -91.628837;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.546875;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_PIZZA:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 155;
			InteriorActorInfo[0][ia_POS_X] 	= 375.114501;
			InteriorActorInfo[0][ia_POS_Y] 	= -117.272621;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.492187;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 167;
			InteriorActorInfo[0][ia_POS_X] 	= 368.652679;
			InteriorActorInfo[0][ia_POS_Y] 	= -4.492218;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.851562;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 205;
			InteriorActorInfo[0][ia_POS_X] 	= 376.114227;
			InteriorActorInfo[0][ia_POS_Y] 	= -65.848991;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1407.526489;
			InteriorActorInfo[0][ia_POS_Y] 	= 1321.833496;
			InteriorActorInfo[0][ia_POS_Z] 	= 1501.091918;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_SF:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1104.802001;
			InteriorActorInfo[0][ia_POS_Y] 	= 1531.275634;
			InteriorActorInfo[0][ia_POS_Z] 	= 1452.475097;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LV:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 2692.497558;
			InteriorActorInfo[0][ia_POS_Y] 	= -610.933593;
			InteriorActorInfo[0][ia_POS_Z] 	= -71.658203;
			InteriorActorInfo[0][ia_POS_A]	= 90.0;
		}
		case INTERIOR_CITY_HALL_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 186;
			InteriorActorInfo[0][ia_POS_X] 	= -474.572387;
			InteriorActorInfo[0][ia_POS_Y] 	= 287.982879;
			InteriorActorInfo[0][ia_POS_Z] 	= 2004.584960;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_UNITY_STATION:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X] 	= 1489.038818;
			InteriorActorInfo[0][ia_POS_Y] 	= 1305.631591;
			InteriorActorInfo[0][ia_POS_Z] 	= 1093.296386;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		case INTERIOR_TRUCK:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 127;
			InteriorActorInfo[0][ia_POS_X] 	= 1297.120117;
			InteriorActorInfo[0][ia_POS_Y] 	= -66.351226;
			InteriorActorInfo[0][ia_POS_Z] 	= 1002.497375;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		default: return INVALID_ACTOR_ID;
	}

	new mainActor = INVALID_ACTOR_ID;
	for(new i; i != sizeof InteriorActorInfo; i++) {
		if(InteriorActorInfo[i][ia_VALID]) {
			new tmp = CreateDynamicActor(InteriorActorInfo[i][ia_SKIN], InteriorActorInfo[i][ia_POS_X], InteriorActorInfo[i][ia_POS_Y], InteriorActorInfo[i][ia_POS_Z], InteriorActorInfo[i][ia_POS_A], true, 100.0, world, interior);
			if(i == 0) {
				mainActor = tmp;
			}
		}
	}

	return mainActor;
}

GetBuyPropertySiteIndexByIntTyp(interior_type)
{
	for(new i = 0; i != sizeof BUY_PROPERTIES_SITES; i ++)
	{
		if(BUY_PROPERTIES_SITES[i][site_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetBankLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Bank_Interior_Positions; i ++)
	{
		if(Bank_Interior_Positions[i][bank_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetPlayerFastFoodIndex(playerid)
{
	for(new i = 0; i != sizeof Fast_Food_Positions; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z]))
		{
			return i;
		}
	}
	return -10;
}

GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if(Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

ShowToysShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

HideToysShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

ClosePlayerToysMenu(playerid)
{
	SetPlayerVirtualWorld(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD] );
	TogglePlayerControllableEx(playerid, true);
	
	HideToysShopTextdraws(playerid);
	//PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = false;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

RegisterNewPlayerToy(playerid, slot)
{
	inline OnPlayerToyInserted()
	{
		PLAYER_TOYS[playerid][slot][player_toy_ID] = cache_insert_id();
	}

	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO ptoys(id_player, name, attached, modelid, bone, offset_x, offset_y, offset_z, rot_x, rot_y, rot_z, scale_x, scale_y, scale_z, color1, color2)\
			VALUES(%d, '%e', %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d);\
		",
			ACCOUNT_INFO[playerid][ac_ID], PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID],
			PLAYER_TOYS[playerid][slot][player_toy_BONE], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][slot][player_toy_ROT_Z], PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z], PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	MySQL_TQueryInline(srp_db, using inline OnPlayerToyInserted, QUERY_BUFFER);
	return 1;
}


UpdateToysShop(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;
	
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	
	new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_%s$", Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
	
	
	if(PI[playerid][ac_CASH] < Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
	else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}


ShowClothingShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

HideClothingShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

ClosePlayerClothingMenu(playerid)
{
	PI[playerid][ac_POS_X] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X];
	PI[playerid][ac_POS_Y] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y];
	PI[playerid][ac_POS_Z] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z];
	PI[playerid][ac_ANGLE] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_ANGLE];
	SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
	TogglePlayerControllableEx(playerid, true);
	
	HideClothingShopTextdraws(playerid);
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ExitPlayerWardrobe(playerid)
{
	SetPlayerPosEx(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_INTERIOR], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD], false, true);
	return 1;
}

UpdateClothingShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return 0;
	
	new cost, textdraw_str[128];
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);
	
	switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
	{
		case INTERIOR_BINCO:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_SUBURBAN:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_PROLAPS:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_DIDIER_SACHS:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_VICTIM:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_ZIP:
		{
			switch(PI[playerid][ac_GENDER])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];
					
					if(PI[playerid][ac_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);
					
					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	return 1;
}

stock number_format_thousand(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}
	
	if(negative) strins(f_string, "-", 0);
	return f_string;
}

stock number_format_dash(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "-", numbers);
	}
	
	if(negative) strins(f_string, "- ", 0);
	return f_string;
}

SelectTextDrawEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return 0;
	
	new Float:size;
	size = 500.699981 + (PI[playerid][ac_HUNGRY] * 0.46030121);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], size, 0.000000);
	
	size = 557.699981 + (PI[playerid][ac_THIRST] * 0.46030121);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], size, 0.000000);
	
	if(PI[playerid][ac_CONFIG_HUD])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2]);
	}
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN	2 // 2 segundos de timer
#define THIRST_HOURS_STOPPED	9 // 9 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED	12 // 12 horas parado si alimentacion esta a 100 va a 0

forward HungryThirstDown(playerid);
public HungryThirstDown(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);
	
	new current_gettime = gettime();
	
	if(ACCOUNT_INFO[playerid][ac_VIP])
	{
		if(current_gettime - PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	if(PI[playerid][ac_WANTED_LEVEL] > 0 && ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_NORMAL && !PLAYER_TEMP[playerid][pt_CUFFED])
	{
		if(gettime() - PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] > 300)
		{
			if(PI[playerid][ac_WANTED_LEVEL] == 1)
			{
				SendFormatNotification(playerid, "Has perdido de vista a la policía.");
				SetPlayerWantedLevelEx(playerid, 0);
			}
			else SetPlayerWantedLevelEx(playerid, PI[playerid][ac_WANTED_LEVEL] - 1);
		}
	}

	PI[playerid][ac_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
	PI[playerid][ac_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));
	
	if(PI[playerid][ac_THIRST] <= 0.5) PI[playerid][ac_THIRST] = 0.5;
	if(PI[playerid][ac_HUNGRY] <= 0.5) PI[playerid][ac_HUNGRY] = 0.5;
	if(PI[playerid][ac_THIRST] < 20.0)
	{
		PI[playerid][ac_HEALTH] -= 0.2;
		
		if(PI[playerid][ac_THIRST] <= 1.0 || PI[playerid][ac_HEALTH] <= 0.5)
		{
			SendNotification(playerid, "Te has desmayado por deshidratación.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][ac_THIRST] = 75.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, PI[playerid][ac_HEALTH]);
		
		if(!PLAYER_TEMP[playerid][pt_THIRST_MESSAGE])
		{
			SendNotification(playerid, "Tienes sed, si no bebes agua pronto acabarás muriendo.");
			PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = true;
		}
	}
	
	if(PI[playerid][ac_HUNGRY] < 20.0)
	{
		PI[playerid][ac_HEALTH] -= 0.2;
		
		if(PI[playerid][ac_HUNGRY] <= 1.0 || PI[playerid][ac_HEALTH] <= 0.5)
		{
			SendNotification(playerid, "Te has desmayado por hambre.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][ac_HUNGRY] = 55.0;
			return 1;
		}
		
		SetPlayerHealthEx(playerid, PI[playerid][ac_HEALTH]);
		
		if(!PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE])
		{
			SendNotification(playerid, "Tienes hambre, si no comes nada pronto acabarás muriendo.");
			PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = true;
		}
	}
	
	UpdatePlayerHud(playerid);
	return 1;
}

SetPlayerHud(playerid)
{
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);
	UpdateReputationTextDraws(playerid);
	
	if(PI[playerid][ac_CONFIG_TIME]) TextDrawShowForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	if(PI[playerid][ac_CONFIG_HUD])
	{
		for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) {
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][i]);	
		}
		
		for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) {
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
		}
	}
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);
	PLAYER_TEMP[playerid][pt_TIMERS][5] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SERVER_TIME]);
	
	for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++) {
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][i]);	
	}
	
	for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++) {
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
	}

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	return 1;
}

is_open(hour, open, close)
{
	if(open < 0 || close < 0) return false;
	if(open > close)
	{
		if( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{													
			return true;			
		}
		else
		{
			return false;
		}
	}
	else if(open < close)
	{
		if((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	PI[playerid][ac_HUNGRY] += hungry;
	if(PI[playerid][ac_HUNGRY] > 30.0) PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	if(PI[playerid][ac_HUNGRY] > 100.0) PI[playerid][ac_HUNGRY] = 100.0;
	
	PI[playerid][ac_THIRST] += thirst;
	if(PI[playerid][ac_THIRST] > 30.0) PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	if(PI[playerid][ac_THIRST] > 100.0) PI[playerid][ac_THIRST] = 100.0;
	
	UpdatePlayerHud(playerid);
	return 1;
}

SetActorSkin(actorid, skin, &actor)
{
	actor = INVALID_ACTOR_ID;
	
    new Float:x, Float:y, Float:z, Float:a, vw;
    GetActorPos(actorid, x, y, z); 
    GetActorFacingAngle(actorid, a);
	vw = GetActorVirtualWorld(actorid);
    DestroyActor(actorid); 
    actor = CreateActor(skin, x, y, z, a);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

stock SetActorFacingAngleEx(actorid, skin, Float:angle, &actor)
{
	actor = INVALID_ACTOR_ID;
	
    new Float:x, Float:y, Float:z, vw;
    GetActorPos(actorid, x, y, z); 
	vw = GetActorVirtualWorld(actorid);
    DestroyActor(actorid); 
    actor = CreateActor(skin, x, y, z, angle);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(PI); i ++)
	{
		if(PI[i][ac_BANK_ACCOUNT] == 0) continue;
		if(PI[i][ac_BANK_ACCOUNT] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
		{
			if(ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE]);
					
					if(interval < 50)
					{
						if(!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						}
					}
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE] = GetTickCount();
				}
			}
		}
	}
	
    if(newstate == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(ac_Info[CHEAT_CAR_JACKING][ac_Enabled])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_CAR_JACKING][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_JACKING][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_JACKING][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					}
					
					PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}
		
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;
		if(PI[playerid][ac_DRIVE_LICENSE_POINTS] == 0 && !PLAYER_TEMP[playerid][pt_DL_EXAM] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO])
		{
			SendNotification(playerid, "Estás conduciendo sin licencia de conducción, la policía podría multarte.");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_NONE:
			{
				if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
					UpdateVehicleParams(vehicleid);
				}
			}
			case VEHICLE_TYPE_DRIVING_SCHOOL:
			{
				if(PLAYER_TEMP[playerid][pt_DL_EXAM])
				{
					SendNotification(playerid, "Sigue los puntos de control para completar el examen.");
					SetPlayerDrivingSchoolCP(playerid);
				}
			}
			case VEHICLE_TYPE_SELL:
			{
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = vehicleid;
				new pvehicles = CountPlayerVehicles(playerid);
				if(pvehicles >= MAX_SU_VEHICLES) return SendFormatNotification(playerid, "No puedes comprar más vehículos, el límite es %d.", MAX_SU_VEHICLES);
				if(!ACCOUNT_INFO[playerid][ac_VIP])
				{
					if(pvehicles >= MAX_NU_VEHICLES)
					{
						SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_VEHICLES);
						return 1;
					}
				}
				
				ShowDialog(playerid, DIALOG_BUY_VEHICLE);
				return 1;
			}
			case VEHICLE_TYPE_WORK:
			{
				if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
									
									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}
				
				if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;
								
								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				
				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR: CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK, WORK_DELIVERYMAN:
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								SendNotification(playerid, "No eres el conductor de este vehículo.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRASH:
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
								SendNotification(playerid, "No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
							{
								SendNotification(playerid, "Ya estás trabajando con otro compañero.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = true;
							PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;
							
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) SendNotification(playerid, "Necesitas un compañero para empezar con el trabajo.");
							else
							{
								new route = random(MAX_ROUTES);
								while(!TRASH_OBJECTS[route][trash_route_VALID])
								{
									route = random(MAX_ROUTES);
								}
								
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
								
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
								
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
								
								SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
								SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

							}
						}
					}
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED])
						{
							if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								if(GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]) < 20.0)
								{
									SetVehicleToRespawnEx(vehicleid);
								}
								
								SendNotification(playerid, "No eres el conductor de esta moto.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							
							if(!PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								SendNotification(playerid, "Ya has repartido todas las pizzas, vuelve a la pizzería para cobrar.");
								SetPlayer_Pizza_Checkpoint(playerid, -1);
							}
							else
							{
								SendFormatNotification(playerid, "Te quedan %d pizzas por repartir.", PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS]);
								if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI])
								{
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = randomEx(sizeof(PIZZA_DELIVERY_POINT), PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
								}
								SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
							}
						}
						else
						{
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED] = true;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] = ACCOUNT_INFO[playerid][ac_ID];
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS] = minrand(3, 6);
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = random( sizeof(PIZZA_DELIVERY_POINT) );
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
							PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS];
							PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
							
							SendFormatNotification(playerid, "Esta moto tiene %d pizzas, repartelas todas y vuelve a la pizzería para cobrar.", PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS]);
							SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
						}
					}
				}
			}
		}
		
		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendNotification(playerid, "Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
    }
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		
		new vehicleid = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TAXI:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
					if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
						}
						return 1;
					}
					
					ShowPlayerTaxiMeter(playerid);
					if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
					{
						PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
						DisablePlayerTaxiMark(playerid);
					}
					
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
					GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
					KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
				}
				case WORK_TRASH:
				{
					if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
					{
						SendFormatNotification(playerid, "Necesitas ser %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
					{
						SendNotification(playerid, "No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					
					if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
							SendNotification(playerid, "No eres el acompañante de este camión.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
						{
							SendNotification(playerid, "Ya estás trabajando con otro compañero.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						
						PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = true;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;
						
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) SendNotification(playerid, "Necesitas un compañero para empezar con el trabajo.");
						else
						{
							new route = random(MAX_ROUTES);
							while(!TRASH_OBJECTS[route][trash_route_VALID])
							{
								route = random(MAX_ROUTES);
							}
							
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;
							
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
							
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);
							
							SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
							SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

						}
					}
				}
			}
		}
		
		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				
				SendNotification(playerid, "Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		if(!PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE])
		{
			if(ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
				PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
			}
			
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
			{
				if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
				{
					PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] 	][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;
				}
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;
			
			StopAudioStreamForPlayer(playerid);
			
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				switch(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR, WORK_TRUCK: CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_STARTED])
						{
							if(PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								new Float:distance =	GetPlayerDistanceFromPoint
																(
																	playerid,
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][0],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][1],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][2]
																);
										
								if(distance > 20.0)
								{
									SendNotification(playerid, "Vuelve a subir a la moto, aún estás muy lejos del cliente.");
									if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
									{
										DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
										PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
									}
									if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
									}
								}
								else
								{
									if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
										PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
										RemovePlayerAttachedObject(playerid, 9);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
										PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
										SendNotification(playerid, "Genial, vuelve a subir a la moto para continuar.");
									}
									else
									{
										SetPlayerArmedWeapon(playerid, 0);
										SetPlayerAttachedObject(playerid, 9, 1582, 6, 0.094, 0.077999, -0.165999, 72.0, 8.799999, 9.899992, 0.73, 0.774999, 1.0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
								}
							}
							else
							{
								if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
								{
									DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
									PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
								}
								if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
								{
									DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
									PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
								}
								SendNotification(playerid, "Vuelve a subir a la moto y ve a la pizzería para cobrar.");
							}
						}
					}
				}
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
			{
				if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) SendNotification(playerid, "Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.");
					}
					else
					{
						TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = false;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
		{
			new driver = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER];
			
			if(driver != INVALID_PLAYER_ID)
			{
				new work_extra_payment;
				if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ driver ][WORK_TAXI][pwork_LEVEL], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];
				
					if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[driver][WORK_TAXI][pwork_LEVEL] ++;
				
				SendFormatNotification(driver, "Has ganado ~g~%s dólares~w~ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment));
				GivePlayerCash(driver, TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment, true, false);
				GivePlayerCash(playerid, -TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT], true, true);
				
				SendFormatNotification(playerid, "El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]));
				ResetVehicleTaxiMeter(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
				HidePlayerTaxiMeter(playerid);
				UpdatePlayerTaxiMeterTextdraws(driver);
			}

			new passenger = GetVehicleFirstPassenger( PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] );
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER], passenger);
			}
		}
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) SendNotification(playerid, "Sube al camión para volver al vertedero y recibir la paga.");
						else
						{
							new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =	GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);
							
							if(distance > 10.0) SendNotification(playerid, "Vuelve a subir al camión, aún estás demasiado lejos del punto de recogida.");
							else
							{
								if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
								{
									if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
									if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;
									
									new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");
									
									new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
									if(offset > 30.0) offset = 30.0;
									
									PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
									UpdatePlayerTrashRecycleSize(playerid);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
									
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
									
									KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
									PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								SendNotification(playerid, "Recoge la basura y vuelve al camión para continuar.");
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = false;
					PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	return 1;
}

const CRASHER_PACKET = 228;
IPacket:CRASHER_PACKET(playerid, BitStream:bs)
{
	printf("[ADVERTENCIA] Packet 228 recibido!");
	KickEx(playerid);
}


forward ResyncPlayer(playerid);
public ResyncPlayer(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	GetPlayerFacingAngle(playerid, angle);

	new BitStream:bsr = BS_New();
	new BitStream:bsa = BS_New();

	BS_WriteValue(bsr, PR_UINT16, playerid);

	BS_WriteValue(
		bsa,
		PR_UINT16, playerid,
		PR_UINT8, NO_TEAM,
		PR_UINT32, GetPlayerSkin(playerid),
		PR_FLOAT, x,
		PR_FLOAT, y,
		PR_FLOAT, z,
		PR_FLOAT, angle,
		PR_UINT32, PLAYER_TEMP[playerid][pt_PLAYER_COLOR],
		PR_UINT8, GetPlayerFightingStyle(playerid)
	);

	for(new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerStreamedIn(playerid, i))
		{
			BS_RPC(bsr, i, 163); // RPC_WorldPlayerRemove
			BS_RPC(bsa, i, 32); // RPC_WorldPlayerAdd
		}
	}

	BS_Delete(bsr);
	BS_Delete(bsa);
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
			{
				new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE]);
				
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					}
				}
				PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
			}
		}
	}
	
	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);
	
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MEDIC)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MEDIC)
		{
			SendNotification(playerid, "~r~Estando de servicio como médico solo puedes llevar ambulancias.");
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			return 1;
		}
	}
	
	if(!ispassenger)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if(PLAYER_TEMP[playerid][pt_CJ_WARNINGS] >= 5)
			{
				KickEx(playerid);
				return 1;
			}
			PLAYER_TEMP[playerid][pt_CJ_WARNINGS] ++;
			SendFormatNotification(playerid, "~w~No puedes robar vehículos así, congelado 5 segundos, aviso ~r~%d/5~w~.", PLAYER_TEMP[playerid][pt_CJ_WARNINGS]);
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);

			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][19]);
			PLAYER_TEMP[playerid][pt_TIMERS][19] = SetTimerEx("CarJackingFinish", 5000, false, "i", playerid);

			SetTimerEx("ResyncPlayer", 0, false, "d", playerid);
			return 1;
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
			{
				SendFormatNotification(playerid, "Necesitas ser ~r~%s~w~ para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VIP] && !ACCOUNT_INFO[playerid][ac_VIP])
			{
				SendNotification(playerid, "Necesitas adquirir membresía VIP para usar este vehículo. (/ayuda > membresía VIP)");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendFormatNotification(playerid, "Tienes que dejar de estar de servicio de ~r~%s~w~.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					SendFormatNotification(playerid, "Necesitas estar de servicio de ~r~%s~w~ para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}
			
			if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
			{
				SendFormatNotification(playerid, "Necesitas más experiencia en este trabajo para llevar este vehículo. ~r~(%d/%d)", PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
		else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_DRIVING_SCHOOL)
		{
			if(!PLAYER_TEMP[playerid][pt_DL_EXAM])
			{
				SendNotification(playerid, "~r~Necesitas estar haciendo el examen de conducir.");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;	
			}
		}
	}
	else
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
			{
				SendFormatNotification(playerid, "Necesitas ser %s para poder entrar a este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendFormatNotification(playerid, "Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	return 1;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, interior = 0, world = 0)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if(static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "Test Vehicle");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
	SetVehicleVirtualWorldEx(vehicle_id, world);
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);
	
	if(vehicle_id == INVALID_VEHICLE_ID) return false;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
	
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
	
	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
	RegisterNewPlayerVehicle(playerid, vehicle_id);
	
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	inline OnVehicleInserted()
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = cache_insert_id();
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_ID])
		{
			format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pvehicles SET plate = '%e' WHERE id = %d;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
	}

	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO pvehicles (id_player, modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, gas, max_gas)\
			VALUES(%d, %d, %f, %f, %f, %f, %d, %d, %f, %f);\
		",
			ACCOUNT_INFO[playerid][ac_ID], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]
	);
	MySQL_TQueryInline(srp_db, using inline OnVehicleInserted, QUERY_BUFFER);
	return 1;
}

LoadPlayerVehicles(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPlayerVehiclesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU_VEHICLES)
				{
					printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new id, plate[32], modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:spawn_angle,
					Float:health, damage_panels, damage_doors, damage_lights, damage_tires, color1, color2,
					paintjob, Float:gas, Float:max_gas, closed, interior, eworld, veh_state,
					components[MAX_VEHICLE_COMPONENTS], vClamp,
					bool:isnull_plate;

				cache_get_value_name_int(i, "id", id);
				cache_is_value_name_null(i, "plate", isnull_plate);
				if(!isnull_plate) cache_get_value_name(i, "plate", plate, 32);
				cache_get_value_name_int(i, "modelid", modelid);
				cache_get_value_name_float(i, "spawn_x", spawn_x);
				cache_get_value_name_float(i, "spawn_y", spawn_y);
				cache_get_value_name_float(i, "spawn_z", spawn_z);
				cache_get_value_name_float(i, "spawn_angle", spawn_angle);
				cache_get_value_name_float(i, "health", health);
				cache_get_value_name_int(i, "damage_panels", damage_panels);
				cache_get_value_name_int(i, "damage_doors", damage_doors);
				cache_get_value_name_int(i, "damage_lights", damage_lights);
				cache_get_value_name_int(i, "damage_tires", damage_tires);
				cache_get_value_name_int(i, "color1", color1);
				cache_get_value_name_int(i, "color2", color2);
				cache_get_value_name_int(i, "paintjob", paintjob);
				cache_get_value_name_float(i, "gas", gas);
				cache_get_value_name_float(i, "max_gas", max_gas);
				cache_get_value_name_int(i, "closed", closed);
				cache_get_value_name_int(i, "interior", interior);
				cache_get_value_name_int(i, "world", eworld);
				cache_get_value_name_int(i, "state", veh_state);
				cache_get_value_name_int(i, "slot0", components[0]);
				cache_get_value_name_int(i, "slot1", components[1]);
				cache_get_value_name_int(i, "slot2", components[2]);
				cache_get_value_name_int(i, "slot3", components[3]);
				cache_get_value_name_int(i, "slot4", components[4]);
				cache_get_value_name_int(i, "slot5", components[5]);
				cache_get_value_name_int(i, "slot6", components[6]);
				cache_get_value_name_int(i, "slot7", components[7]);
				cache_get_value_name_int(i, "slot8", components[8]);
				cache_get_value_name_int(i, "slot9", components[9]);
				cache_get_value_name_int(i, "slot10", components[10]);
				cache_get_value_name_int(i, "slot11", components[11]);
				cache_get_value_name_int(i, "slot12", components[12]);
				cache_get_value_name_int(i, "slot13", components[13]);
				cache_get_value_name_int(i, "clamp", vClamp);

				new vehicle_id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, -1);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = id;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_CLAMP] = vClamp;

					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
					format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%s", plate);
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = spawn_x;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = spawn_y;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = spawn_z;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = spawn_angle;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = health;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = damage_panels;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = damage_doors;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = damage_lights;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = damage_tires;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color1;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color2;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = paintjob;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = closed;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = veh_state;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS] = components;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_LAST_REPAIR_TIME] = gettime();

					if(!ACCOUNT_INFO[playerid][ac_VIP]) 
					{
						if(i >= MAX_NU_VEHICLES)
						{
							GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
							PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						}
					}

					//vboot
					inline OnVbootLoad()
					{
						new vb_rows;
						if(cache_get_row_count(vb_rows))
						{
							for(new x = 0; x != vb_rows; x ++)
							{
								new vboot_id, type, int, int_extra;
								cache_get_value_name_int(x, "id", vboot_id);
								cache_get_value_name_int(x, "type", type);
								cache_get_value_name_int(x, "int", int);
								cache_get_value_name_int(x, "int_extra", int_extra);

								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_VALID] = true;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_OBJECT_ID] = vboot_id;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_TYPE] = type;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT] = int;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT_EXTRA] = int_extra;
							}
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vboot WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS]);
					MySQL_TQueryInline(srp_db, using inline OnVbootLoad, QUERY_BUFFER);

					//vobjects
					inline OnVobjectsLoad()
					{
						new vo_rows;
						if(cache_get_row_count(vo_rows))
						{
							for(new x = 0; x != vo_rows; x ++)
							{
								new vobject_id, type, name[32], vobject_modelid, Float:off_x, Float:off_y, Float:off_z,
									Float:rot_x, Float:rot_y, Float:rot_z, attached, vobject_color0, vobject_color1,
									vobject_color2, vobject_color3, vobject_color4, text[32], font[24], fontsize, fontbold, fontcolor,
									bool:isnull_text, bool:isnull_font;

								cache_get_value_name_int(x, "id", vobject_id);
								cache_get_value_name_int(x, "type", type);
								cache_get_value_name(x, "name", name);
								cache_get_value_name_int(x, "modelid", vobject_modelid);
								cache_get_value_name_float(x, "off_x", off_x);
								cache_get_value_name_float(x, "off_y", off_y);
								cache_get_value_name_float(x, "off_z", off_z);
								cache_get_value_name_float(x, "rot_x", rot_x);
								cache_get_value_name_float(x, "rot_y", rot_y);
								cache_get_value_name_float(x, "rot_z", rot_z);
								cache_get_value_name_int(x, "attached", attached);
								cache_get_value_name_int(x, "color0", vobject_color0);
								cache_get_value_name_int(x, "color1", vobject_color1);
								cache_get_value_name_int(x, "color2", vobject_color2);
								cache_get_value_name_int(x, "color3", vobject_color3);
								cache_get_value_name_int(x, "color4", vobject_color4);
								cache_is_value_name_null(x, "text", isnull_text);
								if(!isnull_text) cache_get_value_name(x, "text", text);
								cache_is_value_name_null(x, "font", isnull_font);
								if(!isnull_font) cache_get_value_name(x, "font", font);
								cache_get_value_name_int(x, "fontsize", fontsize);
								cache_get_value_name_int(x, "fontbold", fontbold);
								cache_get_value_name_int(x, "fontcolor", fontcolor);

								//ok
								VEHICLE_OBJECTS[vehicle_id][x][vobject_VALID] = true;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ID] = vobject_id;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_TYPE] = type;
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_NAME], 32, "%s", name);
								VEHICLE_OBJECTS[vehicle_id][x][vobject_MODELID] = vobject_modelid;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][0] = off_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][1] = off_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][2] = off_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][0] = rot_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][1] = rot_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][2] = rot_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ATTACHED] = attached;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][0] = vobject_color0;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][1] = vobject_color1;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][2] = vobject_color2;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][3] = vobject_color3;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][4] = vobject_color4;
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_text_TEXT], 32, "%s", text);
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT], 24, "%s", font);
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT_SIZE] = fontsize;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_BOLD] = fontbold;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT_COLOR] = fontcolor;
								UpdateVehicleAttachedObject(vehicle_id, x, true);
							}
							//loaded
							SetVehicleToRespawnEx(vehicle_id);
							//loaded
						}
					}
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vobjects WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU_VOBJECTS);
					MySQL_TQueryInline(srp_db, using inline OnVobjectsLoad, QUERY_BUFFER);
				}
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pvehicles WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db, using inline OnPlayerVehiclesLoad, QUERY_BUFFER);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
		
		GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
		GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
		GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
		GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
		GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = 0;//GetVehicleVirtualWorld(i);
		
		mysql_format
		(
			srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
			"\
				UPDATE pvehicles SET \
					id_player = %d,\
					plate = '%e',\
					modelid = %d,\
					spawn_x = %f,\
					spawn_y = %f,\
					spawn_z = %f,\
					spawn_angle = %f,\
					health = %f,\
					damage_panels = %d,\
					damage_doors = %d,\
					damage_lights = %d,\
					damage_tires = %d,\
					color1 = %d,\
					color2 = %d,\
					paintjob = %d,\
					gas = %f,\
					max_gas = %f,\
					closed = %d,\
					interior = %d,\
					world = %d,\
					state = %d,\
					slot0 = %d,\
					slot1 = %d,\
					slot2 = %d,\
					slot3 = %d,\
					slot4 = %d,\
					slot5 = %d,\
					slot6 = %d,\
					slot7 = %d,\
					slot8 = %d,\
					slot9 = %d,\
					slot10 = %d,\
					slot11 = %d,\
					slot12 = %d,\
					slot13 = %d,\
					clamp = %d \
				WHERE id = %d;\
			",
				PLAYER_VEHICLES[i][player_vehicle_OWNER_ID], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], GLOBAL_VEHICLES[i][gb_vehicle_MODELID], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
				GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE], GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
				GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
				GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2], GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB], GLOBAL_VEHICLES[i][gb_vehicle_GAS], GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
				GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR], GLOBAL_VEHICLES[i][gb_vehicle_WORLD], GLOBAL_VEHICLES[i][gb_vehicle_STATE],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13], PLAYER_VEHICLES[i][player_vehicle_CLAMP],

				PLAYER_VEHICLES[i][player_vehicle_ID]
		);
		mysql_tquery(srp_db, QUERY_BUFFER);

		if(destroy) DestroyVehicleEx(i);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}
		
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
		else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		
		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TAXI: ResetVehicleTaxiMeter(vehicleid);
			case WORK_TRUCK, WORK_DELIVERYMAN: ResetTruckInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
			case WORK_PIZZA: ResetPizzaInfo(vehicleid);
		}
	}
	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
    ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, 0);//GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
	UpdateVehicleParams(vehicleid);
	SetClampVehicleLabel(vehicleid);
	return 1;
}

SetClampVehicleLabel(vehicleid) {
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) {
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0) {
			new string[256];
			format(string, sizeof string, "Cepo\nUsa {"#PRIMARY_COLOR"}/pagar {FFFFFF}para pagar la multa por %s$", number_format_thousand(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP]));

			new Float:wX, Float:wY, Float:wZ;
			GetVehicleModelInfo(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_WHEELSREAR, wX, wY, wZ);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(string, -1, wX, wY, wZ, 20.0, .attachedvehicle = vehicleid);
		}
	}
}

UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID, Float:health = 1000.0)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	if(health >= 1000.0) RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return LinkVehicleToInterior(vehicleid, interior);
}

SetVehicleToRespawnEx(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	
	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}
			
			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if(playerid != INVALID_PLAYER_ID)
			{
				if(PI[playerid][ac_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(0, ACCOUNT_INFO[playerid][ac_ID], message);
					if(PI[playerid][ac_PHONE_STATE] == PHONE_STATE_ON)
					{
						if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessageEx(playerid, -1, "{"#PRIMARY_COLOR"}[Nuevo mensaje recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 38350), message);
						}
					}
				}
			}
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
			else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}
    return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
    new towing_vehicle;
	towing_vehicle = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != towing_vehicle)
	{
		if(ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
					return 0;
				}
				
			}
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled])
		{
			if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
			
			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
			
			if(gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if(veh_dis > 20.0 && veh_z > -70.0)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						}
					}
					
					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			} 
		}
		
		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if(spawn_distance < 25.0)
				{
					if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
				}
			}
		}
	}
    return 1;
}

GetPlayerIdFromAccountId(accountid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(ACCOUNT_INFO[i][ac_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

#define NECESSARY_TIME_BETWEEN_WORKS	600 //segundos
CMD:trabajar(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Debes estar a pie.");
	if(PI[playerid][ac_WANTED_LEVEL] > 0) return SendNotification(playerid, "No puedes obtener un trabajo cuando estás en búsqueda.");
	
	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] + NECESSARY_TIME_BETWEEN_WORKS)
	{
		new time = NECESSARY_TIME_BETWEEN_WORKS - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME]);
		SendFormatNotification(playerid, "Debes de esperar %s minutos para conseguir otro trabajo.", TimeConvert(time));
		return 1;
	}

	new player_jobs = CountPlayerJobs(playerid);
	if(ACCOUNT_INFO[playerid][ac_VIP])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendFormatNotification(playerid, "Actualmente tienes ~r~%d trabajos~w~, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendFormatNotification(playerid, "Actualmente tienes ~r~%d trabajos~w~, usa /renunciar para dejar un trabajo.", player_jobs);
			SendFormatNotification(playerid, "¡Los jugadores ~y~VIP~w~ pueden tener hasta %d trabajos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_WORKS);
			return 1;
		}
	}
	
	for(new i = 0; i != E_WORKS; i ++)	
	{
		if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
		
		if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if(work_info[i][work_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
				{
					SendFormatNotification(playerid, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
					return 1;
				}
				
				if(PLAYER_WORKS[playerid][i][pwork_SET])
				{
					SendFormatNotification(playerid, "Ya eres %s.", work_info[i][work_info_NAME]);
					return 1;
				}
				
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", ACCOUNT_INFO[playerid][ac_ID], i);
				mysql_tquery(srp_db, QUERY_BUFFER);
				
				PLAYER_WORKS[playerid][i][pwork_SET] = true;
				PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] = gettime();
				CallLocalFunction("OnPlayerObtainWork", "ii", playerid, i);
				return 1;
			}
		}
	}
	
	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:dimitir(playerid, params[])
{
	new player_jobs = CountPlayerJobs(playerid);
	if(!player_jobs) return SendNotification(playerid, "No tienes ningún trabajo.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	new work;
	if(sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if(PLAYER_WORKS[playerid][i][pwork_SET])
			{
				if(count > 0) strcat(works, "~w~, ");
				
				format(line_str, sizeof line_str, "~b~%s (%d)", work_info[i][work_info_NAME], i);
				strcat(works, line_str);
				
				count ++;
			}
		}
		SendFormatNotification(playerid, "Tus trabajos: ~b~%s", works);
		SendNotification(playerid, "Utiliza ~b~/renunciar~w~ <id del trabajo> para renunciar a un trabajo.");
		return 1;
	}
	
	if(work < 1 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido.");
	
	if(!PLAYER_WORKS[playerid][work][pwork_SET]) return SendFormatNotification(playerid, "No eres %s.", work_info[work][work_info_NAME]);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) return SendNotification(playerid, "Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");
	
	if(work == WORK_POLICE)
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[playerid][ac_ID], work);
		mysql_tquery(srp_db, QUERY_BUFFER);
		PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
	}
	else
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[playerid][ac_ID], work);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	SendFormatNotification(playerid, "Has abandonado tu trabajo de ~b~%s~w~.", work_info[work][work_info_NAME]);
	PLAYER_WORKS[playerid][work][pwork_SET] = false;
	return 1;
}
alias:dimitir("renunciar");

CMD:pagar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] || PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] <= 0) return SendNotification(playerid, "Este vehículo no tiene ninguna multa.");

	if(GivePlayerCash(playerid, -PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP], true, true)) {
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SendNotification(playerid, "Has pagado la multa y se ha quitado el cepo.");
		SetClampVehicleLabel(vehicleid);
	}
	else SendNotification(playerid, "No tienes suficiente dinero para pagar la multa.");
	return 1;
}

CMD:cepo(playerid, params[]) {
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 1) return SendFormatNotification(playerid, "Tienes que ser %s para poder hacer esto.", POLICE_RANKS[1]);

	new price;
	if(sscanf(params, "d", price)) return SendNotification(playerid, "~r~Modo de uso: ~w~/cepo [multa]");
	if(price < 0 || price > 2000) return SendNotification(playerid, "El precio de la multa no es válido.");

	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de un vehículo.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "No puedes multar a este vehículo.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "No puedes multar a este vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price != 0) return SendNotification(playerid, "Este vehículo ya tiene una multa.");

	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price == 0) {
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SetClampVehicleLabel(vehicleid);

		SendNotification(playerid, "Se ha quitado la multa a este vehículo.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	else {
		if(price == 0) return SendNotification(playerid, "El precio de la multa no es válido.");
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) return SendNotification(playerid, "No puedes multar a un vehículo si hay un conductor en él.");

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(vehicleid);

		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = price;
		SetClampVehicleLabel(vehicleid);

		SendNotification(playerid, "Vehículo multado.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	return 1;
}

CMD:abrir(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en tu vehículo o cerca de él para abrirlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
	
	if(!ACCOUNT_INFO[playerid][ac_VIP] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
	{
		SendNotification(playerid, "Este vehículo está bloqueado, desbloquealo con VIP.");
		SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_VEHICLES);
		return 1;
	}
	
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendNotification(playerid, "Las puertas de tu vehículo ya están abiertas.");
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	UpdateVehicleParams(vehicleid);

	SendNotification(playerid, "Has ~g~abierto~w~ las puertas de tu vehículo.");
	Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
	return 1;
}

CMD:cerrar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en tu vehículo o cerca de él para abrirlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendNotification(playerid, "Las puertas de tu vehículo ya están cerradas.");
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);

	SendNotification(playerid, "Has ~r~cerrado~w~ las puertas de tu vehículo.");
	Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
	return 1;
}

CMD:aparcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en tu vehículo para aparcarlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
	
	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	SendNotification(playerid, "Has estacionado tu vehículo, cuando sea destruido volverá a aparecer aquí.");
	return 1;
}
alias:aparcar("estacionar");

CMD:luces(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha apagado las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha apagado las luces de el vehículo.");
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha encendido las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha encendido las luces de el vehículo.");
		}
	}
	else SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) {
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendNotification(playerid, "Debes esperar a que se cargue el camión para arrancar.");
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendNotification(playerid, "Debes esperar a que se descargue el camión para arrancar.");
			}
			
			if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendNotification(playerid, "Termina primero.");
		}
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
		}
		else
		{
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0) {
				SendNotification(playerid, "El vehículo tiene un cepo y no puede arrancar.");
				return 1;
			}
			SendNotification(playerid, "Encendiendo...");
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
		}
	}
	else SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	return 1;
}
alias:motor("arrancar");

forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero el motor está dañado.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] ][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(vehicleid);
	}
	
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha arrancado su vehículo.");
	else Auto_SendPlayerAction(playerid, "ha arrancado el vehículo.");

	SendNotification(playerid, "~h~~g~Encendido");
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);
		
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;
		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit) // Entra
    {
		SendClientMessage(playerid, -1, " ");
		SendNotification(playerid, "Solo puedes tunear vehículos en el mecánico, búscalo con el /GPS.");
		SendClientMessage(playerid, -1, "{ffff35}[ATENCION] {"#SILVER_COLOR"}Si realizas alguna modificación al vehículo en este garaje serás expulsado.");
    }
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
				
				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	}
	
	if(DestroyVehicle(vehicleid))
	{
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		new temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		new temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		new temp_SELL_VEHICLES[SELL_VEHICLES_Enum]; SELL_VEHICLES[vehicleid] = temp_SELL_VEHICLES;
		
		new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;

		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}
		
		return true;
	}
	return false;
}

stock getRandomLetter() 
{
    return 65 + random(25);
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid, 
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);
	
	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO], sizeof PROPERTY_INTERIORS - 1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;
	
	SetPlayerPosEx
	(
		playerid, 
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);
	
	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if(slot == -1)
	{
		SendNotification(playerid, "No hay mas slots.");
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}
	
	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];
	
	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[slot][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[slot][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[slot][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[slot][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[slot][property_PRICE], MULTIPLIER_PROPERITES));
	
	if(PROPERTY_INFO[slot][property_EXTRA]) PROPERTY_INFO[slot][property_PRICE] = 0;
	if(PROPERTY_INFO[slot][property_VIP_LEVEL]) PROPERTY_INFO[slot][property_LEVEL] = 1;
	
	inline OnPropertyInserted()
	{
		PROPERTY_INFO[slot][property_ID] = cache_insert_id();
		CreatePropertyInfo(slot, 0, "", 0, "");

		SendFormatNotification(playerid, "Propiedad creada, id: %d (%d/%d).", PROPERTY_INFO[slot][property_ID], slot, MAX_PROPERTIES);
		ExitPlayerPropertyConstructor(playerid);
	}
	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO properties (ext_x, ext_y, ext_z, ext_angle, ext_interior, ext_freeze, id_interior, price, level, extra, vip_level)\
			VALUES (%f, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d);\
		",
			PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE], 
			PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE], PROPERTY_INFO[slot][property_ID_INTERIOR],
			PROPERTY_INFO[slot][property_PRICE_BASE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_VIP_LEVEL]
	);
	MySQL_TQueryInline(srp_db, using inline OnPropertyInserted, QUERY_BUFFER);
	return 1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}

SpaceFix(text[])
{
	new str[100 + 1]; format(str, sizeof str, "%s", text);
    for(new i = 0; i < strlen(str); i++) 
	{
		if(str[i] == ' ') str[i] = '+';
	}
	return str;
}

GivePlayerDrunkLevel(playerid, amount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + amount);
}

/*RotateDynamicObject(objectid, Float:rotX, Float:rotY, Float:rotZ, Float:Speed)
{
	
		Rotation Speeds:
		0.01 - Very very slow speed
		1.00 - Normal speed
		5.00 - Fast speed
	
	new Float:X, Float:Y, Float:Z;
	new Float:SpeedConverted = floatdiv(floatmul(Speed, 0.01), 2);
	
	if(IsDynamicObjectMoving(objectid)) StopDynamicObject(objectid);
	GetDynamicObjectPos(objectid, X, Y, Z);
	SetDynamicObjectPos(objectid, X, Y, Z + 0.01);
	MoveDynamicObject(objectid, X, Y, Z, SpeedConverted, rotX, rotY, rotZ);
	return 1;
}*/

stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

SendAlertToTaxiDrivers(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, 0xf2f224FF);
				SendClientMessageEx(i, -1, "Hay un nuevo cliente solicitando un taxi, distancia: {"#PRIMARY_COLOR"}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerTaxiMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetTaxiPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_TAXI])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf2f224FF);
				}
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PLAYER_TEMP[i][pt_PLAYER_COLOR]);
		}
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	if(PI[playerid][ac_CREW])
	{
		new crew_index = GetCrewIndexById(PI[playerid][ac_CREW]);
		if(crew_index == -1)
		{
			PI[playerid][ac_CREW] = 0;
			PI[playerid][ac_CREW_RANK] = 0;
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = 0;
			SendNotification(playerid, "La banda a la que pertenecías ya no existe.");

			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = crew_index;
			CREW_INFO[crew_index][crew_ONLINE_MEMBERS] ++;
		}
	}
	return 1;
}

LoadPlayerWorks(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPworksLoad()
	{
		new rows, count;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new work;
				cache_get_value_name_int(i, "id_work", work);
				cache_get_value_name_int(i, "set", PLAYER_WORKS[playerid][work][pwork_SET]);
				cache_get_value_name_int(i, "level", PLAYER_WORKS[playerid][work][pwork_LEVEL]);

				if(PLAYER_WORKS[playerid][work][pwork_SET] && !ACCOUNT_INFO[playerid][ac_VIP])
				{
					if(count >= MAX_NU_WORKS)
					{
						PLAYER_WORKS[playerid][work][pwork_SET] = false;
						if(work == WORK_POLICE)
						{
							mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[playerid][ac_ID], work);
							mysql_tquery(srp_db, QUERY_BUFFER);
							PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
						}
						else
						{
							mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[playerid][ac_ID], work);
							mysql_tquery(srp_db, QUERY_BUFFER);
						}
					}
					count ++;
				}
				
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pworks WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db, using inline OnPworksLoad, QUERY_BUFFER);
	return 1;
}

ResetTruckInfo(vehicleid)
{
	new tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetPizzaInfo(vehicleid)
{
	new tmp_PIZZA_VEHICLE[PIZZA_VEHICLE_Info]; PIZZA_VEHICLE[vehicleid] = tmp_PIZZA_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;
	
	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}

forward TruckLoadUp(playerid, vehicleid);
public TruckLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;
	
	SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}El camión ha sido cargado, dirígite al checkpoint para entregar la mercancía.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

forward TruckUnLoadUp(playerid, vehicleid);
public TruckUnLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;
		
		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	
	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;
	
	SendNotification(playerid, "La mercancía ha sido entregada, regresa al punto de partida para cobrar.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Return_Positions[0], Truck_Return_Positions[1], Truck_Return_Positions[2], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 253.0 + ( PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] * 1.34), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	return 1;
}

CMD:basurero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return SendNotification(playerid, "No eres basurero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -1906.577514, -1756.457519, 22.079319)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_TRASH, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:reparar(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(PI[playerid][ac_MECHANIC_KITS] <= 0) return SendNotification(playerid, "No tienes un kit de reparación, compra uno en el taller.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendNotification(playerid, "El vehículo no está dañado.");

	RepairVehicleEx(vehicleid, playerid, MIN_VEHICLE_HEALTH + 50.0);
	PI[playerid][ac_MECHANIC_KITS] --;
	SendNotification(playerid, "~w~Has usado ~y~1 kit de reparación ~w~para arreglar este vehículo.");
	return 1;
}

CMD:vmenu(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendNotification(playerid, "No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC) return SendNotification(playerid, "No estás de servicio como mecánico.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");
	
	new bool:in_mechanic_area;
	for(new i; i != sizeof Mechanic_Areas; i++)
		if(IsPlayerInDynamicArea(playerid, Mechanic_Areas[i]))
		{
			in_mechanic_area = true;
			break;
		}


	if(!in_mechanic_area)
	{
		SendNotification(playerid, "Para reparar este vehículo tienes que estar en el taller.");
		return 1;
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendNotification(playerid, "Para trabajar sobre el vehículo el motor debe estar apagado.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO] || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "No se puede modificar este vehículo aquí.");
	
	PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECHANIC_MENU);
	return 1;
}

CMD:policia(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 253.280288, 76.219017, 1003.640625) || IsPlayerInRangeOfPoint(playerid, 1.0, 266.547180, 119.652816, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 1.0, 217.816406, 187.667922, 1003.031250))
	{
		if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
		else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		return 1;
	}
	
	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:talar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_SET]) return SendNotification(playerid, "No eres leñador.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_LUMBERJACK)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -527.670349, -97.338562, 63.176174)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_LUMBERJACK, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:mecanico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendNotification(playerid, "No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	for(new i; i != sizeof MechanicStartWorkingCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicStartWorkingCoords[i][0], MechanicStartWorkingCoords[i][1], MechanicStartWorkingCoords[i][2]))
		{
			if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MECHANIC, INVALID_VEHICLE_ID);
			else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);

			return 1;
		}


	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:medico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET]) return SendNotification(playerid, "No eres médico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_HOSPITAL) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -2029.751342, -114.503044, 1035.171875)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MEDIC, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:pizzero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PIZZA][pwork_SET]) return SendNotification(playerid, "No eres pizzero, el trabajo se consigue dentro de la pizzería.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PIZZA)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2097.355712, -1818.040771, 13.382812)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_PIZZA, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:semillas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendNotification(playerid, "No eres agricultor.");
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1566.521606, 31.370532, 24.16406)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	ShowDialog(playerid, DIALOG_SEED_LIST);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendNotification(playerid, "No eres agricultor.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FARMER)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return SendNotification(playerid, "No estás en la zona para plantar, está marcada en el mapa con una bandera.");
	if(PLAYER_TEMP[playerid][pt_PLANTING]) return SendNotification(playerid, "Ahora mismo ya estás plantando algo.");
	
	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] + 60)
	{
		new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME]));
		SendFormatNotification(playerid, "Tienes que esperar %s segundos para volver a plantar.", TimeConvert(time));
		return 1;
	}
	
	if(GetPlayerPlantedPlants(playerid) > 10) return SendNotification(playerid, "Por favor, recoge tus otras plantas para poder plantar más.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			SendNotification(playerid, "Aquí ya hay una planta, aléjate un poco para plantar.");
			return 1;
		}
	}
	
	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:piezas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC][pwork_SET]) return SendNotification(playerid, "No eres mecánico.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	for(new i; i != sizeof MechanicBuyPiecesCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicBuyPiecesCoords[i][0], MechanicBuyPiecesCoords[i][1], MechanicBuyPiecesCoords[i][2]))
		{
			if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/piezas [cantidad]");
			if(params[0] <= 0 || params[0] >= 10000) return SendNotification(playerid, "~r~Modo de uso: ~w~/piezas [cantidad > 0]");

			new price = params[0] * 50;
			if(price > PI[playerid][ac_CASH])
			{
				SendFormatNotification(playerid, "Necesitas %s$ para poder comprar %d piezas.", number_format_thousand(price), params[0]);
				return 1;
			}
			if(price < 0) return 1;

			if(GivePlayerCash(playerid, -price, true, true)) {
				PI[playerid][ac_MECHANIC_PIECES] += params[0];

				SendFormatNotification(playerid, "Has comprado %s piezas por %s$, ahora tienes %s piezas.", number_format_thousand(params[0]), number_format_thousand(price), number_format_thousand(PI[playerid][ac_MECHANIC_PIECES]));
			}
			return 1;
		}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:kit(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	for(new i; i != sizeof MechanicBuyKitsCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MechanicBuyKitsCoords[i][0], MechanicBuyKitsCoords[i][1], MechanicBuyKitsCoords[i][2]))
		{
			if(GivePlayerCash(playerid, -1000, true, true)) {
				PI[playerid][ac_MECHANIC_KITS] += 1;
				SendNotification(playerid, "~w~Has comprado un kit de reparación, para usararlo usa ~y~/reparar ~w~cerca del vehículo que quieras reparar.");
			}
			else SendNotification(playerid, "No tienes suficiente dinero.");
			return 1;
		}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:botiquin(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC) return SendNotification(playerid, "Solo los médicos pueden comprar botiquines.");
	
	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2]))
		{
			if(GivePlayerCash(playerid, -5000, true, true)) {
				PI[playerid][ac_MEDICAL_KITS] += 1;
				SendNotification(playerid, "~w~Has comprado un botiquín, para usararlo usa ~y~/curar ~w~cerca de la persona que quieras curar.");
			}
			else SendNotification(playerid, "No tienes suficiente dinero.");
			return 1;
		}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

Set_HARVEST_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															1,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															5.0, 
															0,
															0,
															playerid
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][2],
															5.0, 
															0,
															0,
															playerid
														);
	}
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_HARVEST;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);
	
	switch(info[0])
	{
		case CHECKPOINT_TYPE_HARVEST:
		{
			if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;
				
				new work_extra_payment;
				if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY] > 0 && work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_HARVESTER][pwork_LEVEL], work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT];
					
					if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				
				new money = minrand(350, 410) + WORK_HARVESTER;
				GivePlayerCash(playerid, money, true, false);
				
				PLAYER_WORKS[playerid][WORK_HARVESTER][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_HARVESTER);
				SendFormatNotification(playerid, "Has ganado %s$ con esta cosecha.", number_format_thousand(money));
				
				CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				return 1;
			}
			
			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1, sizeof(HARVEST_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);
			
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ++;
			Set_HARVEST_Checkpoint(playerid);
		}
		case CHECKPOINT_TYPE_FUMIGATOR:
		{
			if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;
				
				new work_extra_payment;
				if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] > 0 && work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL], work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT];
				
					if(ACCOUNT_INFO[playerid][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				
				new money = minrand(1200, 1500) + work_extra_payment;
				GivePlayerCash(playerid, money, true, false);
				
				PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_FUMIGATOR);
				SendFormatNotification(playerid, "Gracias por fumigar nuestros cielos, has ganado %s$.", number_format_thousand(money));
				
				CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				return 1;
			}
			
			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1, sizeof(FUMIGATOR_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);
			
			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ++;
			Set_FUMIGATOR_Checkpoint(playerid);
		}
		case CHECKPOINT_TYPE_DRIVING_SCHOOL:
		{
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_DRIVING_SCHOOL)
			{
				if(PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] == sizeof(Driving_School_Points) - 1)
				{
					new Float:vhealth;
					GetVehicleHealth(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], vhealth);

					if(vhealth >= 800.0)
					{
						PI[playerid][ac_DRIVE_LICENSE_POINTS] = 12;
						SendNotification(playerid, "¡Felicidades! te has sacado el carnet de conducir, cuentas con 12 puntos.");
					}
					else SendNotification(playerid, "No has superado el examen.");

					if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
					{
						DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
						PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
					}
					PLAYER_TEMP[playerid][pt_DL_EXAM] = false;
					PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] = 0;
					SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					return 1;
				}

				new str[50];
				format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1, sizeof(Driving_School_Points));
				GameTextForPlayer(playerid, str, 2000, 3);
				
				PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ++;
				SetPlayerDrivingSchoolCP(playerid);
			}
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);
	
	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];
	
	if(cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(-1872.575073, -1720.129394, 22.30542, 5.0, 0, 0, playerid, 9999999999.0);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);
	
	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);
	
	PLAYER_TEMP[driver][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[driver][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[driver][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	PLAYER_TEMP[mate][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[mate][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[mate][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	
	KillTimer(PLAYER_TEMP[mate][pt_TIMERS][10]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][2]);
	ClearAnimations(mate);
	TogglePlayerControllableEx(mate, true);
	
	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.0, PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] * 1.3);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	return 1;
}

forward RecycleUp(playerid);
public RecycleUp(playerid)
{
	if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] += 15.0;
		if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 100.0;
		
		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
		PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}
	
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	
	new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;
	
	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;
	
	CreatePlayerFlashObject(
								playerid, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
	
	CreatePlayerFlashObject(
								driver, 
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);
							
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
		SendNotification(playerid, "Sube al camión para volver al vertedero y recibir la paga.");
		SendNotification(driver, "Espera a que se suba tu compañero y vuelve al vertedero para recibir la paga.");
	}
	else SendNotification(playerid, "Sube al camión y sigue con la ruta.");

	SetPlayerTrashCheckpoint(driver, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	
	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CancelLumberjackWork(playerid)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		DestroyDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID]);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_MODELID], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_X], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Y], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Z], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RX], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RY], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RZ], 0, 0);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
	}
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	DestroyPlayerKeyPress(playerid);
	SetPlayerToys(playerid);
	return 1;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = LUMBER_TREES[ tree ][lumber_tree_X];
	pos[1] = LUMBER_TREES[ tree ][lumber_tree_Y];
	pos[2] = LUMBER_TREES[ tree ][lumber_tree_Z];
	
	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));
	
	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);
	
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	
	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = CreateDynamicCP(-504.353912, -88.591995, 62.086818, 5.0, 0, 0, playerid, 9999999999.0);
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_LUMBERJACK;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	SendNotification(playerid, "Ve a llevar la leña al punto marcado para recibir la paga.");
	
	
	LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
	LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
	
	Streamer_Update(playerid);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(LUMBER_TREES[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;
	
	if(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
		LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}
	
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ tree ][lumber_tree_MODELID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], LUMBER_TREES[ tree ][lumber_tree_RZ], 0, 0);
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el árbol.", tree);
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	new caption[48];
	format(caption, sizeof caption, "Inventario de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	new dialog[1800], line_str[128];
	
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Dinero {"#SILVER_COLOR"}(%s$)\n", number_format_thousand(PI[pid][ac_CASH]));
	strcat(dialog, line_str);
	
	if(PI[pid][ac_DRIVE_LICENSE_POINTS])
	{
		format(line_str, sizeof line_str, "Licencia de conducir: {"#SILVER_COLOR"}sí, %d puntos\n", PI[pid][ac_DRIVE_LICENSE_POINTS]);
		strcat(dialog, line_str);
	}
	else
	{
		format(line_str, sizeof line_str, "Licencia de conducir: {"#SILVER_COLOR"}no\n");
		strcat(dialog, line_str);
	}

	if(PI[pid][ac_PHONE_NUMBER])
	{
		format(line_str, sizeof line_str, "Teléfono {"#SILVER_COLOR"}(%d)\n", PI[pid][ac_PHONE_NUMBER]);
		strcat(dialog, line_str);
	}
	
	new toys = CountPlayerToys(pid);
	if(toys > 0)
	{
		format(line_str, sizeof line_str, "Accesorios {"#SILVER_COLOR"}(%d)\n", toys);
		strcat(dialog, line_str);
	}
	
	new pocket_objects = CountPlayerPocketObjects(pid);
	if(pocket_objects > 0)
	{
		format(line_str, sizeof line_str, "Alimentos {"#SILVER_COLOR"}(%d)\n", pocket_objects);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_GPS]) strcat(dialog, "GPS\n");
	if(PI[pid][ac_Maso]) strcat(dialog, "Masa\n");
	if(PI[pid][ac_MP3]) strcat(dialog, "Reproductor MP3\n");
	if(PI[pid][ac_PHONE_RESOLVER]) strcat(dialog, "Guía telefónica\n");
	if(PI[pid][ac_SPEAKERS]) strcat(dialog, "Altavoces\n");
	
	new player_weapons = CountPlayerWeapons(pid);
	if(player_weapons > 0)
	{
		if(PLAYER_WORKS[pid][WORK_POLICE][pwork_SET]) format(line_str, sizeof line_str, "{"#PRIMARY_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		else format(line_str, sizeof line_str, "{"#RED_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_MECHANIC_PIECES] > 0)
	{
		format(line_str, sizeof line_str, "Piezas de mecánico {"#SILVER_COLOR"}(%s)\n", number_format_thousand(PI[pid][ac_MECHANIC_PIECES]));
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_FUEL_DRUM] > 0)
	{
		format(line_str, sizeof line_str, "Bidón de gasolina {"#SILVER_COLOR"}(%d Litros)\n", PI[pid][ac_FUEL_DRUM]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_SEED_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Semillas de medicina {"#SILVER_COLOR"}(%d)\n", PI[pid][ac_SEED_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de marihuana {"#SILVER_COLOR"}(%d)\n", PI[pid][ac_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de coca {"#SILVER_COLOR"}(%d)\n", PI[pid][ac_SEED_CRACK]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Medicamentos {"#SILVER_COLOR"}(%dg)\n", PI[pid][ac_MEDICINE]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Marihuana {"#SILVER_COLOR"}(%dg)\n", PI[pid][ac_CANNABIS]);
		strcat(dialog, line_str);
	}
	
	if(PI[pid][ac_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Crack {"#SILVER_COLOR"}(%dg)\n", PI[pid][ac_CRACK]);
		strcat(dialog, line_str);
	}

	if(PI[pid][ac_MECHANIC_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Kits de reparación (%d)\n", PI[pid][ac_MECHANIC_KITS]);
		strcat(dialog, line_str);
	}

	if(PI[pid][ac_MEDICAL_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Botiquines (%d)\n", PI[pid][ac_MEDICAL_KITS]);
		strcat(dialog, line_str);
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

CountPlayerToys(playerid)
{
	new toys;
	
	for(new i = 0; i != MAX_SU_TOYS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;
	
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}

CountPlayerWeapons(playerid)
{
	new weapons;
	
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, "Experiencia de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	strcat(dialog, "{"#BLUE_COLOR"}CUENTA\n");
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Nivel: {"#PRIMARY_COLOR"}%d\n", PI[pid][ac_LEVEL]);
	strcat(dialog, line_str);
	
	new neccessary_rep = PI[pid][ac_LEVEL] * REP_MULTIPLIER;
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Reputación: {"#PRIMARY_COLOR"}%d/%d\n", PI[pid][ac_REP], neccessary_rep);
	strcat(dialog, line_str);
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Horas de juego: {"#PRIMARY_COLOR"}%.1f horas\n", hours);
	strcat(dialog, line_str);
	
	strcat(dialog, "\n{"#BLUE_COLOR"}TRABAJOS\n");
	
	for(new i = 1; i != sizeof work_info; i ++)
	{
		if(i == WORK_POLICE)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_WORKS[pid][i][pwork_LEVEL]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_WORKS[pid][i][pwork_LEVEL]));
			strcat(dialog, line_str);
		}
	}
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

stock ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
   	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
		
		if(TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if(TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

forward DestroyPlayerFlashObject(playerid, objectid);
public DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

GetVehicleFirstPassenger(vehicleid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(GetPlayerVehicleID(i) == vehicleid)
					{
						return i;
					}
				}
			}
		}
	}
	return INVALID_PLAYER_ID;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	DestroyPlayerKeyPress(playerid);
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

forward GrowPlantUp(plant);
public GrowPlantUp(plant)
{
	if(!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;
	
	if(PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if(PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;
		
		if(PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFFFFFFF);
		}
		
		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{FF7373}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{FF7373}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", plant);
		return 1;
	}
	
	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);
	
	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 300;
	PLANTS[plant][plant_IMMUNITY] = 60;
		
	new label_str[256];
	if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	else format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
	
	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

forward ExpirePlantTime(plant);
public ExpirePlantTime(plant)
{
	if(!PLANTS[plant][plant_VALID]) return 0;
	
	if(PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		new 
			label_str[256];

		PLANTS[plant][plant_EXPIRE_TIME] --;
		PLANTS[plant][plant_IMMUNITY] --;

		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) 
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}
		else 
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {FF7373}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}

		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);
		
		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}
	
	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
	
	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);
	
	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

CMD:recoger(playerid, params[])
{
	if(!IsPlayerInDynamicArea(playerid, Farmer_Area)) return 1;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;
		
		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
		{
			if(PLANTS[i][plant_IMMUNITY] > 0 && PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendFormatNotification(playerid, "Esta planta tiene tiempo de inmunidad.");
			
			KillTimer(PLANTS[i][plant_TIMER]);
			switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE:
				{
					PI[playerid][ac_MEDICINE] += 2;
					SendNotification(playerid, "Has recogido la planta y has obtenido ~g~2 gramos de medicamento~w~.");
				}
				case PLANT_TYPE_CANNABIS:
				{
					PI[playerid][ac_CANNABIS] += 6;
					SendNotification(playerid, "Has recogido la planta y has obtenido ~g~6 gramos de marihuana~w~.");
				}
				case PLANT_TYPE_CRACK:
				{
					PI[playerid][ac_CRACK] += 4;
					SendNotification(playerid, "Has recogido la planta y has obtenido ~g~4 gramos de crack~w~.");
				}
			}
			
			DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
			return 1;
		}
	}
	return 1;
}
	
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInDynamicArea(playerid, Farmer_Area))
	{
		new info[3];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		
		if(info[0] == OBJECT_TYPE_PLANT)
		{
			KillTimer(PLANTS[info[1]][plant_TIMER]);
			
			new Float:pos[3];
			GetDynamicObjectPos(PLANTS[info[1]][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
			CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);
			
			DestroyDynamicObject(PLANTS[info[1]][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[info[1]][plant_LABEL_ID]);
			
			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[info[1]] = tmp_PLANTS;
		}
	}
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	PLAYER_TEMP[playerid][pt_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	
	UpdatePlayer_GPS_Map(playerid);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][3]);
	
	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

forward UpdatePlayer_GPS_Map(playerid);
public UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works
		
	*/
	if(!PLAYER_TEMP[playerid][pt_GPS_MAP]) return KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	
	new Float:pos[3];
	
	switch(ACCOUNT_INFO[playerid][ac_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", -1, 5.0, 5.0, pos[0], pos[1]);
	
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2]; 
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else 
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_NONE:
		{
			if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK, WORK_DELIVERYMAN:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_LUMBERJACK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_PIZZA:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2]; 
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else 
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]); 
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}
	
	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]); 
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	
	if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_TAXI])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;
							
							new Float:player_pos[3];
							switch(PI[i][ac_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf2f224FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_POLICE:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][ac_WANTED_LEVEL] > 0)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(PI[i][ac_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									if(PLAYER_TEMP[i][pt_INTERIOR_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene interior index -1 estando en ROLEPLAY_STATE_INTERIOR");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									if(PLAYER_TEMP[i][pt_PROPERTY_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene property index -1 estando en pt_PROPERTY_INDEX");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", PlayerWantedColor(i), 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MEDIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][ac_STATE] == ROLEPLAY_STATE_CRACK)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0x4aba00FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, const icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y,
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);
	
	if(x > 3000.0) x = 3000.0;
	else if(x < -3000.0) x = -3000.0;
	
	if(y > 3000.0) y = 3000.0;
	else if(y < -3000.0) y = -3000.0;

	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;

	if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}

#define lc_limit_X_WEST 4000.0
#define lc_limit_X_EAST 7500.0
#define lc_limit_Y_NORTH 6900.0
#define lc_limit_Y_SOUTH 4150.0

stock Lc3dTo2d(Float:map_x, Float:map_y, Float:map_size_x, Float:map_size_y, Float:x, Float:y, Float:z, &Float:td_x, &Float:td_y)
{
	#pragma unused z

	/* Map limits */
	if(x > lc_limit_X_EAST) x = lc_limit_X_EAST;
	else if(x < lc_limit_X_WEST) x = lc_limit_X_WEST;

	if(y > lc_limit_Y_NORTH) y = lc_limit_Y_NORTH;
	else if(y < lc_limit_Y_SOUTH) y = lc_limit_Y_SOUTH;

	/* Calculations */
	new Float:map_width = floatsub(lc_limit_X_EAST, lc_limit_X_WEST),
		Float:prop_X = floatdiv(map_size_x, map_width),
		Float:mv_X = floatsub(map_width, lc_limit_X_EAST);

	new Float:map_height = floatsub(lc_limit_Y_SOUTH, lc_limit_Y_NORTH),
		Float:prop_Y = floatdiv(map_size_y, map_height),
		Float:mv_Y = floatsub(map_height, lc_limit_Y_SOUTH);
	
	/* Conversion */
	x += mv_X;
	y += mv_Y;

	/* Result */
	td_x = map_x + floatmul(prop_X, x),
	td_y = map_y + floatmul(prop_Y, y);
	return 1;
}

stock GetIconTextdraw(iconid)
{
	new td_icon[24];
	
	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}
	
	return td_icon;
}

GivePlayerWeaponEx(playerid, weapon_id, ammo)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
	
	SetPlayerWeapon(playerid, WEAPON_INFO[weapon_id][weapon_info_SLOT]);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;
	
	ResetPlayerWeapons(playerid);
	return 1;
}

SetWeaponsForPlayer(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	ResetPlayerWeapons(playerid);

	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_ID] != 0)
		{
			SetPlayerWeapon(playerid, i);
		}
	}
	return 1;
}

SetPlayerWeapon(playerid, slot) {
	if(WEAPON_INFO[ PLAYER_WEAPONS[playerid][slot][player_weapon_ID] ][weapon_info_SPECIAL]) {
		switch(WEAPON_INFO[ PLAYER_WEAPONS[playerid][slot][player_weapon_ID] ][weapon_info_TYPE]) {
			case WEAPON_TASER_GUN: {
				GivePlayerWeapon(playerid, 23, PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO]);
			}
		}
	}
	else {
		if(PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] > 0) GivePlayerWeapon(playerid, PLAYER_WEAPONS[playerid][slot][player_weapon_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO]);
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{	
	if(WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
	if(ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if(GetPlayerWeapon(playerid) != weaponid)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}
	if(ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if(player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}
	if(PI[playerid][ac_CREW])
	{
		if(gettime() > CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_LAST_ATTACK] + 300)
		{
			if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if(IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA]))
				{
					if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][ac_CREW])
					{
						if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING])
						{
							if(gettime() > TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + 300)
							{
								if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
									if(attackers_in_area >= 2) StartTerritoryAttack(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 420);
								}
								else
								{
									if(CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if(!CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{	
											new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
											if(attackers_in_area >= 5) StartTerritoryAttack(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 420);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(damagedid != INVALID_PLAYER_ID)
	{
		if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE && ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_CRACK && ACCOUNT_INFO[playerid][ac_STATE] != ROLEPLAY_STATE_JAIL) {
			if(PLAYER_TEMP[playerid][pt_COMBAT])
			{
				KillTimer(PLAYER_TEMP[playerid][pt_COMBAT_TIMER]);
				PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", playerid);
			}
			else
			{
				PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", playerid);
				PLAYER_TEMP[playerid][pt_COMBAT] = true;

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_COMBAT_MODE]);

				SendNotification(playerid, "Has entrado en modo de combate. Saldrás de este modo en ~r~2 minutos~w~.~n~~n~Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}

		if(PLAYER_TEMP[damagedid][pt_WORKING_IN] != WORK_POLICE && PI[damagedid][ac_STATE] != ROLEPLAY_STATE_CRACK && PI[damagedid][ac_STATE] != ROLEPLAY_STATE_JAIL) {
			if(PLAYER_TEMP[damagedid][pt_COMBAT])
			{
				KillTimer(PLAYER_TEMP[damagedid][pt_COMBAT_TIMER]);
				PLAYER_TEMP[damagedid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", damagedid);
			}
			else
			{
				PLAYER_TEMP[damagedid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 60000 * 2, false, "i", damagedid);
				PLAYER_TEMP[damagedid][pt_COMBAT] = true;

				TextDrawShowForPlayer(damagedid, Textdraws[textdraw_COMBAT_MODE]);

				SendNotification(damagedid, "Has entrado en modo de combate. Saldrás de este modo en ~r~2 minutos~w~.~n~~n~Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}
	}
		
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		if(gettime() > PLAYER_TEMP[playerid][pt_LAST_SAFE_ZONE_WARNING] + 60)
		{
			if(IsPlayerInSafeZone(playerid))
			{
				SendNotification(playerid, "Estás en una zona segura, la policía ha sido avisada de la agresión.");
				
				new city[45], zone[45];
				GetPlayerZones(playerid, city, zone);

				if(!PI[playerid][ac_WANTED_LEVEL]) SetPlayerWantedLevelEx(playerid, 1);

				new message[145];
				format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s está causando disturbios en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
				SendPoliceRadioMessage(-1, -1, message);
				
				PLAYER_TEMP[playerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    return 1;
}

CheckWeaponAndAmmo(playerid, weaponid)
{
	if(WEAPON_INFO[weaponid][weapon_info_ANTI_CHEAT])
	{
		new weapon_id, weapon_ammo;
		GetPlayerWeaponData(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT], weapon_id, weapon_ammo);
		
		if(ac_Info[CHEAT_WEAPON][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY])
			{
				if(weapon_id != PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID])
				{
					if(!ac_Info[CHEAT_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					}
				}
			}
		}
		
		if(WEAPON_INFO[weapon_id][weapon_info_AMMO])
		{
			if(ac_Info[CHEAT_AMMO][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY])
				{
					if(weapon_ammo > PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] + 10)
					{
				
						if(!ac_Info[CHEAT_AMMO][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AMMO][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] ++;
							
							PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AMMO][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						}
					}
					else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = weapon_ammo;
				}
			}
		}
	}
	return 1;
}


new ADMIN_LEVEL_AC_IMMUNITY = 3; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	

	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], player_state = GetPlayerState(playerid);
	
	if(ac_Info[cheat][ac_Kick])
	{	
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(ACCOUNT_INFO[playerid][ac_ID], -1, TYPE_KICK, bad_history);
		
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		
		KickEx(playerid);
		
		if(cheat == CHEAT_PLAYER_HEALTH) PI[playerid][ac_HEALTH] = 20.0;
		if(cheat == CHEAT_PLAYER_ARMOUR) PI[playerid][ac_ARMOUR] = 0.0;
	}
	else
	{
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
	}
	
	SendMessageToAdminsAC(-1, ac_message);
	PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] = gettime();

	return 1;
}

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	inline OnPweaponInserted()
	{
		PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = cache_insert_id();
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pweapons (id_player, weaponid, ammo) VALUES (%d, %d, %d);", ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	MySQL_TQueryInline(srp_db, using inline OnPweaponInserted, QUERY_BUFFER);
	QUERY_BUFFER[0] = EOS;
	return 1;
}

SavePlayerWeaponsData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIST] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;
		
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET weaponid = %d, ammo = %d WHERE id = %d;", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if(db_delete)
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id = %d;", PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	
	new current_weapon = GetPlayerWeapon(playerid);
	if(current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;
	
	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;
	
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, current_weapon);
	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	
	inline OnPweaponsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new weaponid;
				cache_get_value_name_int(i, "weaponid", weaponid);

				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_DB_ID]);
				cache_get_value_name_int(i, "ammo", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO]);
				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_ID] = weaponid;
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pweapons WHERE id_player = %d LIMIT 13;", ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db, using inline OnPweaponsLoad, QUERY_BUFFER);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][ac_HEALTH] = health;
	SetPlayerHealth(playerid, PI[playerid][ac_HEALTH]);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][ac_ARMOUR] = armour;
	SetPlayerArmour(playerid, PI[playerid][ac_ARMOUR]);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][ac_HEALTH] += health;
	if(PI[playerid][ac_HEALTH] > 100.0) PI[playerid][ac_HEALTH] = 100.0;
	SetPlayerHealth(playerid, PI[playerid][ac_HEALTH]);
	return 1;
}

GivePlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	
	PI[playerid][ac_ARMOUR] += armour;
	if(PI[playerid][ac_ARMOUR] > 100.0) PI[playerid][ac_ARMOUR] = 100.0;
	SetPlayerArmour(playerid, PI[playerid][ac_ARMOUR]);
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET id_player = %d WHERE id = %d;", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	SetWeaponsForPlayer(to_playerid);
	
	RemovePlayerSlotWeapon(from_playerid, slot);
	return 1;
}

PlayerPayday(playerid)
{
	new 
		dialog_body[80],
		dialog_header[630],
		dialog_string[140],
		date[24],
		money = 300 * ACCOUNT_INFO[playerid][ac_LEVEL];

	if(money > 4500) money = 4500;
	money += minrand(100, 200);
	
	getDateTime(date);

	format(dialog_body, sizeof dialog_body, "{ABD9C6}Pago diario (%s)", date);

	strcat(dialog_header, "\n{FF6746}____ [ PAGA DEL GOBIERNO ] ____\n");

	format(dialog_string, sizeof dialog_string, "{FFFFFF}Paga del gobierno: {FFFF7F}%s dólares\n", number_format_thousand(money));
	strcat(dialog_header, dialog_string);
	
	if(!ACCOUNT_INFO[playerid][ac_VIP])
	{
		strcat(dialog_header, "\n\n{FF6746}____ [ VEHÍCULOS ] ____\n");

		for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
		{
			if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
			if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
			
			new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100;
			money -= veh_money;
			
			format(dialog_string, sizeof dialog_string, "{FFFFFF}Seguro del vehículo %s: {FF6746}-%s dólares\n", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
			strcat(dialog_header, dialog_string);
		}

		strcat(dialog_header, "\n\n{FF6746}____ [ PROPIEDADES ] ____\n");
		
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;
		
			if(PROPERTY_INFO[i][property_VIP_LEVEL]) format(dialog_string, sizeof dialog_string, "{FFFFFF}Seguro de la propiedad %s: {FFFF7F}PROPIEDAD VIP, NO SE PAGA SEGURO.\n", PROPERTY_INFO[i][property_NAME]);
			else
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;
				
				format(dialog_string, sizeof dialog_string, "{FFFFFF}Seguro de la propiedad %s: {FF6746}-%s dólares\n", PROPERTY_INFO[i][property_NAME], number_format_thousand(property_money));
			}
			strcat(dialog_header, dialog_string);
		}
	}
	
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		new work_payment;
		if(work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
		}
		
		money += work_payment;

		strcat(dialog_header, "\n\n{FF6746}____ [ TRABAJOS ] ____\n");
		
		format(dialog_string, sizeof dialog_string, "{FFFFFF}Paga por ser policía: {FFFF7F}%s dólares\n", number_format_thousand(work_payment));
		strcat(dialog_header, dialog_string);
	}

	if(PI[playerid][ac_CREW])
	{
		new 
			territories = GetCrewTerritories(PI[playerid][ac_CREW]),
			graffitis = CountCrewGraffitis(PI[playerid][ac_CREW]);

		if(territories > 0 || graffitis > 0)
		{
			money += territories * 70;
			money += graffitis * 40;

			strcat(dialog_header, "\n\n{FF6746}____ [ TERRITORIOS ] ____\n");

			if(territories > 0) format(dialog_string, sizeof dialog_string, "{FFFFFF}Paga por territorios en posesión (%d): {FFFF7F}%d dólares\n", territories, territories * 70);
			if(graffitis > 0) format(dialog_string, sizeof dialog_string, "{FFFFFF}Paga por graffitis (%d): {FFFF7F}%d dólares\n", graffitis, graffitis * 40);
			strcat(dialog_header, dialog_string);
		}
	}
	
	if(money + PI[playerid][ac_CASH] <= 0)
	{
		money = 0;
		PI[playerid][ac_CASH] = 0;
	}

	strcat(dialog_header, "\n\n{FF6746}____ [ RESUMEN ] ____\n");

	if(money > 0) format(dialog_string, sizeof dialog_string, "{FFFFFF}Has ganado: {FFFF7F}%s dólares", number_format_thousand(money));
	else format(dialog_string, sizeof dialog_string, "{FFFFFF}Has perdido: {FF6746}%s dólares", number_format_thousand(money));
	
	strcat(dialog_header, dialog_string);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, dialog_body, dialog_header, "Aceptar", "");
	
	GivePlayerCash(playerid, money, true, money < 0 ? true : false);
	return 1;
}

//Animaciones
//ANIMACIONES
CMD:animaciones(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
alias:animaciones("anims", "acciones");
CMD:parar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rodar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:borracho(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bomba(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:reir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:paja(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:herido(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:comer(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:despedir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:besar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:crack(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:mear(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:sentarse(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:asiento(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:taichi(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:beber(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:boxear(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:saludar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:llorar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:dormir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!GetPlayerInterior(playerid)) return SendNotification(playerid, "Solo puedes hacer esto en un interior");
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rapear(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:astrip(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bailar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");

	switch(params[0])
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:hablar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
    SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;
	
	for(new i = 0; i != max_slots; i ++)
	{
		if(!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

RegisterVehicleBootObject(vehicleid, boot_slot, type, int, extra)
{
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = false;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = type;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = int;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = extra;
	
	inline OnVbootInserted()
	{
		VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = cache_insert_id();
		if(VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID]) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO vboot (id_vehicle, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	MySQL_TQueryInline(srp_db, using inline OnVbootInserted, QUERY_BUFFER);
	return 1;
}

SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

GetPropertyAvaibleClosetSlot(index)
{
	new max_slots = MAX_CLOSET_SLOTS;
	for(new i = 0; i != max_slots; i ++)
	{
		if(!PROPERTY_CLOSET[index][i][property_closet_VALID]) return i;
	}
	return -1;
}

RegisterPropertyClosetObject(index, closet_slot, type, int, extra)
{
	PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = false;
	PROPERTY_CLOSET[index][closet_slot][property_closet_TYPE] = type;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT] = int;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT_EXTRA] = extra;
	
	inline OnPropertyClosetInserted()
	{
		PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID] = cache_insert_id();
		if(PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID]) PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = true;
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO property_closet (id_property, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PROPERTY_INFO[index][property_ID], type, int, extra);
	MySQL_TQueryInline(srp_db, using inline OnPropertyClosetInserted, QUERY_BUFFER);
	return 1;
}

SaveWeaponInPropertyCloset(playerid, weapon_slot, index, closet_slot)
{
	RegisterPropertyClosetObject(index, closet_slot, CLOSET_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

CMD:guardar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man guardar~w~.");

	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_NORMAL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new vehicleid = GetPlayerCameraTargetVehicle(playerid);
		if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de tu vehículo.");
		
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
				
		new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
		if(boot_slot == -1) return SendNotification(playerid, "No tienes suficiente espacio en tu /maletero.");

		if(!strcmp(option, "arma", true))
		{
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "Error: ~b~/guardar arma {FFFFFF}[slot/armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "No tienes ninguna arma en ese slot (/armas).");
				return 1;
			}

			SendFormatNotification(playerid, "Arma ~g~'%s' ~w~guardada en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);

			new string[128];
			format(string, sizeof string, "guarda un(a) %s en el maletero de su vehículo.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			Auto_SendPlayerAction(playerid, string);
			
			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else if(!strcmp(option, "medicamentos", true)) {
			if(extra < 0 || extra > PI[playerid][ac_MEDICINE]) return SendNotification(playerid, "Cantidad incorrecta.");
			
			PI[playerid][ac_MEDICINE] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_MEDICINES, extra, 0);
			
			Auto_SendPlayerAction(playerid, "guarda medicamentos en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "marihuana", true)) {
			if(extra < 0 || extra > PI[playerid][ac_CANNABIS]) return SendNotification(playerid, "Cantidad incorrecta.");
			
			PI[playerid][ac_CANNABIS] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CANNABIS, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda marihuana en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "crack", true)) {
			if(extra < 0 || extra > PI[playerid][ac_CRACK]) return SendNotification(playerid, "Cantidad incorrecta.");
			
			PI[playerid][ac_CRACK] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CRACK, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda crack en el maletero de su vehículo.");
		}
		else SendNotification(playerid, "Error en los parámetros, utilice ~b~/man guardar~w~.");
	}
	else if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "BUG: CMD /guardar (casa), Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Esta no es tu casa");

		new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		if(IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos))
		{
			new closet_slot = GetPropertyAvaibleClosetSlot(index);
			if(closet_slot == -1) return SendNotification(playerid, "No tienes suficiente espacio en tu /armario.");
			
			if(!strcmp(option, "arma", true))
			{
				if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/guardar arma [slot /armas]");
				if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "No tienes ninguna arma en ese slot (/armas).");
					return 1;
				}

				SendFormatNotification(playerid, "Arma ~g~'%s' ~w~guardada en el armario de tu casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

				new string[128];
				format(string, sizeof string, "guarda un(a) %s en el armario de su casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
				Auto_SendPlayerAction(playerid, string);
				
				SaveWeaponInPropertyCloset(playerid, extra, index, closet_slot);
			}
			else if(!strcmp(option, "medicamentos", true)) {
				if(extra < 0 || extra > PI[playerid][ac_MEDICINE]) return SendNotification(playerid, "Cantidad incorrecta.");
				
				PI[playerid][ac_MEDICINE] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_MEDICINES, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda medicamentos en el armario.");
			}
			else if(!strcmp(option, "marihuana", true)) {
				if(extra < 0 || extra > PI[playerid][ac_CANNABIS]) return SendNotification(playerid, "Cantidad incorrecta.");
				
				PI[playerid][ac_CANNABIS] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CANNABIS, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda marihuana en el armario.");
			}
			else if(!strcmp(option, "crack", true)) {
				if(extra < 0 || extra > PI[playerid][ac_CRACK]) return SendNotification(playerid, "Cantidad incorrecta.");
				
				PI[playerid][ac_CRACK] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CRACK, extra, 0);
				
				Auto_SendPlayerAction(playerid, "guarda crack en el armario.");
			}
			else SendNotification(playerid, "Error en los parámetros, utilice ~b~/man guardar~w~.");
		}
		else SendNotification(playerid, "No estás cerca del armario.");
	}
	else SendNotification(playerid, "Ahora no puedes usar este comando.");
	return 1;
}

CMD:maletero(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de tu vehículo.");
	
	if((PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE) && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID])
	{
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este vehiculo es del gobierno o de un consecionario.");
		new pid = -1;
		for(new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PLAYER_TEMP[i][pt_USER_LOGGED] && ACCOUNT_INFO[i][ac_ID] == PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID])
			pid = i;
		}

		if(pid == -1) return SendNotification(playerid, "Error del juego: No se ha podido encontrar al dueño de este vehículo.");
		if(!PLAYER_TEMP[pid][pt_CUFFED]) return SendNotification(playerid, "El dueño de este vehículo debe estar esposado para poder revisar su vehículo.");
		
		PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
		ShowDialog(playerid, DIALOG_VEHICLE_BOOT);

		Auto_SendPlayerAction(playerid, "revisa el maltero del vehículo");
		return 1;
	}

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
		
	PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	return 1;
}
alias:maletero("baul");

SetWantedPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][ac_WANTED_LEVEL] > 0)
				{
					SetPlayerMarkerForPlayer(playerid, i, PlayerWantedColor(i));
				}
			}
		}
	}
	return 1;
}

PlayerWantedColor(playerid)
{
	if(PI[playerid][ac_WANTED_LEVEL] > 0)
	{
		if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return 0x009900ff;
		else
		{
			switch(PI[playerid][ac_WANTED_LEVEL])
			{
				case 1: return 0xfffdbaff;
				case 2: return 0xf7f254ff;
				case 3: return 0xd98900ff;
				case 4: return 0xce4202ff;
				case 5: return 0xff00ffff;
				case 6: return 0x9900ccff;
				default: return 0x9900ccff;
			}
		}
	}
	return PLAYER_COLOR;
}

CMD:nivel(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 2) return SendNotification(playerid, "Los cadetes y soldados rasos no pueden colocar cargos.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "~r~Modo de uso: ~w~/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");
	if(params[1] < 0 || params[1] > 6) return SendNotification(playerid, "~r~Modo de uso: ~w~/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	if(PLAYER_WORKS[params[0]][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Este jugador es policía.");
	if(PI[params[0]][ac_STATE] == ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "Esta persona está en la cárcel.");

	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya. (A más de 100 metros)");

	new 
		action[64],
		message[145];

	if(params[1] == 0)
	{
		format(action, sizeof action, "le quita el nivel de búsqueda a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);

		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#PRIMARY_COLOR"}%s {FFFFFF}ya no es sospechoso.", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[params[0]][pt_RP_NAME]);
		SendFormatNotification(playerid, "Le has removido el nivel de búsqueda a ~r~%s~w~.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	}
	else
	{
		new 
			zone[45], 
			city[45];

		GetPlayerZones(playerid, city, zone);

		format(action, sizeof action, "le pone nivel de búsqueda a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		
		SendFormatNotification(playerid, "Has asignado nivel de búsqueda ~b~%d~w~ a ~r~%s~w~.", params[1], PLAYER_TEMP[params[0]][pt_RP_NAME]);
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#PRIMARY_COLOR"}%s (%d*) {FFFFFF}visto por última vez en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[params[0]][pt_RP_NAME], params[1], city, zone);
	}

	Auto_SendPlayerAction(playerid, action);

	SetPlayerWantedLevelEx(params[0], params[1]);
	SendPoliceRadioMessage(-1, -1, message);
	return 1;
}
alias:nivel("cargos", "c");

CMD:esposar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /esposar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes esposar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para esposar a esta persona tiene que estar depie.");
	if(PI[params[0]][ac_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	
	new oldstate = PI[params[0]][ac_STATE];
	DisablePlayerInjuredMark(params[0]);
	PI[params[0]][ac_STATE] = ROLEPLAY_STATE_NORMAL;
	ApplyAnimation(params[0], "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(params[0]);

	if(PLAYER_TEMP[params[0]][pt_CUFFED])
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		
		new action[64];
		format(action, sizeof action, "le quita las esposas a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	
	if(!PLAYER_TEMP[params[0]][pt_CUFFING])
	{
		if(oldstate == ROLEPLAY_STATE_CRACK) {
			CuffPlayer(params[0]);
		}
		else {
			SendNotification(params[0], "Estás siendo esposado, puedes ~g~/resistirse~w~.");
			SendNotification(playerid, "Estás esposando a esta persona, aún puede resistirse.");
			
			PLAYER_TEMP[params[0]][pt_CUFFED] = false;
			PLAYER_TEMP[params[0]][pt_CUFFING] = true;
			KillTimer(PLAYER_TEMP[params[0]][pt_TIMERS][14]);
			TogglePlayerControllableEx(params[0], false);
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
			PLAYER_TEMP[params[0]][pt_TIMERS][14] = SetTimerEx("CuffPlayer", 6000, false, "i", params[0]);
		}
	}
	return 1;
}

CMD:placa(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /placa [PlayerID/Nombre]");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes enseñarle tu placa a este jugador ahora.");
	
	new action[64];
	format(action, sizeof action, "le enseña su placa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	
	SendClientMessageEx(params[0], -1, "{"#SILVER_COLOR"}%s %c. %s {A9C4E4}[Placa: %d]", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME], PI[playerid][ac_PLACA_PD]);
	return 1;
}

CMD:licencia(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /licencia [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");

	if(PI[playerid][ac_DRIVE_LICENSE_POINTS] == 0) SendFormatNotification(params[0], "~r~%s~w~ no tiene licencia de conducción.", PLAYER_TEMP[playerid][pt_RP_NAME]);
	else
	{
		new action[128];
		format(action, 128, "le muestra su licencia de conducir a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		SendClientMessageEx(params[0], -1, "{"#SILVER_COLOR"}Licencia de conducir de %s, puntos: %d.", PLAYER_TEMP[playerid][pt_RP_NAME], PI[playerid][ac_DRIVE_LICENSE_POINTS]);
	}
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /revisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][ac_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendNotification(playerid, "Para revisar a esta persona tiene que estar esposada.");
	
	ShowPlayerInventory(playerid, params[0]);
	
	new action[64];
	format(action, sizeof action, "revisa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:puntos(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "Error: /puntos [PlayerID/Nombre] [cantidad]");
	if(params[1] < 1 || params[1] > 12) return SendNotification(playerid, "Error: cantidad de puntos no válida.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes quitarle puntos a este jugador ahora.");
	
	PI[params[0]][ac_DRIVE_LICENSE_POINTS] -= params[1];
	if(PI[params[0]][ac_DRIVE_LICENSE_POINTS] < 0) PI[params[0]][ac_DRIVE_LICENSE_POINTS] = 0;
	
	SendFormatNotification(playerid, "Le has quitado ~r~%d puntos~w~ del carnet a %s, ahora tiene ~r~%d puntos~w~.", params[1], PLAYER_TEMP[params[0]][pt_RP_NAME], PI[params[0]][ac_DRIVE_LICENSE_POINTS]);
	SendFormatNotification(params[0], "El policía %s te ha quitado ~r~%d puntos~w~ del carnet de conducir, te quedan ~r~%d puntos~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], params[1], PI[params[0]][ac_DRIVE_LICENSE_POINTS]);
	return 1;
}

CMD:requisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /requisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][ac_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendNotification(playerid, "Para revisar a esta persona tiene que estar esposada.");
	
	DeleteIlegalInv(params[0]);
	
	new action[64];
	format(action, sizeof action, "requisa las pertenencias ilegales de %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:ref(playerid, params[])
{
	if(PI[playerid][ac_CREW]) return Crew_RequestHelp(playerid, PI[playerid][ac_CREW]);

	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	new city[45], zone[45];
	GetPlayerZones(playerid, city, zone);
		
	new message[145];
	format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s %s necesita refuerzos en {"#PRIMARY_COLOR"}%s, %s.", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
	SendPoliceRadioMessage(-1, -1, message);
	return 1;
}
alias:ref("refuerzos");

CMD:control(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No puedes colocar objetos policiales aquí.");
	
	new type;
	if(sscanf(params, "d", type)) return SendNotification(playerid, "~r~Modo de uso: ~w~/control [Tipo 1-5]");
	
	new modelid;
	switch(type)
	{
		case 1: modelid = 1459;
		case 2: modelid = 1238;
		case 3: modelid = 1425;
		case 4: modelid = 3265;
		case 5: modelid = 3091;
		default: return SendNotification(playerid, "Tipo de objeto no válido.");
	}
	
	new index = GetFreePoliceObjectSlot();
	if(index == -1) return SendNotification(playerid, "No se pueden crear más objetos policiales.");
	
	POLICE_OBJECTS[index][police_object_VALID] = true;
	format(POLICE_OBJECTS[index][police_object_USER], 24, "%s", ACCOUNT_INFO[playerid][ac_NAME]);
	
	new Float:pos[3], Float:angle;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));

	POLICE_OBJECTS[index][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, GetPlayerVirtualWorld(playerid), 0);
	Streamer_Update(playerid);
	new info[3];
	info[0] = OBJECT_TYPE_POLICE;
	info[1] = index; // Index
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[index][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = index;
	EditDynamicObject(playerid, POLICE_OBJECTS[index][police_object_OBJECT_ID]);
	
	SendNotification(playerid, "Coloca el objeto, posteriormente puedes usar /econtrol para moverlo o eliminarlo.");
	return 1;
}

CMD:econtrol(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para editar objetos policiales.", POLICE_RANKS[8]);
	
	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No puedes editar objetos policiales aquí.");
	
	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case OBJECT_TYPE_POLICE:
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				CancelEdit(playerid);
				SendNotification(playerid, "No eres policía.");
				return 1;
			}
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
			{
				CancelEdit(playerid);
				SendNotification(playerid, "No estás de servicio como policía.");
				return 1;
			}
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
			{
				CancelEdit(playerid);
				SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
				return 1;
			}
			
			SendFormatNotification(playerid, "Este objeto fue colocado por ~g~%s.~n~~n~~w~ Usa ~g~'ESC'~w~ para borrar el objeto, o usa los controles para moverlo.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
			PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = info[1];
			EditDynamicObject(playerid, objectid);
			return 1;
		}
		default: {
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] == CMD_DEVELOPER) {
				EditDynamicObject(playerid, objectid);
			}
		}
	}
	
	return 1;
}

SetCorrectObjectPos(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(objectid, x, y, z);
	GetDynamicObjectRot(objectid, rx, ry, rz);

	SetDynamicObjectPos(objectid, x, y, z);
	SetDynamicObjectRot(objectid, rx, ry, rz);
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	switch(response)
	{
		case EDIT_RESPONSE_CANCEL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No eres policía.");
						return 1;
					}
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No estás de servicio como policía.");
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
						return 1;
					}
					
					DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
					POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
					POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
					POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
					SendNotification(playerid, "Objeto policial eliminado.");
				}
			}
		}
		case EDIT_RESPONSE_FINAL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
			
			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No eres policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No estás de servicio como policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
						SetCorrectObjectPos(objectid);
						return 1;
					}

					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);

					SendNotification(playerid, "Objeto movido correctamente");

					format(POLICE_OBJECTS[ info[1] ][police_object_USER], 24, "%s", ACCOUNT_INFO[playerid][ac_NAME]);

				}
				case OBJECT_TYPE_TEST: {
					printf("CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f);", Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID), x, y, z, rx, ry, rz);
				}
			}
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "~r~Modo de uso: ~w~/multar [PlayerID/Nombre] [precio$]");
	if(params[1] < 0) return SendNotification(playerid, "El precio no puede ser menor a 0$.");
	else if(params[1] > 100000) return SendNotification(playerid, "El precio no puede ser mayor a 100.000$.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes multar a este jugador ahora.");
	if(PI[params[0]][ac_STATE] == ROLEPLAY_STATE_ARRESTED || PI[params[0]][ac_STATE] == ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "No puedes multar a este jugador ahora.");
	
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_PID] = playerid;
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_IM] = params[1];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);
	
	SendNotification(playerid, "La multa ha sido enviada, espera para ver si el jugador la acepta.");
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	if(params[1] < 1 || params[1] > 2) return SendNotification(playerid, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	params[1] ++;
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");
	if( (params[1] + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendFormatNotification(playerid, "Este vehículo es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes arrestar a este jugador ahora.");
	
	if(PI[params[0]][ac_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED] && PI[params[0]][ac_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Para arrestar a esta persona tiene que estar esposada.");
	
	if(PI[params[0]][ac_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		PI[params[0]][ac_STATE] = ROLEPLAY_STATE_NORMAL;
		
		SendFormatNotification(playerid, "Has soltado a ~r~%s~w~.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		return 1;
	}
	else
	{
		if(PI[params[0]][ac_STATE] == ROLEPLAY_STATE_CRACK) {
			DisablePlayerInjuredMark(params[0]);
			ApplyAnimation(params[0], "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
			ClearAnimations(params[0]);
		}

		PI[params[0]][ac_STATE] = ROLEPLAY_STATE_ARRESTED;
		TogglePlayerControllableEx(params[0], false);
		PutPlayerInVehicleEx(params[0], vehicleid, params[1]);
	}
	return 1;
}


CMD:callsing(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para asignar callsing.", POLICE_RANKS[11]);
	
	if(isnull(params)) return SendNotification(playerid, "Error: /callsing [Texto]");
	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para asignar callsing tienes que estar dentro de un vehículo policial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para asignar callsing tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para asignar callsing tienes que estar dentro de un vehículo policial.");
	
	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(params, 0xCCCCCCCC, -0.7, -1.9, -0.3, 20.0, .attachedvehicle = vehicleid);
	return 1;
}

CMD:m(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");

	if(isnull(params)) return SendNotification(playerid, "Error: /m [Mensaje]");

	new str_text[190];
	format(str_text, 190, "(Megáfono) %s: {FFFFFF}%s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 85);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

CMD:equiparse(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	
	if((IsPlayerInRangeOfPoint(playerid, 2.0, 219.244018, 69.982215, 1005.039062) || IsPlayerInRangeOfPoint(playerid, 2.0, 262.945587, 109.785270, 1004.617187) || IsPlayerInRangeOfPoint(playerid, 2.0, 222.683914, 186.956054, 1003.031250)) && PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		ShowDialog(playerid, DIALOG_POLICE_SHOP);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:entregar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /entregar [PlayerID/Nombre]");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");
	
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(PI[params[0]][ac_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697) || IsPlayerInRangeOfPoint(playerid, 20.0, 6808.6948, 5335.9800 ,14.9625))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][ac_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106) || IsPlayerInRangeOfPoint(playerid, 20.0, 6005.6670, 4917.3179, 23.0543))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][ac_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518) || IsPlayerInRangeOfPoint(playerid, 20.0, 4405.0625, 5969.0493, 59.0018))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][ac_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0]);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:policias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_POLICE_LIST);
	return 1;
}

CMD:entregarse(playerid, params[])
{
	if(PI[playerid][ac_WANTED_LEVEL] <= 0) return SendNotification(playerid, "No tienes cargos.");
	
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 250.049026, 67.635704, 1003.640625))
	{
		PI[playerid][ac_POLICE_JAIL_ID] = 0;
		JailPlayer(playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 246.349716, 118.358116, 1003.218750))
	{
		PI[playerid][ac_POLICE_JAIL_ID] = 1;
		JailPlayer(playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 235.772537, 165.382186, 1003.029968))
	{
		PI[playerid][ac_POLICE_JAIL_ID] = 2;
		JailPlayer(playerid);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:resistirse(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_CUFFING])
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][14]);
		PLAYER_TEMP[playerid][pt_CUFFING] = false;
		TogglePlayerControllableEx(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		Auto_SendPlayerAction(playerid, "se resiste.");
	}
	return 1;
}

forward CuffPlayer(playerid);
public CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_WAITING_MP3_HTTP] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PI[playerid][ac_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);
	
	PLAYER_TEMP[playerid][pt_CUFFED] = true;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	TogglePlayerControllableEx(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_RADIOS);
	return 1;
}

SendPoliceRadioMessage(radio, color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(radio == -1) SendClientMessage(i, color, message);
						else
						{
							if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
							{
								SendClientMessage(i, color, message);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CountPoliceRadioPlayers(radio)
{
	new total;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];
	
	switch(ACCOUNT_INFO[playerid][ac_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Z];
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

    format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}
	
	return 1;
}

SetPlayerWantedLevelEx(playerid, level)
{
	PI[playerid][ac_WANTED_LEVEL] = level;

	if(PI[playerid][ac_WANTED_LEVEL] == 0)
	{
		DisablePlayerPoliceMark(playerid);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	}
	else
	{
		new td_str[24];
		for(new i = 0; i != PI[playerid][ac_WANTED_LEVEL]; i ++) strcat(td_str, "]");
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], td_str);

		PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] = gettime();
	
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
		SetWantedMarkerToPolice(playerid);
	}
	return 1;
}

JailPlayer(playerid, time = 0)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
		
	ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_JAIL;

	if(time)
		PI[playerid][ac_POLICE_JAIL_TIME] = time;
	else
	{	
		if(ACCOUNT_INFO[playerid][ac_VIP]) PI[playerid][ac_POLICE_JAIL_TIME] = 150 * PI[playerid][ac_WANTED_LEVEL];
		else PI[playerid][ac_POLICE_JAIL_TIME] = 300 * PI[playerid][ac_WANTED_LEVEL];
	}

	SetPlayerWantedLevelEx(playerid, 0);
	PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
	SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
	
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
	PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", PI[playerid][ac_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
	
	SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert( PI[playerid][ac_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]) ));
	ResetPlayerWeaponsEx(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerPoliceMark(playerid);
	DeleteIlegalInv(playerid);
	return 1;
}

forward UnjailPlayer(playerid);
public UnjailPlayer(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
	PI[playerid][ac_POLICE_JAIL_TIME] = 0;
	SetPlayerWantedLevelEx(playerid, 0);
	ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_INTERIOR;
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_INT])
		{
			PI[playerid][ac_LOCAL_INTERIOR] = ENTER_EXIT[i][ee_ID];
			PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(playerid, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z], ENTER_EXIT[i][ee_INT_ANGLE] + 180.0, ENTER_EXIT[i][ee_INT_INTERIOR], ENTER_EXIT[i][ee_INT_WORLD], true);
			StopAudioStreamForPlayer(playerid);
			break;
		}
	}
	
	SendFormatNotification(playerid, "Has cumplido tu condena.");
	return 1;
}

DisablePlayerPoliceMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

Crew_RequestHelp(playerid, crew_id)
{
	new
		city[45],
		zone[45],
		crew_message[128];

	GetPlayerZones(playerid, city, zone);

	if(!PLAYER_TEMP[playerid][pt_CREW_HELP])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][ac_CREW] != crew_id) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, 0xDD4C4FFF);
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s está pidiendo refuerzos en %s, %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		PLAYER_TEMP[playerid][pt_CREW_HELP] = true;
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][ac_CREW] != crew_id) continue;
					
					SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s ya no necesita refuerzos.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME]);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		PLAYER_TEMP[playerid][pt_CREW_HELP] = false;
	}
	return 1;
}

SetWantedMarkerToPolice(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;
				
				SetPlayerMarkerForPlayer(i, playerid, PlayerWantedColor(playerid));
			}
		}
	}
	return 1;
}

ShowPlayerStats(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;
	
	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = PI[pid][ac_LEVEL] * REP_MULTIPLIER;
	if(PI[pid][ac_REP] < neccessary_rep)
	{
		new time = (ACCOUNT_INFO[pid][ac_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[pid][pt_TIME_PASSED_LAST_REP])) / 1000;
		if(time < 3) time = 3;
		
		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "/comprarnivel");
	
	new caption[48], dialog[445 + (27 * sizeof(work_info))];
	format(caption, sizeof caption, "Estadísticas de %s", PLAYER_TEMP[pid][pt_RP_NAME]);
	
	format(dialog, sizeof dialog,
		
		"\
			ID: %d\n\
			Nombre: %s\n\
			Correo electrónico: %s\n\
			Fecha registro: %s\n\
			Últ. conexión: %s\n\
			Tiempo jugando: %.1f horas\n\
			Nivel: %d\n\
			Reputación: %d/%d\n\
			Siguiente reputación: %s\n\
			Trabajo(s): %s\n\
			Banda: %s\n\
			Dinero: %s$\n\
			Dinero en banco: %s$\n\
			Monedas "SERVER_COIN": %d\n\
			VIP: %s\n\
			\n\
			Para estadísticas de tus trabajos utiliza /exp.\n\
			Para ver tus pertenencias usa /inv o pulsa N.\n\
			\n\
		",
			
			ACCOUNT_INFO[pid][ac_ID],
			ACCOUNT_INFO[pid][ac_NAME],
			ACCOUNT_INFO[pid][ac_EMAIL],
			ACCOUNT_INFO[pid][ac_REG_DATE],
			ACCOUNT_INFO[pid][ac_LAST_CONNECTION],
			hours,
			ACCOUNT_INFO[pid][ac_LEVEL],
			ACCOUNT_INFO[pid][ac_REP],
			neccessary_rep,
			next_rep,
			getPlayerWorks(pid),
			getPlayerCrew(pid),
			number_format_thousand(PI[pid][ac_CASH]),
			number_format_thousand(PI[pid][ac_BANK_MONEY]),
			PI[pid][ac_COINS],
			getPlayerVip(pid)
			
	);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");	
	return 1;
}

getPlayerCrew(playerid)
{
	new crew[32];
	if(!PI[playerid][ac_CREW]) crew = "ninguna";
	else format(crew, sizeof crew, "%s", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
	return crew;
}

getPlayerVip(playerid)
{
	new vip[16];
	if(!ACCOUNT_INFO[playerid][ac_VIP]) vip = "No";
	else format(vip, sizeof vip, "Sí, VIP (%d)", ACCOUNT_INFO[playerid][ac_VIP]);
	return vip;
}

AddPlayerBadHistory(account_id, by_account_id, type, text[])
{
	new date[24];
	getDateTime(date);
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}

AddPlayerBan(account_id, account_name[], account_ip[], by_account_id, type, text[], days = 0)
{
	new date[24], account_name_fix[24], account_ip_fix[24];
	getDateTime(date);
	format(account_name_fix, 24, "%s", account_name);
	format(account_ip_fix, 16, "%s", account_ip);

	if(!days)
	{
		inline OnBadHistoryInserted1()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history) VALUES ('%e', '%e', %d);", account_name_fix, account_ip_fix, id);
				mysql_tquery(srp_db, QUERY_BUFFER);
			}
		}
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		MySQL_TQueryInline(srp_db, using inline OnBadHistoryInserted1, QUERY_BUFFER);
	}
	else
	{
		inline OnBadHistoryInserted2()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history, expire_date) VALUES ('%e', '%e', %d, DATE_ADD(NOW(), INTERVAL %d DAY));", account_name_fix, account_ip_fix, id, days);
				mysql_tquery(srp_db, QUERY_BUFFER);
			}
		}
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		MySQL_TQueryInline(srp_db, using inline OnBadHistoryInserted2, QUERY_BUFFER);
	}
	return 1;
}

// Comandos admins
CMD:reportar(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] + 5) return SendNotification(playerid, "Cálmate.");
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] = gettime();
	
	new reason[128];
	if(sscanf(params, "us[128]", params[0], reason)) return SendNotification(playerid, "~r~Modo de uso: ~w~/reportar [PlayerID/Nombre] [Razón]");
    if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "Jugador desconectado.");
	
	SendNotification(playerid, "Tu reporte ha sido enviado a los administradores en línea.");
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[REPORTE] {FFFFFF}%s (%d) > %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[params[0]][ac_NAME], params[0], reason);
	SendMessageToAdmins(-1, str);
	return 1;
}

CMD:r(playerid, params[])
{
	new message[128];
	if(sscanf(params, "s[128]", message)) return SendNotification(playerid, "~r~Modo de uso: ~w~/r [MENSAJE]");
	
	if(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] == INVALID_PLAYER_ID || !PLAYER_TEMP[playerid][pt_ADMIN_PM_AID]) return SendNotification(playerid, "Nada para responder.");
	if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_ADMIN_PM_AID])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendNotification(playerid, "El administrador que te envió el mensaje está desconectado.");
		return 1;
	}
	if(gettime() > PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendNotification(playerid, "Has tardado demasiado en responser.");
		return 1;
	}
	
	SendClientMessageEx(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID], -1, "Respuesta de %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, message);
	SendNotification(playerid, "Tu mensaje ha sido enviado al administrador.");
	PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/id [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	
	SendFormatNotification(playerid, "Nombre: '%s'~n~DB-ID: '%d'~n~Playerid: '%d'~n~Nivel: %d~n~Ping: %d", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, ACCOUNT_INFO[to_player][ac_LEVEL], GetPlayerPing(to_player));
	return 1;
}

CMD:admins(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return SendNotification(playerid, "SERVER: Unknown command.");
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:trabajos(playerid)
{
	ShowDialog(playerid, DIALOG_WORKS_TELEPORTS);
	return 1;
}

CMD:getid(playerid, params[])
{
	new findname[24];
	if(sscanf(params, "s[24]", findname)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getid <nombre o parte del nombre>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "connected", connected);
				cache_get_value_name_int(i, "playerid", pid);
				SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE name LIKE '%%%e%%' LIMIT 20;", findname);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:getname(playerid, params[])
{
	new db_id;
	if(sscanf(params, "d", db_id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getname <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "connected", connected);
				cache_get_value_name_int(i, "playerid", pid);
				SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE id = %d LIMIT 20;", db_id);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:aka(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /aka <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(isnull(ACCOUNT_INFO[to_player][ac_IP])) return SendNotification(playerid, "IP no válida.");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			SendFormatNotification(playerid, "AKA de %s (%d):", ACCOUNT_INFO[to_player][ac_NAME], to_player);
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24];
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				SendClientMessageEx(playerid, -1, "Nombre: {f4f442}'%s' {FFFFFF}DB-ID: '%d'", name, id);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM player WHERE ip = '%e' LIMIT 20;", ACCOUNT_INFO[to_player][ac_IP]);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}
alias:aka("cuentas", "multicuentas");

CMD:adv(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /adv <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	
	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_WARNING, reason);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has recibido una advertencia, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	
	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') advertido.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	

	new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) advirtió a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}
alias:adv("advertencia", "san");

CMD:kick(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /kick <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	
	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_KICK, reason);
	
	new dialog[170];
	format(dialog, sizeof dialog, "Has sido expulsado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') expulsado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) expulsó a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}

CMD:spec(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /spec <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GetPlayerFacingAngle(playerid, p[3]);
		SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), p[0], p[1], p[2], p[3], 0, 0, 0, 0, 0, 0);
		PI[playerid][ac_INTERIOR] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}
	
	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if(IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendNotification(playerid, "Utiliza /specoff para terminar este modo.");
	
	
	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}
alias:spec("specp", "spp");

CMD:specoff(playerid, params[])
{
	SetPlayerInterior(playerid, PI[playerid][ac_INTERIOR]);
	SetPlayerVirtualWorld(playerid, PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD]);
	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	return 1;
}
alias:specoff("listo");

CMD:freeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /freeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	SendFormatNotification(playerid, "Jugador '%s' (%d) congelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, false);
	return 1;
}
alias:freeze("congelar");

CMD:unfreeze(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unfreeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	SendFormatNotification(playerid, "Jugador '%s' (%d) descongelado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	TogglePlayerControllableEx(to_player, true);
	return 1;
}
alias:unfreeze("descongelar");

CMD:pest(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pest <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerStats(playerid, to_player);
	return 1;
}

CMD:pinv(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pinv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerInventory(playerid, to_player);
	return 1;
}

CMD:pexp(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pexp <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	ShowPlayerSkills(playerid, to_player);
	return 1;
}

CMD:parmas(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /parmas <player_id>");
	
	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");
	
	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[to_player][i][player_weapon_VALID]) continue;
		
		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[to_player][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[to_player][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", PLAYER_TEMP[playerid][pt_RP_NAME]);
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "Continuar", "Cerrar");
	return 1;
}

CMD:pbank(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pbank <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(!PI[to_player][ac_BANK_ACCOUNT]) SendNotification(playerid, "El jugador no tiene cuenta bancaria.");
	else SendFormatNotification(playerid, "Cuenta bancaria ID: '%d' Balance: '%s'", PI[to_player][ac_BANK_ACCOUNT], number_format_thousand(PI[to_player][ac_BANK_MONEY]));
	return 1;
}

CMD:unjail(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unjail <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(ACCOUNT_INFO[to_player][ac_STATE] != ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "El jugador no está en el cárcel.");
	
	UnjailPlayer(to_player);
	SendFormatNotification(playerid, "El jugador %s (%d) ahora está en libertad.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	
	
	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:ip(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ip <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	SendFormatNotification(playerid, "IP %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_IP]);
	return 1;
}

CMD:traerveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendNotification(playerid, "~r~Modo de uso:~w~ /traerveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");
	if(GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED]) return SendNotification(playerid, "Vehículo está ocupado.");
		
    new Float:gPos[3];
    GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
    SetVehiclePosEx(to_car, gPos[0] + 2.0, gPos[1], gPos[2]);
    return 1;
}
alias:traerveh("mover", "getveh", "traervehiculo", "traerauto", "getcar");


/*	CMD:gotopos( playerid, params[] )
	{
		new Float:g_x,Float:g_y,Float:g_z,int_id,vw_id;
		if ( sscanf ( params, "p<,>fffdd", g_x, g_y, g_z, int_id,vw_id) ) return 1;
		SetPlayerPosEx(playerid, g_x, g_y, g_z,0.0,int_id,vw_id);
		return 1;
	}
	*/

CMD:gotoveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendNotification(playerid, "~r~Modo de uso:~w~ /gotoveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");
		
    new Float:gPos[3];
    GetVehiclePos(to_car, gPos[0], gPos[1], gPos[2]);
    SetPlayerPosEx(playerid, gPos[0], gPos[1], gPos[2], 0.0, GLOBAL_VEHICLES[to_car][gb_vehicle_INTERIOR], 0);//GLOBAL_VEHICLES[to_car][gb_vehicle_WORLD]);
    return 1;
}
alias:gotoveh("irvehiculo", "gotocar", "iracarro");

CMD:duty(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return SendNotification(playerid, "SERVER: Unknown command.");
	if(PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		SendFormatNotification(playerid, "Ahora no estás de servicio como %s.", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
	}	
	else
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = true;
		SetPlayerNormalColor(playerid);
		
		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}
		
		new label_str[64];
		switch(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
		{
			case 1: format(label_str, sizeof label_str, "{0099FF}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 2: format(label_str, sizeof label_str, "{FFFF00}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 3: format(label_str, sizeof label_str, "{00CC00}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 4: format(label_str, sizeof label_str, "{FFCC00}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
			case 5: format(label_str, sizeof label_str, "{FFFFCC}%s en servicio", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
		}
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = CreateDynamic3DTextLabel(label_str, -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

		if(PLAYER_TEMP[playerid][pt_WORKING_IN]) SendFormatNotification(playerid, "Deberías dejar de estar de servicio como %s para administrar mejor...", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		SendFormatNotification(playerid, "Ahora estás de servicio como %s.", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ]);
	}
	return 1;
}

CMD:goto(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /goto <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);
	
	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);

    SetPlayerCityWeather(playerid);
	
	SendCmdLogToAdmins(playerid, "goto", params);
	return 1;
}
alias:goto("ir");

CMD:get(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /get <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	SetPlayerPosEx(to_player, p[0], p[1], p[2], p[3], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);

    SetPlayerCityWeather(to_player);

	SendCmdLogToAdmins(playerid, "get", params);
	return 1;
}
alias:get("traer");

CMD:unban(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unban <nombre completo o ip>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
				mysql_tquery(srp_db, QUERY_BUFFER);
				
				SendFormatNotification(playerid, "'%s' ha sido desbaneado.", name);
				
				new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) ha desbaneado a '%s'.", ACCOUNT_INFO[playerid][ac_NAME], playerid, name);
				SendMessageToAdmins(-1, str);

				inline OnCountQueryLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						if(crows)
						{
							new id_player;
							cache_get_value_index_int(0, 0, id_player);
							if(id_player) AddPlayerBadHistory(id_player, ACCOUNT_INFO[playerid][ac_ID], TYPE_UNBAN, "/unban");
						}
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e' OR ip = '%e';", name, name);
				MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
			}
			else SendFormatNotification(playerid, "'%s' no está en la lista de baneados.", name);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:jail(playerid, params[])
{
    new to_player, reason[128], time;
    if(sscanf(params, "uds[128]", to_player, time, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /jail <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendNotification(playerid, "Intervalo de minutos incorrecto.");
    if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

    StopAudioStreamForPlayer(to_player);
    CancelEdit(to_player);
    HidePlayerDialog(to_player);
	CallLocalFunction("EndPlayerJob", "iib", to_player, PLAYER_TEMP[to_player][pt_WORKING_IN], true);
    PLAYER_TEMP[to_player][pt_HUNGRY_MESSAGE] = false;
    PLAYER_TEMP[to_player][pt_THIRST_MESSAGE] = false;
    PLAYER_TEMP[to_player][pt_PLAYER_IN_ATM] = false;
    PLAYER_TEMP[to_player][pt_CUFFED] = false;
    PLAYER_TEMP[to_player][pt_CUFFING] = false;
    PLAYER_TEMP[to_player][pt_PLAYER_WAITING_MP3_HTTP] = false;
    if(PLAYER_TEMP[to_player][pt_WANT_TAXI])
    {
        PLAYER_TEMP[to_player][pt_WANT_TAXI] = false;
        DisablePlayerTaxiMark(to_player);
    }
    if(PLAYER_TEMP[to_player][pt_PLAYER_IN_CALL]) EndPhoneCall(to_player);
    if(PLAYER_TEMP[to_player][pt_GPS_MAP]) HidePlayerGpsMap(to_player);

	PI[params[0]][ac_POLICE_JAIL_ID] = 0;
    JailPlayer(to_player, time * 60);
    SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), reason);
    SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

    new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) sancionó a %s (%d): %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
    SendAdminAd(-1, str);
    return 1;
}

CMD:say(playerid, params[])
{
	new 
		to_player, 
		command[128];

	if(sscanf(params, "us[128]", to_player, command)) return SendNotification(playerid, "~r~Modo de uso:~w~ /say <player_id> <comando>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(strfind(command, "/", true) == -1) CallLocalFunction("OnPlayerText", "is", to_player, command);
	else 
	{
		PLAYER_TEMP[to_player][pt_ANTIFLOOD_TALK] = GetTickCount();
		PC_EmulateCommand(to_player, command);
	}

	SendCmdLogToAdmins(playerid, "say", params);
	return 1;
}

CMD:ban(playerid, params[])
{	
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', id: '%d') baneado.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player);
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó a %s (%d): %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}

CMD:cls(playerid,params[])
{	
	for(new i = 0; i != 80; i ++) SendClientMessageToAll(-1, " ");
	
	SendCmdLogToAdmins(playerid, "cls", params);
	return 1;
}
alias:cls("log");

CMD:tban(playerid, params[])
{	
	new to_player, days, reason[128];
	if(sscanf(params, "uds[128]", to_player, days, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /tban <player_id> <dias> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(days <= 0 || days > 9999) return SendNotification(playerid, "~r~Modo de uso:~w~ /ban <player_id> <dias> <razon>");
	
	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);
	
	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, days);
	
	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado por %d días, razón:\n%s\n", days, reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);
	
	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') baneado por %d días.", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, days);
	
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó %d días a %s (%d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}

CMD:setwlevel(playerid, params[]) {
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setwlevel <to_player> <level>");
	SetPlayerWantedLevelEx(to_player, level);
	return 1;
}

CMD:sound(playerid, params[]) {
	new id;
	if(sscanf(params, "d", id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /sound <id>");
	PlayerPlaySound(playerid, id, 0.0, 0.0, 0.0);
	return 1;
}

CMD:anim(playerid, params[]) {
	new animLib[32], animName[32];
	if(sscanf(params, "s[32]s[32]", animLib, animName)) return SendNotification(playerid, "~r~Modo de uso:~w~ /anim <animLib> <animName>");
	ApplyAnimation(playerid, animLib, animName, 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:dban(playerid, params[])
{
	new reason[128], to_account;
	if(sscanf(params, "ds[128]", to_account, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /dban <DB-ID> <razon>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new expire_date[24];
									cache_get_value_name(0, "expire_date", expire_date);
									
									if(isnull(expire_date)) SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);
									SendFormatNotification(playerid, "Jugador (nick: '%s' db_id: '%d') baneado.", name, id);
									
									new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, name, id, reason);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:dtban(playerid, params[])
{
	new reason[128], to_account, days;
	if(sscanf(params, "dds[128]", to_account, days, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /dtban <DB-ID> <dias> <razon>");
	if(days <= 0 || days > 9999) return SendNotification(playerid, "~r~Modo de uso:~w~ /dtban <DB-ID> <dias> <razon>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new expire_date[24];
									cache_get_value_name(0, "expire_date", expire_date);
									
									if(isnull(expire_date)) SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason, days);
									SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d') baneado por %d días.", name, id, days);
					
									new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó %d días a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, name, id, reason);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:rac(playerid, params[])
{
	RespawnGlobalUnoccupiedVehicles();
	SendNotification(playerid, "Todos los vehículos no personales y sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac", params);
	return 1;
}

CMD:rac2(playerid, params[])
{
	RespawnAllUnoccupiedVehicles();
	SendNotification(playerid, "Todos los vehículos sin ocupar han sido re-spawneados.");
	
	SendCmdLogToAdmins(playerid, "rac2", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo.");
	
	SetVehicleToRespawnEx(vehicleid);
	SendFormatNotification(playerid, "Vehículo (%d) re-spawneado.", vehicleid);
	return 1;
}

CMD:pm(playerid, params[])
{
	new to_player, message[128];
	if(sscanf(params, "us[128]", to_player, message)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pm <player_id> <mensaje>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	SendFormatNotification(playerid, "Mensaje enviado a %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, message);
	
	PLAYER_TEMP[to_player][pt_ADMIN_PM_PID] = playerid;
	PLAYER_TEMP[to_player][pt_ADMIN_PM_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_player][pt_ADMIN_PM_TIME] = gettime();
	SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Mensaje de un administrador (/r para responder): {FFFFFF}%s", message);
	
	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:deletead(playerid, params[])
{
	new ad_id;
	if(sscanf(params, "d", ad_id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /deletead <ID>");
	
	inline OnShopChecked()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM shop WHERE id = %d;", ad_id);
				mysql_tquery(srp_db, QUERY_BUFFER);
				SendFormatNotification(playerid, "Anuncio '%d' eliminado.", ad_id);
				SendCmdLogToAdmins(playerid, "deletead", params);
			}
			else SendNotification(playerid, "No se encontro la ID de ese anuncio.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", ad_id);
	MySQL_TQueryInline(srp_db, using inline OnShopChecked, QUERY_BUFFER);
	return 1;
}
alias:deletead("borrarad");

CMD:settime(playerid, params[])
{
	new hour, minute;
	if(sscanf(params, "dd", hour, minute)) return SendNotification(playerid, "~r~Modo de uso:~w~ /settime <hora> <minuto>");
	SetMyWorldTime(hour, minute);
	SendNotification(playerid, "El tiempo se ajustará cuando el reloj avance.");
	SendCmdLogToAdmins(playerid, "settime", params);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weather;
	if(sscanf(params, "d", weather)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setweather <ID>");
	InterpolateWeather(weather);
	SendCmdLogToAdmins(playerid, "setweather", params);
	return 1;
}

CMD:dameadmin(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendNotification(playerid, "SERVER: Unknown command.");
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = 5 WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = 5;
	SendNotification(playerid, "Ok.");
	return 1;
}

CMD:givemod(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /givemod <player_id> <rango>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(level < 0 || level >= sizeof ADMIN_LEVELS) return SendNotification(playerid, "El rango no es válido.");
	if(level > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "No puedes dar este rango por ser un rango superior al tuyo.");
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", level, ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] = level;
	SendClientMessageEx(to_player, -1, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[level]);
	SendFormatNotification(playerid, "El rango administrativo de %s (%d) ahora es %s.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ADMIN_LEVELS[level]);
	
	SendCmdLogToAdmins(playerid, "givemod", params);
	return 1;
}
alias:givemod("staff");

CMD:ac(playerid, params[])
{
	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	return 1;
}

CMD:setthirst(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setthirst <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	PI[to_player][ac_THIRST] = amount;
	SendFormatNotification(playerid, "La hidratación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "setthirst", params);
	return 1;
}
alias:setthirst("setsed");

CMD:sethunger(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /sethungry <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	PI[to_player][ac_HUNGRY] = amount;
	SendFormatNotification(playerid, "La alimentación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "sethunger", params);
	return 1;
}
alias:sethunger("sethambre", "sethungry");

CMD:setgas(playerid, params[])
{
	new Float:val;
	if(sscanf(params, "f", val)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setgas <valor>");
	if(val < 0.0) return SendNotification(playerid, "Valor no válido.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo.");
	
	if(val > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;
	
	SendFormatNotification(playerid, "La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
	
	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:repairveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo.");
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) RepairVehicleEx(vehicleid, playerid);
	else {
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RepairVehicleEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]);
		else RepairVehicleEx(vehicleid);
	}
	SendFormatNotification(playerid, "Vehículo (%d) reparado.", vehicleid);
	
	SendCmdLogToAdmins(playerid, "repairveh", params);
	return 1;
}
alias:repairveh("repararveh");

CMD:sethealth(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /sethealth <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerHealthEx(to_player, amount);
	SendFormatNotification(playerid, "La vida de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "sethealth", params);
	return 1;
}
alias:sethealth("setvida");

CMD:setarmour(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setarmour <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerArmourEx(to_player, amount);
	SendFormatNotification(playerid, "El chaleco de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, amount);
	
	SendCmdLogToAdmins(playerid, "setarmour", params);
	return 1;
}
alias:setarmour("setchaleco");

CMD:setlevel(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /level <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);
	
	ACCOUNT_INFO[to_player][ac_REP] = 1;
	ACCOUNT_INFO[to_player][ac_LEVEL] = level;
	UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);
	
	SendFormatNotification(to_player, "~g~¡Felicidades! ~w~Has subido al nivel %d.", ACCOUNT_INFO[to_player][ac_LEVEL]);
	SetPlayerScore(to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	ACCOUNT_INFO[to_player][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[to_player][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", ACCOUNT_INFO[to_player][ac_TIME_PLAYING], ACCOUNT_INFO[to_player][ac_LEVEL], ACCOUNT_INFO[to_player][ac_REP], TIME_FOR_REP, ACCOUNT_INFO[to_player][ac_PAYDAY_REP], ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);
	PLAYER_TEMP[to_player][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[to_player][ac_TIME_FOR_REP], false, "i", to_player);
	
	SendFormatNotification(playerid, "El nivel de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	
	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}

CMD:setwork(playerid, params[])
{
	new to_player, work, set;
	if(sscanf(params, "udd", to_player, work, set)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setwork <player_id> <work> <set>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido, para verlos usa /works.");
	
	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendNotification(playerid, "No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");
	
	
	new player_jobs = CountPlayerJobs(to_player);
	if(ACCOUNT_INFO[to_player][ac_VIP])
	{
		if(player_jobs >= MAX_SU_WORKS && set)
		{
			SendFormatNotification(playerid, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS && set)
		{
			SendFormatNotification(playerid, "El limite de trabajos para este jugador es %d.", player_jobs);
			return 1;
		}
	}

	if(set)
	{
		if(work == WORK_POLICE)
		{
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", ACCOUNT_INFO[to_player][ac_ID], work);
			mysql_tquery(srp_db, QUERY_BUFFER);

			PI[to_player][ac_PLACA_PD] = random(10000000);
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][ac_PLACA_PD], ACCOUNT_INFO[to_player][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
		else
		{
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", ACCOUNT_INFO[to_player][ac_ID], work);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
	
		PLAYER_WORKS[to_player][work][pwork_SET] = 1;
		SendClientMessageEx(to_player, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has conseguido tu trabajo de %s.", work_info[work][work_info_NAME]);
		SendClientMessage(to_player, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/ayuda trabajos {FFFFFF}para ver como trabajar aquí.");
		
	}
	else
	{
		if(work == WORK_POLICE)
		{
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[to_player][ac_ID], work);
			mysql_tquery(srp_db, QUERY_BUFFER);

			PI[to_player][ac_PLACA_PD] = 0;
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 0;
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][ac_PLACA_PD], ACCOUNT_INFO[to_player][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}
		else
		{
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", ACCOUNT_INFO[to_player][ac_ID], work);
			mysql_tquery(srp_db, QUERY_BUFFER);
		}

		PLAYER_WORKS[to_player][work][pwork_SET] = 0;
		SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	}

	SendFormatNotification(playerid, "El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], ACCOUNT_INFO[to_player][ac_NAME], to_player, set);
	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}

CMD:setworkexp(playerid, params[])
{
	new to_player, work, exp;
	if(sscanf(params, "udd", to_player, work, exp)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setworkexp <player_id> <work, para verlos /works> <exp>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	if(work < 0 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido, para verlos usa /works.");
	
	if(PLAYER_WORKS[to_player][ work ][pwork_SET])
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", exp, ACCOUNT_INFO[to_player][ac_ID], work);
		mysql_tquery(srp_db, QUERY_BUFFER);

		PLAYER_WORKS[to_player][ work ][pwork_LEVEL] = exp;
		SendFormatNotification(playerid, "La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, work_info[ work ][work_info_NAME], exp);
		SendCmdLogToAdmins(playerid, "setworkexp", params);
	}
	else SendNotification(playerid, "El jugador no tiene el trabajo");
	return 1;
}

CMD:setcash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setcash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	SetPlayerCash(to_player, value);
	SendFormatNotification(playerid, "El dinero de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:givecash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /givecash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	GivePlayerCash(to_player, value, true, value < 0 ? true : false);
	SendFormatNotification(playerid, "El jugador %s (%d) ha recibido %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:setbmlevel(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setbmlevel <player_id> <level>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	
	PI[to_player][ac_BLACK_MARKET_LEVEL] = value;
	SendFormatNotification(playerid, "El nivel 'black_market' de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);
	
	SendCmdLogToAdmins(playerid, "setbmlevel", params);
	return 1;
}

CMD:asay(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso:~w~ /asay <message>");
	new str[145]; format(str, 145, "* Admin: %s", params);
	SendClientMessageToAll(0x2587CEFF, str);

	SendCmdLogToAdmins(playerid, "asay", params);
	return 1;
}
alias:asay("global");

CMD:spos(playerid, params[])
{
	new Float:p[4], interior, vw;
	if(sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendNotification(playerid, "~r~Modo de uso:~w~ /spos [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	return 1;
}

GetVehicleModelByName(const vehname[]) {
	new modelid = -1;
	for(new i = 0; i < sizeof VEHICLE_INFO; i ++) {
		if(strfind(VEHICLE_INFO[i][vehicle_info_NAME], vehname, true) != -1) {
			modelid = i + 400;
			break;
		}
	}
	return modelid;
}

CMD:payday(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /payday [Player/Name]");
	PlayerPayday(to_player);
	return 1;
}

CMD:v(playerid, params[])
{
	new modelid, vehname[24], color1 = 1, color2 = 1;
	if(!sscanf(params, "ddd", modelid, color1, color2)) { }
	else if(!sscanf(params, "d", modelid)) { }
	else if(!sscanf(params, "s[24]dd", vehname, color1, color2)) { modelid = GetVehicleModelByName(vehname); }
	else if(!sscanf(params, "s[24]", vehname)) { modelid = GetVehicleModelByName(vehname); }
	else return SendNotification(playerid, "~r~Modo de uso:~w~ /v <modelid/name> <color 1 = 1> <color 2 = 1>");
	
	if(modelid < 400 || modelid > 611) return SendNotification(playerid, "Modelo de vehículo no válido.");
		
	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);
	
	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, vid, 0);

	GLOBAL_VEHICLES[vid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vid);
	
	SendCmdLogToAdmins(playerid, "v", params);
	return 1;
}

CMD:dv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendNotification(playerid, "Error: no estás en ningún vehículo de prueba.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendNotification(playerid, "Error: no estás en ningún vehículo de prueba.");
	
	DestroyVehicleEx(vehicleid);
	SendNotification(playerid, "Vehículo de prueba destruido.");
	return 1;
}

CMD:restart(playerid, params[])
{
	mysql_tquery(srp_db, "UPDATE player SET connected = 0, playerid = 0;");
	SendRconCommand("gmx");
	return 1;
}

CMD:nombre(playerid, params[])
{
	if(CHANGE_NAME_SD_PRICE > PI[playerid][ac_COINS])
	{
		SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder cambiarte el nombre.", CHANGE_NAME_SD_PRICE - PI[playerid][ac_COINS]);
		return 1;
	}

	ShowDialog(playerid, DIALOG_CHANGE_NAME);
	return 1;
}
alias:nombre("cname");

CMD:correo(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_EMAIL);
	return 1;
}
alias:correo("email", "mail");

CMD:setnametemp(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setnametemp <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	if(SetPlayerName(to_player, new_name) == 1) 
	{
		for(new i = 0; i < 24; i++) 
		{
			if(new_name[i] == '_')
			{
				new_name[i] = ' ';
			}
		}

		format(PLAYER_TEMP[to_player][pt_RP_NAME], 24, "%s", new_name);
		SendNotification(playerid, "Nombre cambiado temporalmente.");
	}
	else SendNotification(playerid, "Nombre no válido.");
	return 1;
}

CMD:setnameplayer(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setnameplayer <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SetRolePlayNames(to_player);
	SetPlayerName(to_player, ACCOUNT_INFO[to_player][ac_NAME]);
	SendNotification(playerid, "Nombre cambiado.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setname <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(!IsValidRPName(new_name)) return SendFormatNotification(playerid, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows) SendFormatNotification(playerid, "El nombre '%s' está en uso.", new_name);
			else
			{
				format(PLAYER_TEMP[to_player][pt_NAME], 24, "%s", new_name);
				format(ACCOUNT_INFO[to_player][ac_NAME], 24, "%s", new_name);
				SetRolePlayNames(to_player);
				SetPlayerName(to_player, new_name);
				
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, ACCOUNT_INFO[to_player][ac_ID]);
				mysql_tquery(srp_db, QUERY_BUFFER);
				
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[to_player][ac_ID]) continue;
					
					new label_str[256];
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
							{FFFFFF}Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], ACCOUNT_INFO[to_player][ac_NAME]
					);
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
				
				SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Tu nombre ha sido cambiado a '%s'", new_name);
				SendFormatNotification(playerid, "El nombre del jugador ha sido cambiado a '%s'", new_name);
				
				SendCmdLogToAdmins(playerid, "setname", params);
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	MySQL_TQueryInline(srp_db,  using inline OnInfoQueryLoad, QUERY_BUFFER, "s", params);
	return 1;
}

CMD:exproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendNotification(playerid, "~r~Modo de uso:~w~ /exproperty <id>");
	if(id_property <= 0) return SendNotification(playerid, "~r~Modo de uso:~w~ /exproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");
	
	if(!PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Esta propiedad ya está en venta.");
	
	
	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;
	format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
	
	new info[3];
	UpdateUnnocupiedPropertyLabel(index);
	
	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ index ][property_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	SendFormatNotification(playerid, "Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);
	
	SendCmdLogToAdmins(playerid, "exproperty", params);
	return 1;
}

CMD:gotoproperty(playerid, params[])
{
	new int_type;
	if(sscanf(params, "d", int_type)) return SendNotification(playerid, "~r~Modo de uso:~w~ /gotoproperty <interior>");
	if(int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendFormatNotification(playerid, "Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}
alias:gotoproperty("ircasa");

CMD:setpass(playerid, params[])
{
	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if(sscanf(params, "ds[19]", to_account, new_pass)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setpass <DB-ID> <pass>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);
				if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", name, id, pid);
					else
					{
						new salt[16], salt_ex[16], pass_ex[64 + 1];
						getRandomSalt(salt);
						format(salt_ex, 16, "%s", salt);
						SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);
						
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET salt = '%e', pass = '%e' WHERE id = %d;", salt_ex, pass_ex, id);
						mysql_tquery(srp_db, QUERY_BUFFER);
						
						SendFormatNotification(playerid, "La contraseña de '%s' ahora es: %s", name, new_pass);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:delete(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendNotification(playerid, "~r~Modo de uso:~w~ /delete <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick, su player_id: %d.", name, id, pid);
					else
					{
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM player WHERE id = %d;", id);
						mysql_tquery(srp_db, QUERY_BUFFER);
						
						new ex_properties;
						for(new index = 0; index != MAX_PROPERTIES; index ++)
						{
							if(!PROPERTY_INFO[index][property_VALID]) continue;
							if(!PROPERTY_INFO[index][property_SOLD]) continue;
							if(PROPERTY_INFO[index][property_OWNER_ID] != id) continue;
						
							PROPERTY_INFO[ index ][property_SOLD] = false;
							PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
							format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);
							
							new info[3];
							UpdateUnnocupiedPropertyLabel(index);
							
							DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
							
							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
							info[0] = PICKUP_TYPE_PROPERTY;
							info[1] = index; // Index
							info[2] = 2; // Pickup Exterior
							Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
							
							ex_properties ++;
						}
						
						
						SendFormatNotification(playerid, "CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", name, id);
						if(ex_properties > 0) SendFormatNotification(playerid, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);
						
						new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) ha eliminado el usuario '%s'", ACCOUNT_INFO[playerid][ac_NAME], playerid, name);
						SendMessageToAdmins(-1, str);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

/* PROPERTY CONSTRUCTOR */

CMD:rproperty(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendNotification(playerid, "~r~Modo de uso:~w~ /rproperty <id>");
	if(id_property <= 0) return SendNotification(playerid, "~r~Modo de uso:~w~ /rproperty < id > 0 >");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM properties WHERE id = %d;", PROPERTY_INFO[index][property_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;
	
	TOTAL_PROPERTIES_LOADED --;
	
	SendFormatNotification(playerid, "PROPIEDAD %d ELIMINADA.", id_property);
	SendFormatNotification(playerid, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	
	SendCmdLogToAdmins(playerid, "rproperty", params);
	return 1;
}

CMD:eproperty(playerid, params[])
{
	new id_property, new_int;
	if(sscanf(params, "dddddd", id_property, new_int, PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendNotification(playerid, "~r~Modo de uso:~w~ /eproperty <id> <interior> <nivel> <precio> <vip level> <coins>");
	if(id_property <= 0) return SendNotification(playerid, "ID no válida.");
	
	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");
	
	if(PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Solo se pueden modificar propiedades que están libres.");
	
	if(new_int < 0 || new_int >= sizeof(PROPERTY_INTERIORS)) return SendNotification(playerid, "El interior elegido no es válido.");
	
	PROPERTY_INFO[index][property_ID_INTERIOR] = new_int;
	PROPERTY_INFO[index][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[index][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[index][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[index][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[index][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[index][property_PRICE], MULTIPLIER_PROPERITES));
	
	if(PROPERTY_INFO[index][property_EXTRA]) PROPERTY_INFO[index][property_PRICE] = 0;
	if(PROPERTY_INFO[index][property_VIP_LEVEL]) PROPERTY_INFO[index][property_LEVEL] = 1;
	
	UpdateUnnocupiedPropertyLabel(index);
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_interior = %d, price = %d, level = %d, extra = %d, vip_level = %d WHERE id = %d;", PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_PRICE_BASE], PROPERTY_INFO[index][property_LEVEL], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_VIP_LEVEL], PROPERTY_INFO[index][property_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "eproperty", params);
	return 1;
}

CMD:cproperty(playerid, params[])
{
	if(TOTAL_PROPERTIES_LOADED >= MAX_PROPERTIES) return SendNotification(playerid, "Límite alcanzado.");
	
	if(sscanf(params, "dddd", PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendNotification(playerid, "~r~Modo de uso:~w~ /cproperty <nivel> <precio> <vip level> <coins>");
	
	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);
	
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	
	UpdatePlayerPropertyContructor(playerid);
	return 1;
}

SendChatMessageToAdmins(color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	    if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
	        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 1 && PLAYER_TEMP[i][pt_SEE_ADM_CHAT] /*&& PLAYER_TEMP[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);
}

SendMessageToAdmins(color, const message[], level = 1)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	    if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
	        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > level && PLAYER_TEMP[i][pt_SEE_ADM_LOG] /*&& PLAYER_TEMP[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);

	return 1;
}

SendCmdLogToAdmins(playerid, cmdtext[], params[])
{
	new message[145];
	if(isnull(params)) format(message, sizeof message, "El administrador %s (%d) ha utilizado el comando /%s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext);
	else format(message, sizeof message, "El administrador %s (%d) ha utilizado el comando /%s %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext, params);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	    if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
	        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] >= ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] && PLAYER_TEMP[i][pt_SEE_ACMD_LOG] /*&& PLAYER_TEMP[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, 0xA9C4E4FF, message);
	
	return 1;
}

SendMessageToAdminsAC(color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) 
	    if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
	        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 1 && PLAYER_TEMP[i][pt_SEE_AC_LOG] /*&& PLAYER_TEMP[i][pt_ADMIN_SERVICE]*/)
	            SendClientMessage(i, color, message);
	
	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			DestroyVehicleEx(i);
			continue;
		}
		
		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
	
		SetVehicleToRespawnEx(i);
	}
	return 1;
}



CMD:kill(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK) {
		new now = gettime();
		if(now < PLAYER_TEMP[playerid][pt_DEATH_TIME] + 30)
		{
			new time = 30 - (now - PLAYER_TEMP[playerid][pt_DEATH_TIME]);
			SendFormatNotification(playerid, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
			return 1;
		}
	}

	SetPlayerHealthEx(playerid, 0.0);
	return 1;
}

GetNumberOfPlayersOnThisIP(const test_ip[])
{
	new against_ip[16], ip_count = 0;
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++) 
	{
		if(IsPlayerConnected(x)) 
		{
		    GetPlayerIp(x, against_ip, 16);
		    if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

getRandomSalt(salt[], length = sizeof salt)
{
    for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

ShowPlayerShop(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = true;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 6;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	
	UpdatePlayerShop(playerid);
	SelectTextDrawEx(playerid, 0x00a39bFF);
	return 1;
}

UpdatePlayerShop(playerid)
{
	switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");
			
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			//
			inline OnShopLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != rows; i ++)
					{
						new connected, id_ad, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "id_ad", id_ad);
						cache_get_value_name_int(i, "price", price);
						cache_get_value_name_int(i, "modelid", modelid);
						cache_get_value_name_float(i, "rx", rx);
						cache_get_value_name_float(i, "ry", ry);
						cache_get_value_name_float(i, "rz", rz);
						cache_get_value_name_float(i, "zoom", zoom);
						cache_get_value_name_int(i, "vcol1", vcol1);
						cache_get_value_name_int(i, "vcol2", vcol2);
						PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = id_ad;

						new Float:Td_Pos[2], td_str[64];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
						
						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						MySQL_TQueryInline(srp_db,  using inline OnCountQueryLoad, "SELECT COUNT(id) FROM shop;");
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS id_ad FROM shop INNER JOIN player ON shop.id_player = player.id ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnShopLoad, QUERY_BUFFER);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
			
			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}
			
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrs");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
			
			
			DestroyArticleShopTextDraws(playerid);
			
			//
			inline OnShopLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new td_str[64];
					for(new i = 0; i != rows; i ++)
					{
						new connected, ad_id, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "ad_id", ad_id);
						cache_get_value_name_int(i, "price", price);
						cache_get_value_name_int(i, "modelid", modelid);
						cache_get_value_name_float(i, "rx", rx);
						cache_get_value_name_float(i, "ry", ry);
						cache_get_value_name_float(i, "rz", rz);
						cache_get_value_name_float(i, "zoom", zoom);
						cache_get_value_name_int(i, "vcol1", vcol1);
						cache_get_value_name_int(i, "vcol2", vcol2);
						PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = ad_id;

						new Float:Td_Pos[2];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
						
						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
						MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			new limit1 = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT];
			if(limit1 < 0) limit1 = 0;
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS ad_id FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id_player = %d ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", ACCOUNT_INFO[playerid][ac_ID], limit1, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			MySQL_TQueryInline(srp_db, using inline OnShopLoad, QUERY_BUFFER);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			inline OnShopAdLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new td_str[190];
					if(rows)
					{
						new id, id_player, type, price, text[24], modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2, date[24], connected, name[24], phone_number;
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "id_player", id_player);
						cache_get_value_name_int(0, "type", type);
						cache_get_value_name_int(0, "price", price);
						cache_get_value_name(0, "text", text);
						cache_get_value_name_int(0, "modelid", modelid);
						cache_get_value_name_float(0, "rx", rx);
						cache_get_value_name_float(0, "ry", ry);
						cache_get_value_name_float(0, "rz", rz);
						cache_get_value_name_float(0, "zoom", zoom);
						cache_get_value_name_int(0, "vcol1", vcol1);
						cache_get_value_name_int(0, "vcol2", vcol2);
						cache_get_value_name(0, "date", date);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "phone_number", phone_number);

						if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
						{
							PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
							PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
						}
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
						
						format(td_str, sizeof td_str, "Art¢culo_n|_%d (%s)", id, date);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
						
						switch(type)
						{
							case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_Propiedad~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Veh¢culo~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_Otros~n~Precio:_%s$~n~~n~Descripci¦n:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
						}
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
						
						for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrs");
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);
						
						if(ACCOUNT_INFO[playerid][ac_ID] == id_player)
						{
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
						}

						for(new i = 0; i != 6; i ++)
						{
							PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
						}
						
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
						DestroyArticleShopTextDraws(playerid);
					}
					else
					{
						SendNotification(playerid, "Este anuncio ya no está disponible.");
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					}
				}
				else
				{
					SendNotification(playerid, "Este anuncio ya no está disponible.");
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				}

			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT shop.*, player.connected, player.name, player.phone_number FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id = %d;", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
			MySQL_TQueryInline(srp_db, using inline OnShopAdLoad, QUERY_BUFFER);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);
	
	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = false;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = 0;
	
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 0;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	
	if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
	
	for(new i = 0; i != 6; i ++)
	{
		PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);
	
	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

td_str_legal(const text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{			
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI][pwork_SET]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf2f224FF);
		}
	}

	if(PI[playerid][ac_WANTED_LEVEL] > 0)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_POLICE][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerWantedColor(playerid));
	}
	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x4aba00FF);
	}
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{			
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI][pwork_SET]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf2f224FF);
		}
	}
	
	if(PI[playerid][ac_WANTED_LEVEL] > 0)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_POLICE][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerWantedColor(playerid));
	}
	
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x4aba00FF);
	}
    return 1;
}

GetPlayerPlantedPlants(playerid)
{
	new plants;
	
	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == ACCOUNT_INFO[playerid][ac_ID]) plants ++;
	}
	return plants;
}

forward StartPlayerJob(playerid, work, vehicleid);
public StartPlayerJob(playerid, work, vehicleid)
{
	switch(work)
	{
		case WORK_TAXI:
		{
			SetTaxiPlayerMarkers(playerid);
			ResetVehicleTaxiMeter(vehicleid);
			ShowPlayerTaxiMeter(playerid);
			
			new passenger = GetVehicleFirstPassenger(vehicleid);
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}
				
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], passenger);
			}
		}
		case WORK_TRUCK:
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) SendNotification(playerid, "El camión ya ha entregado la mercancía, ve al punto de partida para cobrar.");
				else SendNotification(playerid, "Ve a entregar la mercancía al punto marcado.");
				
				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
			else SendNotification(playerid, "Para comenzar a trabajar carga el camión en la zona indicada con una flecha amarilla.");
		}
		case WORK_HARVESTER:
		{
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] = 0;
			SendNotification(playerid, "Ve hasta los puntos de control para completar el trabajo.");
			SendNotification(playerid, "Si te bajas de la cosechadora se cancelará el trabajo.");
			Set_HARVEST_Checkpoint(playerid);
		}
		case WORK_FUMIGATOR:
		{	
			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] = 0;
			SendNotification(playerid, "Ve hasta los puntos de control para completar el trabajo.");
			SendNotification(playerid, "Si te bajas del avión se cancelará el trabajo.");
			Set_FUMIGATOR_Checkpoint(playerid);
			
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
			UpdateVehicleParams(vehicleid);
		}
		case WORK_LUMBERJACK:
		{
			PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
			PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
			
			DestroyPlayerKeyPress(playerid);
			DisablePlayerArmedWeapons(playerid);
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
			
			SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Los árboles que puedes talar están repartidos por la zona, si te alejas demasiado el trabajo se cancelará.");
		}
		case WORK_TRASH:
		{
			if(PI[playerid][ac_GENDER] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 16);
				for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_MECHANIC:
		{
			if(PI[playerid][ac_GENDER] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 50);
				for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_POLICE:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s | Nº%d | %c. %s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PI[playerid][ac_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);
			
			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
				PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][pt_POLICE_LABEL] = CreateDynamic3DTextLabel(label_str, 0xCCCCCCCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetWantedPlayerMarkers(playerid);
			SetPlayerSkin(playerid, PI[playerid][ac_POLICE_DUTY]);
		}
		case WORK_PIZZA:
		{
			if(PI[playerid][ac_GENDER] == SEX_MALE)
			{
				SetPlayerSkin(playerid, 155);
				for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
				DisablePlayerArmedWeapons(playerid);
			}
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = 0;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
			SendNotification(playerid, "Para comenzar a repartir súbete a una moto de la pizzería.");
		}
		case WORK_MEDIC:
		{
			if(PI[playerid][ac_GENDER] == SEX_MALE) SetPlayerSkin(playerid, male_medic_skins[ random(sizeof(male_medic_skins)) ]);
			else SetPlayerSkin(playerid, 308);
			for(new i = 0; i != MAX_SU_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetInjuredPlayerMarkers(playerid);
		}
	}
	
	PLAYER_TEMP[playerid][pt_WORKING_IN] = work;
	return 1;
}

forward EndPlayerJob(playerid, work, bool:changeskin);
public EndPlayerJob(playerid, work, bool:changeskin)
{
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
			{
				SetNormalPlayerMarkers(playerid);
				HidePlayerTaxiMeter(playerid);
			}
		}
		case WORK_TRUCK:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					}
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_HARVESTER) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_FUMIGATOR) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_LUMBERJACK: CancelLumberjackWork(playerid);
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
				SetPlayerToys(playerid);
			}
			
			if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
					if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE:
		{
			PLAYER_TEMP[playerid][pt_POLICE_RADIO] = 0;
			
			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_POLICE_LABEL]);
				PLAYER_TEMP[playerid][pt_POLICE_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
				SetPlayerToys(playerid);
				PI[playerid][ac_POLICE_DUTY] = 0;
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MECHANIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_PIZZA:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_DRIVER_AID] == ACCOUNT_INFO[playerid][ac_ID]) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
			{
				DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
				PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
				SetPlayerToys(playerid);
			}
		}
		case WORK_MEDIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][ac_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
	}
	
	EnablePlayerArmedWeapons(playerid);
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][ PLAYER_TEMP[playerid][pt_WORKING_IN] ][pwork_LEVEL], ACCOUNT_INFO[playerid][ac_ID], PLAYER_TEMP[playerid][pt_WORKING_IN]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET])
		{
			if(count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);
			
			count ++;
		}
	}
	
	if(!count) works = "ninguno";
	return works;
}

SetPlayer_Pizza_Checkpoint(playerid, point)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	
	if(point == -1)
	{
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(2096.279785, -1797.436279, 12.982056, 3.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_FINISH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = CreateDynamicActor(minrand(0, 311), PIZZA_DELIVERY_POINT[point][0], PIZZA_DELIVERY_POINT[point][1], PIZZA_DELIVERY_POINT[point][2], PIZZA_DELIVERY_POINT[point][3], .playerid = playerid);
		
		new Float:pos[3];
		pos[0] = PIZZA_DELIVERY_POINT[point][0] + (1.5 * floatsin(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[1] = PIZZA_DELIVERY_POINT[point][1] + (1.5 * floatcos(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[2] = PIZZA_DELIVERY_POINT[point][2];
	
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(pos[0], pos[1], pos[2], 1.0, 0, 0, playerid, 9999999999.0);
		
		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_DEL;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

randomEx(max, exception)
{
	new rand = random(max);
	while(rand == exception)
	{
		rand = random(max);
	}
	return rand;
}

SetPlayerSkillLevels(playerid)
{	
	if(ACCOUNT_INFO[playerid][ac_LEVEL] >= 10)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN,		200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				40);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		500);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 			999);
	}
	else
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	}
	return 1;
}

DeleteIlegalInv(playerid)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET seed_cannabis = 0, seed_crack = 0, cannabis = 0, crack = 0 WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);

		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", ACCOUNT_INFO[playerid][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
		ResetPlayerWeaponsEx(playerid);
	}
	
	PI[playerid][ac_SEED_CANNABIS] = 0;
	PI[playerid][ac_SEED_CRACK] = 0;
	PI[playerid][ac_CANNABIS] = 0;
	PI[playerid][ac_CRACK] = 0;
	return 1;
}

SetInjuredPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][ac_STATE] == ROLEPLAY_STATE_CRACK)
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x4aba00FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMedics(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0x4aba00FF);
			}
		}
	}
	return 1;
}

DisablePlayerInjuredMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "No puedes curar estando herido.");
	if(PI[playerid][ac_CREW] && CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes curar mientras tu banda está en combate.");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/curar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "El jugador no está conectado.");
	if(to_player == playerid) return SendNotification(playerid, "~r~Modo de uso: ~w~/curar [PlayerID/Nombre]");
	
	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");

	if(ACCOUNT_INFO[to_player][ac_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Esta persona no está herida.");
	if(PI[to_player][ac_CREW] && CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes curar a esta persona porque su banda está en combate.");

	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC) {
		if(PI[playerid][ac_MEDICAL_KITS] <= 0) return SendNotification(playerid, "No tienes botiquines para curar a esta persona.");
		else {
			new now = gettime();
			if(PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] > now) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder curar.", PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] - now);
			PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] = now + 300;

			PI[playerid][ac_MEDICAL_KITS] --;
			SendNotification(playerid, "Has usado 1 botiquín para curar a esta persona.");
		}
	}
	
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][16]);
	PLAYER_TEMP[to_player][pt_TIMERS][16] = SetTimerEx("StandUp", 5000, false, "ii", playerid, to_player);
	DisablePlayerInjuredMark(to_player);
	
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);
	return 1;
}

forward StandUp(medic, playerid);
public StandUp(medic, playerid)
{
	if(PLAYER_WORKS[medic][WORK_MEDIC][pwork_SET] && PLAYER_TEMP[medic][pt_WORKING_IN] == WORK_MEDIC) {
		new work_extra_payment;
		if(work_info[WORK_MEDIC][work_info_EXTRA_PAY] > 0 && work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_MEDIC][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL], work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT];
		
			if(ACCOUNT_INFO[medic][ac_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		
		new money = minrand(600, 800) + work_extra_payment;
		GivePlayerCash(medic, money, true, false);
		PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL] ++;
		SendClientMessageEx(medic, -1, "Has salvado la vida de esta persona, has ganado {"#PRIMARY_COLOR"}%s$.", number_format_thousand(money));
	}
	
	ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(playerid);
	if(ACCOUNT_INFO[playerid][ac_VIP]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(playerid, 25.0);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}

CMD:banda(playerid, params[])
{
	if(!PI[playerid][ac_CREW])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Los policías no pueden tener bandas.");
		
		new index = GetAvaibleCrewIndex();
		if(index == -1)
		{
			SendFormatNotification(playerid, "No perteneces a ninguna banda y no se puede crear una porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
			return 1;
		}
		
		ShowDialog(playerid, DIALOG_CREATE_CREW);
		return 1;
	}
	
	ShowDialog(playerid, DIALOG_CREW_MENU);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	if(!PI[playerid][ac_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendNotification(playerid, "No tienes permiso para abandonar territorios.");
	if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] == INVALID_STREAMER_ID) return SendNotification(playerid, "No estás en un territorio de tu banda.");
	if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA])) return SendNotification(playerid, "No estás en un territorio de tu banda.");
	if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][ac_CREW]) return SendNotification(playerid, "No estás en un territorio de tu banda.");			
	if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes abandonar territorios mientras tu banda está en combate.");
	
	PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = PLAYER_TEMP[playerid][pt_LAST_TERRITORY];
	ShowDialog(playerid, DIALOG_CREW_LEAVE_TERRITORY);
	return 1;
}

CMD:invitar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	
	if(!PI[playerid][ac_CREW]) return SendNotification(playerid, "No eres miembro de ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][ac_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendNotification(playerid, "No tienes permiso para invitar personas a la banda.");
	if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes invitar a gente a la banda cuando la banda está en combate.");
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/invitar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "El jugador está desconectado.");
	if(to_player == playerid) return SendNotification(playerid, "Eres tú.");
	
	new members = CountCrewPlayers(PI[playerid][ac_CREW]);
	if(members >= MAX_CREW_MEMBERS) {
		return SendFormatNotification(playerid, "Actualmente la banda cuenta con %d miembros, el límite es de %d miembros.", members, MAX_CREW_MEMBERS);
	}
	
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Esta persona es policía y no puede tener banda.");
	if(PI[to_player][ac_CREW]) return SendNotification(playerid, "Esta persona pertenece a otra banda.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes invitar a este jugador ahora.");
	
	if(gettime() < PLAYER_TEMP[ to_player ][pt_LAST_GOT_CREW] + 600)
	{
		new time = 600 - (gettime() - PLAYER_TEMP[to_player][pt_LAST_GOT_CREW]);
		SendFormatNotification(playerid, "La otra persona debe esperar %s minutos para volver a ser invitada.", TimeConvert(time));
		return 1;
	}
	
	PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] = to_player;
	PLAYER_TEMP[playerid][pt_CREW_INVITE_AID] = ACCOUNT_INFO[to_player][ac_ID];
	SendFormatNotification(playerid, "Quieres invitar a %s a la banda, elige el rango que le ofreces.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
	return 1;
}

CMD:reclutar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "~r~Ahora no puedes usar este comando.");
	
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para reclutar gente.", POLICE_RANKS[11]);
		
		new to_player;
		if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /reclutar [PlayerID/Nombre]");
		if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "~r~El jugador está desconectado.");
		if(to_player == playerid) return SendNotification(playerid, "~r~No puedes invitarte.");
		
		new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "~r~Este jugador no está cerca tuya.");
		if(PI[to_player][ac_CREW]) return SendClientMessage(playerid,-1, "{"#RED_COLOR"}Esta persona pertenece a una banda y no puede ser policía.");
		if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "~r~Éste usuario es miembro.");
		if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "~r~No puedes reclutar a este jugador ahora.");
		
		new player_jobs = CountPlayerJobs(to_player);
		if(ACCOUNT_INFO[to_player][ac_VIP])
		{
			if(player_jobs >= MAX_SU_WORKS)
			{
				SendNotification(playerid, "~r~Esta persona ya tiene trabajo y no puede tener más.");
				return 1;
			}
		}
		else
		{
			if(player_jobs >= MAX_NU_WORKS)
			{
				SendNotification(playerid, "~r~Esta persona ya tiene trabajo y no puede tener más.");
				return 1;
			}
		}
		
		if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendNotification(playerid, "~r~Esta persona no puede unirse porque esta de servicio en su trabajo.");
		
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", ACCOUNT_INFO[to_player][ac_ID], WORK_POLICE);
		mysql_tquery(srp_db, QUERY_BUFFER);

		PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET] = true;
		PLAYER_WORKS[to_player][WORK_POLICE][pwork_LEVEL] = 1;
		
		PI[to_player][ac_PLACA_PD] = random(10000000);
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][ac_PLACA_PD], ACCOUNT_INFO[to_player][ac_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
		
		SendFormatNotification(playerid, "%s ahora es policía.", PLAYER_TEMP[to_player][pt_RP_NAME]);
		SendClientMessage(to_player, -1, "Ahora eres policía.");
	}
	else SendNotification(playerid, "~r~Debes ser miembro de la policía para usar este comando.");
	return 1;
}



GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}


NewCrewRegister(index, playerid)
{
	if(!CREW_INFO[index][crew_VALID]) return 0;
	
	inline OnCrewInserted()
	{
		CREW_INFO[index][crew_ID] = cache_insert_id();
		if(CREW_INFO[index][crew_ID])
		{
			PI[playerid][ac_CREW] = CREW_INFO[index][crew_ID];
			PI[playerid][ac_CREW_RANK] = 0;
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = index;
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[playerid][ac_CREW], PI[playerid][ac_CREW_RANK], ACCOUNT_INFO[playerid][ac_ID]);
			mysql_tquery(srp_db, QUERY_BUFFER);
			RegisterNewCrewRank(index, 0);
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO crews (name, color) VALUES ('%e', %d);", CREW_INFO[index][crew_NAME], CREW_INFO[index][crew_COLOR]);
	MySQL_TQueryInline(srp_db, using inline OnCrewInserted, QUERY_BUFFER);
	return 1;
}

SendMessageToCrewMembers(crew_id, color, const message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
		{
			if(PI[i][ac_CREW] == crew_id)
			{
				SendClientMessage(i, color, message);
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	inline OnCrewRankInserted()
	{
		CREW_RANK_INFO[index][rank][crew_rank_ID] = cache_insert_id();
	}
	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
		"\
			INSERT INTO crew_ranks (id_crew, rank_pos, rank_name, permission0, permission1, permission2, permission3, permission4, permission5, permission6, permission7, permission8, permission9, permission10)\
			VALUES (%d, %d, '%e', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d);\
		",
			CREW_INFO[index][crew_ID], rank, CREW_RANK_INFO[index][rank][crew_rank_NAME], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][0], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][1],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][2], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][3], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][4],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][5], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][6], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][7],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][8], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][9], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][10]
	);
	MySQL_TQueryInline(srp_db, using inline OnCrewRankInserted, QUERY_BUFFER);
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		if(TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);
			
			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;
		
		GangZoneHideForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE]);
	}
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}

stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}

UpdateGangZoneColor(index)
{
	if(TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][ac_CREW])
				{
					GangZoneFlashForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], flash_color);
				}
			}
		}
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][ac_CREW])
				{
					GangZoneShowForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
				}
			}
		}
	}
	return 1;
}

StartTerritoryAttack(crew_index, territory_index, time)
{
	CREW_INFO[crew_index][crew_FIGHTING] = true;
	CREW_INFO[crew_index][crew_LAST_ATTACK] = gettime();
	TERRITORIES[territory_index][territory_WAR] = true;
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = time;
	TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
	UpdateGangZoneColor(territory_index);
	
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);
	
	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	
	if(TERRITORIES[territory_index][territory_OCCUPIED])
	{
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = true;
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' está atacando un territorio de la banda '%s' en %s.", CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}
	else
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}

	new message_police[145];
	format(message_police, sizeof message_police, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][ac_CREW])
			{
				SendClientMessage(i, -1, message);
				if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{	
					if(PI[i][ac_WANTED_LEVEL] < 3)
						SetPlayerWantedLevelEx(i, 3);

					new r, g, b, a;
					HexToRGBA(CREW_INFO[ PLAYER_TEMP[i][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
					SetPlayerColorEx(i, RGBAToHex(r, g, b, 0));
					
					TextDrawShowForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawShowForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
				}
			}
			
			if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
			{
				if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
				{
					SendClientMessage(i, -1, message_police);
				}
			}
		}
	}
	return 1;
}

forward UpdateTerritoryAttack(territory_index);
public UpdateTerritoryAttack(territory_index)
{
	if(!TERRITORIES[territory_index][territory_VALID]) return 1;
	if(!TERRITORIES[territory_index][territory_WAR]) return 1;
	
	if(TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];
		
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];
		
		new r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = RGBAToHex(r, g, b, 135);
		
		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
	
		new label_str[256];
		if(TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPERTIES; i ++)
			{
				if(!PROPERTY_INFO[i][property_VALID]) continue;
				if(!PROPERTY_INFO[i][property_CREW]) continue;
				if(PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;
				
				if(IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];
					
					format
					(
						label_str, 
						sizeof label_str, 
						"\
							Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
							{FFFFFF}Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);
					
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
		}
		
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = %d WHERE id = %d;", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);
		
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;
		
		new prize = minrand(5000, 7525);
		new prize_message[64];
		format(prize_message, sizeof prize_message, "{"#SILVER_COLOR"}Has ganado %d$ por conquistar este territorio.", prize);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][ac_CREW])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if(PI[i][ac_CREW] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize, true, false);
							SendClientMessage(i, -1, prize_message);
						}
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}

		CallLocalFunction("OnCrewCaptureTerritory", "iiii", TERRITORIES[territory_index][territory_CREW_ID], TERRITORIES[territory_index][territory_CREW_INDEX], TERRITORIES[territory_index][territory_ID], territory_index);
		return 1;
	}
	
	
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);
	
	
	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][ac_CREW])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerNormalColor(i);
						
						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}
	
	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][ac_CREW])
			{
				if(PLAYER_TEMP[i][pt_CREW_INDEX] == crew_index)
				{
					if(PI[i][ac_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}
	
LoadServerInfo()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_read), eco_str[256];
	if(ECO)
	{
		fread(ECO, eco_str);
		sscanf(eco_str, "p<,>fffffddd", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE, SU_WORK_EXTRA_PAY, CHANGE_NAME_SD_PRICE);
		fclose(ECO);
	}
	
	
	new File:AC = fopen("SERVER/AC.txt", io_read), ac_str[128], ac_num;
	if(AC)
	{
		while(fread(AC, ac_str))
		{
			if(ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("SERVER/AC.txt", io_write), ac_str[128];
	if(AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

WriteEconomyMultipliers()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_write), eco_str[256];
	if(ECO)
	{
		format(eco_str, sizeof eco_str, "%f,%f,%f,%f,%f,%d,%d,%d", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE, SU_WORK_EXTRA_PAY, CHANGE_NAME_SD_PRICE);
		fwrite(ECO, eco_str);
		fclose(ECO);
	}
	return 1;
}

UpdateEconomy(type = -1)
{
	new label_str[256];
	
	if(type == -1)
	{
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);
			
			if(!PROPERTY_INFO[i][property_SOLD])
			{
				UpdateUnnocupiedPropertyLabel(i);
			}
		}
		
		for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
		{
			if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
			SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);		
		
			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
			if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;
			
			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
								\n\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
								\n\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			else
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str, 
							sizeof label_str, 
							"\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
		}
		
		for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);		
		for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		
		for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
	}
	else
	{
		switch(type)
		{
			case 0:
			{
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);
					
					if(!PROPERTY_INFO[i][property_SOLD])
					{
						UpdateUnnocupiedPropertyLabel(i);
					}
				}
			}
			case 1:
			{
				for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
				{
					if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
					SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);		
					
					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
					if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;
					
					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
										\n\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
										\n\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					else
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str, 
									sizeof label_str, 
									"\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
			case 2:
			{
				for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);		
			}
			case 3:
			{
				for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
			}
			case 4:
			{
				for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
			}
		}
	}
	return 1;
}

CMD:eco(playerid, params[])
{
	ShowDialog(playerid, DIALOG_SERVER_ECO);
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	if(ACCOUNT_INFO[playerid][ac_VIP]) return 0;
	
	inline OnQueryLoadedInline()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU_VEHICLES)
				{
					printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new veh_did;
				cache_get_value_index_int(i, 0, veh_did);

				//
				new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					if(i >= MAX_NU_VEHICLES)
					{
						if(remove)
						{
							if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
							{
								SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
								if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
							}
						}
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
						PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						UpdateVehicleParams(vehicle_id);
					}
				}
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM pvehicles WHERE id_player = %d ORDER BY id DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	MySQL_TQueryInline(srp_db, using inline OnQueryLoadedInline, QUERY_BUFFER);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(total >= MAX_SU_VEHICLES) break;
			
			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		
		if(PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

CMD:vip(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_VIP]) ShowDialog(playerid, DIALOG_SU);
	else ShowDialog(playerid, DIALOG_SU_BUY);
	return 1;
}

CMD:setcoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setcoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	PI[to_player][ac_COINS] = sd;
	SendFormatNotification(to_player, "Ahora tienes ~g~%d "SERVER_COIN"~w~.", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][ac_COINS], ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	SendCmdLogToAdmins(playerid, "setcoins", params);
	return 1;
}

CMD:givecoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendNotification(playerid, "~r~Modo de uso:~w~ /givecoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	PI[to_player][ac_COINS] += sd;
	SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Has comprado %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][ac_COINS], ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	SendCmdLogToAdmins(playerid, "givecoins", params);
	return 1;
}

CMD:setvip(playerid, params[])
{
	new to_player, vip_level, days;
	if(sscanf(params, "udd", to_player, vip_level, days)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setvip <player_id> <vip_level> <dias>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	SetPlayerVip(to_player, vip_level, 0, days);
	
	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}

CheckPlayerSuperUser(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_VIP])
	{
		inline OnInfoQueryLoad()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET vip = 0, vip_expire_date = '0000-00-00 00:00:00' WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
					mysql_tquery(srp_db, QUERY_BUFFER);

					ACCOUNT_INFO[playerid][ac_VIP] = false;
					ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE][0] = EOS;
					SendNotification(playerid, "¡Tu VIP ha expirado! Usa /vip para comprar de nuevo.");
					if(GetPlayerSkin(playerid) == PI[playerid][ac_SKIN]) SetPlayerToys(playerid);
					ReLockPlayerVehicles(playerid, true);
				}
				PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] = gettime();
			}
		}
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE id = %d AND NOW() >= vip_expire_date;", ACCOUNT_INFO[playerid][ac_ID]);
		MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	}
	return 1;
}

CMD:darskin(playerid, params[])
{
    new to_player, skin;
    if(sscanf(params, "ud", to_player, skin)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setskin <player_id> <skin>");
    if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][ac_SKIN] = skin;
    SetPlayerSkin(to_player, PI[to_player][ac_SKIN]);
	
	SendFormatNotification(playerid, "Skin '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, skin);
    return 1;
}
alias:darskin("setskin");

CMD:setfstyle(playerid, params[])
{
    new to_player, style;
    if(sscanf(params, "ud", to_player, style)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setfstyle <player_id> <style>");
    if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][ac_FIGHT_STYLE] = style;
    SetPlayerFightingStyle(to_player, PI[to_player][ac_FIGHT_STYLE]);
	
	SendFormatNotification(playerid, "FStyle '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, style);
    return 1;
}

CMD:ls(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /sendls <player_id>");
    if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	ACCOUNT_INFO[to_player][ac_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][ac_LOCAL_INTERIOR] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][ac_INTERIOR] = 0;
	PI[to_player][ac_POLICE_JAIL_TIME] = 0;
    SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
    SetPlayerCityWeather(to_player);
	SendFormatNotification(playerid, "Jugador '%s (%d)' fue llevado a LS.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}

CMD:lsdb(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendNotification(playerid, "~r~Modo de uso:~w~ /osendls <DB-ID>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ls, su player_id: %d.", name, id, pid);
				else
				{
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET pos_x = 1555.400390, pos_y = -1675.611694, pos_z = 16.195312, angle = 0, state = %d, interior = 0, local_interior = 0, police_jail_time = 0 WHERE id = %d;", ROLEPLAY_STATE_NORMAL, to_account);
					mysql_tquery(srp_db, QUERY_BUFFER);
					SendFormatNotification(playerid, "Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", name, id);
				}
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:vpcar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	
	new to_player, modelid;
	if(sscanf(params, "ud", to_player, modelid)) return SendNotification(playerid, "~r~Modo de uso:~w~ /vpcar <playerid> <modelid>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(modelid < 400 || modelid > 611) return SendNotification(playerid, "Modelo de vehículo no válido.");
	
	new pvehicles = CountPlayerVehicles(to_player);
	if(pvehicles >= MAX_SU_VEHICLES) return SendFormatNotification(playerid, "El jugador no puede tener más vehículos, su límite es %d.", MAX_SU_VEHICLES);
	if(!ACCOUNT_INFO[to_player][ac_VIP])
	{
		if(pvehicles >= MAX_NU_VEHICLES)
		{
			SendFormatNotification(playerid, "El jugador no puede tener más vehículos, su límite es %d.", MAX_NU_VEHICLES);
			return 1;
		}
	}
	
	new Float:pos[4];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(to_player, pos[3]);
	
	new vid = AddPersonalVehicle
	(
		to_player,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS]
	);
	if(!vid) return SendNotification(playerid, "No se pueden añadir más vehículos.");
	
	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}

CMD:revivir(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /revivir <playerid>");
	
	if(ACCOUNT_INFO[to_player][ac_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Esta persona no está herida.");
	
	DisablePlayerInjuredMark(to_player);
	ACCOUNT_INFO[to_player][ac_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(to_player);
	if(ACCOUNT_INFO[to_player][ac_VIP]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(to_player, 25.0);
	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);
	
	SendCmdLogToAdmins(playerid, "revivir", params);
	return 1;
}
alias:revivir("revive");

CMD:tuning(playerid, params[])
{	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás en nigún vehículo.");
	if(ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_CRACK || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_JAIL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 263.592102, 22.960014, 2.170951)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Solo puedes tunear tus vehículos personales.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendNotification(playerid, "Solo puedes tunear tus vehículos personales.");
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "Este vehículo no se puede tunear.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendNotification(playerid, "Debes de ser al menos nivel 2 para tunear vehículos aquí.");
	
	PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = true;
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] = vehicleid;
	
	SetVehiclePosEx(vehicleid, 263.592102, 22.960014, 2.170951);
	SetVehicleZAngle(vehicleid, 0.0);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	UpdateVehicleParams(vehicleid);
	HidePlayerSpeedoMeter(playerid);
	SetCameraBehindPlayer(playerid);

	ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	return 1;
}

stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}

UpdateTuningShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = CreateDynamicPickup(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID], 1, 268.2404, 11.4559, 2.4222, playerid + MAX_PLAYERS, -1, playerid);
	
	new td_str[128];
	format(td_str, sizeof td_str, "Objeto:_%d/%d~n~Precio:_%s$", PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{	
	SetCameraBehindPlayer(playerid);
	
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDrawEx(playerid);
	
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}
		
		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
				case VOBJECT_TYPE_TEXT:
				{
					SetDynamicObjectMaterialText
					(
						VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
						0,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],
						130,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
						0,
						OBJECT_MATERIAL_TEXT_ALIGN_CENTER
					);
				}
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}
		
		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}
	
	PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];
	
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 1, 0, "null", "null");
	
	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid == PLAYER_TEMP[playerid][pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);
					
					SendNotification(playerid, "Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					
					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);
					
					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) || 
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendNotification(playerid, "La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}
					
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendNotification(playerid, "Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;
	
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;
		
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}
	
	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag		= "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 1: // Argentina
		{
			text_flag		= "{1FBEF2}ggg\n{ffffff}ggg\n{1FBEF2}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 2: // Austria
		{
			text_flag		= "{d81e05}ggg\n{ffffff}ggg\n{d81e05}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 3: // Belgica
		{
			text_flag		= "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 4: // Bolivia
		{
			text_flag		= "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 5: // Bulgaria
		{
			text_flag		= "{ffffff}ggg\n{00966e}ggg\n{d62612}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 6: // Chile
		{
			text_flag		= "{04019a}g{ffffff}gg\n{fe0002}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 7: // Colombia
		{
			text_flag		= "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 0;
		}
		case 8: // El Salvador
		{
			text_flag		= "{0f47af}ggg\n{ffffff}ggg\n{0f47af}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 9: // España
		{
			text_flag		= "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 10: // Estonia
		{
			text_flag		= "{3a75c4}ggg\n{000000}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 11: // Francia
		{
			text_flag		= "{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 12: // Guatemala
		{
			text_flag		= "{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 13: // Holanda
		{
			text_flag		= "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 14: // Hungria
		{
			text_flag		= "{d2232c}ggg\n{ffffff}ggg\n{008d46}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 15: // India
		{
			text_flag		= "{ff9933}ggg\n{ffffff}ggg\n{138808}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 16: // Indonesia
		{
			text_flag		= "{ce1126}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 17: // Irlanda
		{
			text_flag		= "{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 18: // Italia
		{
			text_flag		= "{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 19: // Lituania
		{
			text_flag		= "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 20: // Luxemburgo
		{
			text_flag		= "{ef2b2d}ggg\n{ffffff}ggg\n{00a3dd}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 21: // Madagascar
		{
			text_flag		= "{ffffff}g{d11f33}gg\n{ffffff}g{00a651}gg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 22: // Malta
		{
			text_flag		= "{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 23: // Mali
		{
			text_flag		= "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 24: // México
		{
			text_flag		= "{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 25: // Nigeria
		{
			text_flag		= "{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 26: // Panamá
		{
			text_flag		= "{ffffff}g{d21034}g\n{0067c6}g{ffffff}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 0;
		}
		case 27: // Paraguay
		{
			text_flag		= "{d52b1e}ggg\n{ffffff}ggg\n{0038a8}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 28: // Perú
		{
			text_flag		= "{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 29: // Polonia
		{
			text_flag		= "{ffffff}ggg\n{dc143c}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 30: // Rumania
		{
			text_flag		= "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 31: // Rusia
		{
			text_flag		= "{ffffff}ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 32: // Ucrania
		{
			text_flag		= "{3a75c4}ggg\n{f9dd16}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 33: // Venezuela
		{
			text_flag		= "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
	}
	
	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0, 
		0xFFFFFFFF,
		0,
		text_alignment
	);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	inline OnVobjectInserted()
	{
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = cache_insert_id();
	}

	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO vobjects (id_vehicle, type, name, modelid, off_x, off_y, off_z, rot_x, rot_y, rot_z, attached, color0, color1, color2, color3, color4, text, font, fontsize, fontbold, fontcolor)\
			VALUES(%d, %d, '%e', %d, %f, %f, %f, %f, %f, %f, %d, %d, %d, %d, %d, %d, '%e', '%e', %d, %d, %d);\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	MySQL_TQueryInline(srp_db, using inline OnVobjectInserted, QUERY_BUFFER);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	mysql_format
	(
		srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			UPDATE vobjects SET \
				id_vehicle = %d,\
				type = %d,\
				name = '%e',\
				modelid = %d,\
				off_x = %f,\
				off_y = %f,\
				off_z = %f,\
				rot_x = %f,\
				rot_y = %f,\
				rot_z = %f,\
				attached = %d,\
				color0 = %d,\
				color1 = %d,\
				color2 = %d,\
				color3 = %d,\
				color4 = %d,\
				text = '%e',\
				font = '%e',\
				fontsize = %d,\
				fontbold = %d,\
				fontcolor = %d \
			WHERE id = %d;\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],

			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}



GetRulePagePositions(lines, &Float:pos_descripcion, &Float:pos_pages, &Float:pos_title)
{
	new Float:val[3];
	val[0] = 215.0 - (7.0 * (lines - 1) );
	val[1] = val[0] + (13.0 * (lines -1) ) + 20.0;
	val[2] = val[0] - 25.0;
	
	pos_descripcion = val[0];
	pos_pages = val[1];
	pos_title = val[2];
	return 1;
}

SetPlayerRulesTextDraw(playerid, const title[], info[], info_lines, page, total_pages)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}
	
	FixTextDrawString(info);
	
	new Float:pos[3];
	GetRulePagePositions(info_lines, pos[0], pos[1], pos[2]);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = CreatePlayerTextDraw(playerid, 320.000000, pos[2], title);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = CreatePlayerTextDraw(playerid, 320.000000, pos[0], info);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0.314666, 1.442370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = CreatePlayerTextDraw(playerid, 437.000000, pos[1], "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 500.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], true);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = CreatePlayerTextDraw(playerid, 203.000000, pos[1], "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 266.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], true);
	
	if(page == total_pages) PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], "Finalizar");
	new str[12]; format(str, sizeof str, "-_%d/%d_-", page, total_pages);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = CreatePlayerTextDraw(playerid, 320.000000, pos[1] + 3.5, str);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0.257998, 1.172740);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);
	
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]);
	return 1;
}

DestroyPlayerRulesTextDraw(playerid)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}

FixTextDrawString(message[], bool:space = false) {
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			case ' ': {
				if(space) {
					message[pos] = '_';
				}
			}
			default:  message[pos] = message[pos];
		}
	}
}

HidePlayerMessage(playerid);
public HidePlayerMessage(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);
	return 1;
}

PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if(PI[playerid][ac_CONFIG_SOUNDS]) PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(PI[playerid][ac_CONFIG_AUDIO]) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	return 1;
}

TogglePlayerControllableEx(playerid, bool:controllable)
{
	PLAYER_TEMP[playerid][pt_CONTROL] = controllable;
	return TogglePlayerControllable(playerid, controllable);
}

IsPlayerInSafeZone(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		if(IsPlayerInDynamicArea(playerid, SAFE_ZONES[i][safe_zone_AREA_ID]))
		{
			return true;
		}
	}
	return false;
}

SetPlayerVip(playerid, vip_level, price_coin = 0, days = 30)
{
	if(vip_level < 1) return 0;
	
	vip_level = 2;//ok
	PI[playerid][ac_COINS] -= price_coin;
	ACCOUNT_INFO[playerid][ac_VIP] = vip_level;
	
	inline OnInfoQueryLoad()
	{
		inline OnCountQueryLoad()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					cache_get_value_index(0, 0, ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE]);
					SendClientMessageEx(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has comprado VIP (%d) por %d días, fecha de caducidad: %s.", ACCOUNT_INFO[playerid][ac_VIP], days, ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE]);
					SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
					UnlockPlayerVehicles(playerid);
					if(GetPlayerSkin(playerid) == PI[playerid][ac_SKIN]) SetPlayerToys(playerid);
				}
			}
		}
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", ACCOUNT_INFO[playerid][ac_ID]);
		MySQL_TQueryInline(srp_db, using inline OnCountQueryLoad, QUERY_BUFFER);
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL %d DAY) WHERE id = %d;", PI[playerid][ac_COINS], ACCOUNT_INFO[playerid][ac_VIP], days, ACCOUNT_INFO[playerid][ac_ID]);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

UpdateUnnocupiedPropertyLabel(index)
{
	if(!PROPERTY_INFO[index][property_VALID]) return 0;
	if(PROPERTY_INFO[index][property_SOLD]) return 0;
	
	new label_str[256];
	if(PROPERTY_INFO[index][property_VIP_LEVEL])
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	else
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[index][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
	return 1;
}


FreezePlayer(playerid, ms = 2000)
{
	TogglePlayerControllableEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", ms, false, "ib", playerid, true);
	return 1;
}

forward CarJackingFinish(playerid);
public CarJackingFinish(playerid)
{
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

SetPlayerNormalColor(playerid)
{
	/*if(ACCOUNT_INFO[playerid][ac_VIP]) return SetPlayerColorEx(playerid, 0x{"#PRIMARY_COLOR"}00);
	else
	{
		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] && PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] == true) SetPlayerColorEx(playerid, 0x8000FF00);
		else SetPlayerColorEx(playerid, PLAYER_COLOR);
	}*/
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	return 1;
}



SendAdminAd(color, const text[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][ac_CONFIG_ADMIN])
			{
				SendClientMessage(i, color, text);
			}
		}
	}
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmd[], params[], flags) 
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || ACCOUNT_INFO[playerid][ac_STATE] == ROLEPLAY_STATE_HOSPITAL || IsPlayerInWorkTutorial(playerid))
	{
		SendNotification(playerid, "Ahora no puedes usar comandos.");
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW]) { SendNotification(playerid, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú."); return 0; }
	
	
	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS]);
	if(interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if(ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;
						
						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendNotification(playerid, "Cálmate."); 
		return 0; 
	}
	
	if(flags)
	{
		if(flags == CMD_DISABLED)
		{
			SendNotification(playerid, "Este comando esta deshabilitado.");
			return 0;
		}

		if(flags > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: Unknown command."); 
			return 0;
		}
		
		/*if(!PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "Debes estar de servicio como admin, usa /duty."); 
			return 0;
		}*/
	}
	
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS] = GetTickCount();
	
	#if CMD_LOGGIN
		printf("[CMD] %s (%d): /%s %s", ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_ID], cmd, params);
	#endif
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) 
{ 
    if(result == -1) 
    { 
		SendFormatNotification(playerid, "El comando ~r~\"%s\"~w~ no existe.~n~~n~Utiliza el comando ~r~\"/ayuda\"~w~ para ver información sobre el servidor.", cmd);
        return 0;
    }
    return 1; 
}

SendMessageToDoubtChannel(playerid, message[])
{
	new str[145];
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) format(str, 145, "{"#PRIMARY_COLOR"}[Dudas] {"#SILVER_COLOR"}%s (%d) [%s]: %s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], message);
	else format(str, 145, "{"#PRIMARY_COLOR"}[Dudas] {"#SILVER_COLOR"}%s (%d) [Nivel %d]: %s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, ACCOUNT_INFO[playerid][ac_LEVEL], message);

	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][ac_DOUBT_CHANNEL])
			{
				SendClientMessage(i, 0x77c7ffFF, str);
			}
		}
	}
	return 1;
}


CMD:muteard(playerid, params[])
{
    new to_player, reason[128], time;
    if(sscanf(params, "uds[128]", to_player, time, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /muteard <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendNotification(playerid, "Intervalo de minutos incorrecto.");
    if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(gettime() < PI[to_player][ac_MUTE]) return SendNotification(playerid, "El jugador ya está muteado.");

	new seconds = time * 60;
	PI[to_player][ac_MUTE] = gettime() + seconds;
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][ac_MUTE], ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	SendClientMessageEx(to_player, -1, "Has sido silenciado del canal de dudas por %d minutos, razón: %s", time, reason);
	
	new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) silenció a %s (%d) del canal de dudas: %s.", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
    SendAdminAd(-1, str);
	return 1;
}

CMD:desmuteard(playerid, params[])
{
    new to_player;
    if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /desmuteard <player_id>");
    if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
    if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(gettime() > PI[to_player][ac_MUTE]) return SendNotification(playerid, "Este jugador no está silenciado.");
	
	PI[to_player][ac_MUTE] = 0;
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][ac_MUTE], ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	SendClientMessage(to_player, -1, "Ya puedes volver a enviar dudas.");
	
	SendFormatNotification(playerid, "Jugador %s (%d) ha sido des-silenciado.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
	return 1;
}

GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}

CMD:borrarop(playerid, params[])
{
	new affected_objects;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) continue;
		
		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		affected_objects ++;
	}
	
	SendFormatNotification(playerid, "Se han eliminado todos los objetos policiales, %d objetos afectados.", affected_objects);
	SendCmdLogToAdmins(playerid, "borrarop", params);
	return 1;
}

CMD:abyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "Error: /abyc [Playerid o nombre] [razon]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(to_player == playerid) return 1;
	
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No se puede añadir byc a este jugador ahora.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No puedes añadir byc a este jugador porque es policía.");
	
	AddPlayerPoliceHistory(to_player, ACCOUNT_INFO[playerid][ac_ID], reason);
	SendFormatNotification(playerid, "Se ha añadido el informe al historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}

CMD:dbyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendFormatNotification(playerid, "~r~Debes ser al menos rango %s para colocar objetos policiales.", POLICE_RANKS[11]);
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "Error: /dbyc [Playerid o nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No se puede eliminar el historial policial de este jugador ahora.");
	
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM police_history WHERE id_player = %d;", ACCOUNT_INFO[to_player][ac_ID]);
	mysql_tquery(srp_db, QUERY_BUFFER);
	
	SendFormatNotification(playerid, "Has borrado el historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}


CMD:byc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	
	ShowDialog(playerid, DIALOG_POLICE_BYC);
	return 1;
}

AddPlayerPoliceHistory(playerid, by_id, reason[])
{
	if(!ACCOUNT_INFO[playerid][ac_ID]) return 0;
	
	new date[24];
	getDateTime(date);
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO police_history (id_player, by_id, text, date) VALUES (%d, %d, '%e', '%e');", ACCOUNT_INFO[playerid][ac_ID], by_id, reason, date);
	mysql_tquery(srp_db, QUERY_BUFFER);
	return 1;
}

CMD:admac(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];
	
	SendFormatNotification(playerid, "Admin level %d o mayor no sera detectado por ac.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

forward OnPlayerDownloadedSong(index, response_code, data[]);
public OnPlayerDownloadedSong(index, response_code, data[])
{
	if(!PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP]) return 1;
	
	if(response_code == 200)
	{
		if(!strcmp(data, "OK"))
		{
			new url[128];
			format(url, 128, ""DOWNLOADED_YT_PATH"%s.mp3", PLAYER_TEMP[index][pt_VIDEO_ID]);
			PlayMp3(index, url, PLAYER_TEMP[index][pt_VIDEO_NAME]);
		}
		else SendClientMessage(index, -1, "{"#SILVER_COLOR"}Esta canción no se puede reproducir.");
	}
	else SendClientMessage(index, -1, "{"#SILVER_COLOR"}Hubo un problema con el servidor de descarga, inténtelo de nuevo más tarde.");
	
	PLAYER_TEMP[index][pt_PLAYER_WAITING_MP3_HTTP] = false;
	return 1;
}

PlayMp3(playerid, url[], song_name[])
{
	if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if( (PI[i][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[i][ac_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && PI[i][ac_LOCAL_INTERIOR] == PI[playerid][ac_LOCAL_INTERIOR])
				{
					PlayAudioStreamForPlayerEx(i, url);
					SendFormatNotification(i, "~b~Reproduciendo '%s'~n~~n~~w~Utiliza ~r~/stop ~w~para parar la música.", song_name);
				}
			}
		}
		PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
		Auto_SendPlayerAction(playerid, "pone música en su propiedad.");
	}
	else if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
					{
						PlayAudioStreamForPlayerEx(i, url);
						SendFormatNotification(i, "~b~Reproduciendo '%s'~n~~n~~w~Utiliza ~r~/stop ~w~para parar la música.", song_name);
					}
				}
			}
		}
		PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
		if(PLAYER_VEHICLES[ GetPlayerVehicleID(playerid) ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "pone música en su vehículo.");
		else Auto_SendPlayerAction(playerid, "pone música en el vehículo.");
	}
	else if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_SPEAKERS])
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][ac_CONFIG_AUDIO])
				{
					if(GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) <= 30.0)
					{
						PlayAudioStreamForPlayerEx(i, url, pos[0], pos[1], pos[2], 50.0, true);
						SendClientMessageEx(i, 0xf796bdFF, "* Se escuchan unos altavoces...");
					}
				}
			}
		}
		PLAYER_TEMP[playerid][pt_SPEAKERS_TIME] = gettime();
		PLAYER_TEMP[playerid][pt_MUSIC_FOR_SPEAKERS] = false;
		Auto_SendPlayerAction(playerid, "pone música de su MP3 en los altavoces.");
	}
	else
	{
		PlayAudioStreamForPlayerEx(playerid, url);
		SendFormatNotification(playerid, "Reproduciendo ~g~'%s' ~w~usa ~g~/stop ~w~para parar la música.", song_name);
		Auto_SendPlayerAction(playerid, "escucha música de su MP3 en sus auriculares.");
	}
	return 1;
}

CMD:cleancrews(playerid, params[])
{
	SendNotification(playerid, "deshabilitado");
	return 1;
}

CMD:cleanproperties(playerid, params[])
{
	new total;
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(PROPERTY_INFO[i][property_SOLD])
		{
			PROPERTY_INFO[i][property_SOLD] = false;
			PROPERTY_INFO[i][property_CREW] = false;
			PROPERTY_INFO[i][property_OWNER_ID] = 0;
			PROPERTY_INFO[i][property_CREW_ID] = 0;
			format(PROPERTY_INFO[i][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[i][property_ID]);
			
			new label_str[256], info[3];
			format
			(
				label_str, 
				sizeof label_str, 
				"\
					Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]
			);
			UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
			
			DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
			
			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
			info[0] = PICKUP_TYPE_PROPERTY;
			info[1] = i; // Index
			info[2] = 2; // Pickup Exterior
			Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
						
			//
			total ++;
		}
	}
	
	//
	mysql_tquery(srp_db, "UPDATE properties SET id_player = NULL, id_territory = NULL;");
	
	SendFormatNotification(playerid, "Se han liberado todas las propiedades (%d).", total);
	
	SendCmdLogToAdmins(playerid, "cleanproperties", params);
	return 1;
}

CMD:cleanshop(playerid, params[])
{
	mysql_tquery(srp_db, "DELETE FROM shop;");
	SendNotification(playerid, "Ok.");
	return 1;
}

CMD:countv(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /countv <playerid>");
	SendFormatNotification(playerid, "Vehicles: %d", CountPlayerVehicles(params[0]));
	return 1;
}

CMD:countp(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /countp <playerid>");
	SendFormatNotification(playerid, "Properties: %d", CountPlayerProperties(params[0]));
	return 1;
}

CMD:presolv(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /presolv <numero>");
	
	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				SendFormatNotification(playerid, "PN: %d --- Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", params[0], name, id, connected, pid);
			}
			else SendNotification(playerid, "No se encontró ningún resultado para ese número.");
		}	
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE phone_number = %d LIMIT 1;", params[0]);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}


Set_FUMIGATOR_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	
	if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															4,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															10.0, 
															0,
															0,
															playerid,
															999999.0
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															3,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][2],
															10.0, 
															0,
															0,
															playerid,
															999999.0
														);
	}
	
	new info[1];
	info[0] = CHECKPOINT_TYPE_FUMIGATOR;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	
	return 1;
}

CMD:osetname(playerid, params[])
{
	new to_account, new_name[24];
	if(sscanf(params, "ds[20]", to_account, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /osetname <DB-ID> <name>");
	if(!IsValidRPName(new_name)) return SendFormatNotification(playerid, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

	inline OnNameChecked()
	{
		new crows;
		if(cache_get_row_count(crows))
		{
			if(crows) SendFormatNotification(playerid, "El nombre %s está en uso", new_name);
			else
			{
				inline OnInfoQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new id, ip[16], name[24], connected, pid, admin_level;
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name(0, "ip", ip);
							cache_get_value_name(0, "name", name);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);
							cache_get_value_name_int(0, "admin_level", admin_level);

							if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
							{
								if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /setname, su player_id: %d.", name, id, pid);
								else
								{
									mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, id);
									mysql_tquery(srp_db, QUERY_BUFFER);

									for(new i = 0; i != MAX_PROPERTIES; i ++)
									{
										if(!PROPERTY_INFO[i][property_VALID]) continue;
										if(PROPERTY_INFO[i][property_OWNER_ID] != id) continue;
										
										new label_str[256];
										format
										(
											label_str, 
											sizeof label_str, 
											"\
												Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
												{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
												{FFFFFF}Presiona {"#PRIMARY_COLOR"}~k~~CONVERSATION_YES~ {FFFFFF}para entrar.\
											", PROPERTY_INFO[i][property_ID], new_name
										);
										UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
									}
									SendFormatNotification(playerid, "El nombre de '%s' ahora es: %s", name, new_name);
								}
							}
							else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
						}
						else SendNotification(playerid, "No se encontro la DB-ID.");
					}
				}
				mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
				MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
			}
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	MySQL_TQueryInline(srp_db, using inline OnNameChecked, QUERY_BUFFER);
	return 1;
}

CMD:ogivecoins(playerid, params[])
{
	new to_account, amount;
	if(sscanf(params, "dd", to_account, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ogivecoins <DB-ID> <cantidad>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, use /givecoins.", name, id, pid);
				else
				{
					mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = coins + %d WHERE id = %d;", amount, id);
					mysql_tquery(srp_db, QUERY_BUFFER);
					SendFormatNotification(playerid, "Le has dado %d "SERVER_COIN" a %s.", amount, name);
				}
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:con(playerid, params[])
{
	new stats[400+1];
	GetNetworkStats(stats, sizeof(stats));
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Estadísticas del servidor", stats, "OK", "");
	return 1;
}

CMD:notifica(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "Uso: /notifica [cmd/adm/ac/chat]");

	switch(YHash(params, false))
	{
		case _I<cmd>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] ^= true;
			SendFormatNotification(playerid, "Log de comandos %sactivado", PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] ? ("") : ("des"));
		}
		case _I<adm>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] ^= true;
			SendFormatNotification(playerid, "Log admin general %sactivado", PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] ? ("") : ("des"));
		}
		case _I<ac>:
		{
			PLAYER_TEMP[playerid][pt_SEE_AC_LOG] ^= true;
			SendFormatNotification(playerid, "Log de anticheat %sactivado", PLAYER_TEMP[playerid][pt_SEE_AC_LOG] ? ("") : ("des"));
		}
		case _I<chat>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] ^= true;
			SendFormatNotification(playerid, "Chat admin %sactivado", PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] ? ("") : ("des"));
		}
		default:
			SendNotification(playerid, "Uso: /notifica [cmd/log/ac/chat]");
	}

	return 1;
}

SetPlayerDrivingSchoolCP(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] == sizeof(Driving_School_Points) - 1)
	{
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] =	CreateDynamicRaceCP
												(
													1,
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][2],
													0.0,
													0.0,
													0.0,
													5.0, 
													0,
													0,
													playerid
												);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] =	CreateDynamicRaceCP
												(
													0,
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][2],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][2],
													5.0, 
													0,
													0,
													playerid
												);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_DRIVING_SCHOOL;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_DL_EXAM_CP], E_STREAMER_EXTRA_ID, info);
	return 1;
}

CMD:changeflags(playerid, params[])
{
	new cmd[24], flags;
	if(sscanf(params, "s[24]d", cmd, flags)) return SendNotification(playerid, "Uso: /changeflags [cmd] [flags]");
	
	PC_SetFlags(cmd, flags);
	SendFormatNotification(playerid, "Flag de /%s cambiada a %d", cmd, flags);
	return 1;
}

CMD:cobject(playerid, params[]) {
	new modelid;
	if(sscanf(params, "d", modelid)) return SendNotification(playerid, "Uso: /cobject [modelid]");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new objectid = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0);
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, {OBJECT_TYPE_TEST});
	Streamer_Update(playerid);
	EditDynamicObject(playerid, objectid);
	return 1;
}

CMD:selectobject(playerid, params[])
{
	SendNotification(playerid, "Entraste en selección de objetos");
	SelectObject(playerid);

	return 1;
}

CMD:std(playerid, params[]) {
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}


CMD:historial(playerid, params[])
{	
	//
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /historial <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return SendNotification(playerid, "DB ID = 0!");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			new caption[40], dialog[1600], line_str[256];
			format(caption, sizeof caption, "Bad historial de %s (%d)", ACCOUNT_INFO[to_player][ac_NAME], to_player);
			format(dialog, sizeof dialog, "Por\tFecha\tTipo\tDescr.\n");
			if(rows)
			{
				for(new i = 0; i != rows; i ++)
				{
					new name[24], by, type, date[24], text[128], bool:isnull_by;
					cache_get_value_name(i, "name", name);
					cache_is_value_name_null(i, "by", isnull_by);
					if(!isnull_by) cache_get_value_name_int(i, "by", by);
					cache_get_value_name_int(i, "type", type);
					cache_get_value_name(i, "date", date);
					cache_get_value_name(i, "text", text);

					if(by == -1) name = "AC";
					switch(type)
					{
						case TYPE_WARNING: format(line_str, sizeof line_str, "%s\t%s\tAdv\t%s\n", name, date, text);
						case TYPE_KICK: format(line_str, sizeof line_str, "%s\t%s\tKick\t%s\n", name, date, text);
						case TYPE_BAN: format(line_str, sizeof line_str, "%s\t%s\tBan\t%s\n", name, date, text);
						case TYPE_TEMP_BAN: format(line_str, sizeof line_str, "%s\t%s\tTBan\t%s\n", name, date, text);
						case TYPE_UNBAN: format(line_str, sizeof line_str, "%s\t%s\tUnban\t%s\n", name, date, text);
					}
					strcat(dialog, line_str);
				}
			}
			else strcat(dialog, "Sin resultados");
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "X", "");
			SendNotification(playerid, "Limite: 20");
		}
	}
	mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bad_history.*, player.name FROM bad_history LEFT JOIN player ON bad_history.by = player.id WHERE bad_history.id_player = %d ORDER BY bad_history.date LIMIT 20;", ACCOUNT_INFO[to_player][ac_ID]);
	MySQL_TQueryInline(srp_db, using inline OnInfoQueryLoad, QUERY_BUFFER);
	return 1;
}

CMD:getversion(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getversion <playerid>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	new player_version[32];
	GetPlayerVersion(to_player, player_version, sizeof player_version);

	SendFormatNotification(playerid, "Jugador %s usa la versión %s", PLAYER_TEMP[to_player][pt_NAME], player_version);
	return 1;
}

CMD:arma(playerid, params[])
{
	new weaponid, ammo;
	if(sscanf(params, "dd", weaponid, ammo)) return SendNotification(playerid, "Uso: /arma [weaponid] [balas]");
	if(!WEAPON_INFO[weaponid][weapon_info_AMMO]) ammo = 1;
	
	GivePlayerWeaponEx(playerid, weaponid, ammo);
	RegisterNewPlayerWeapon(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT]);
	return 1;
}

CMD:printtestvehicles(playerid, params[])
{
	for(new i, j = GetVehiclePoolSize(); i <= j; i++)
	{
		if(GLOBAL_VEHICLES[i][gb_vehicle_VALID] && GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			new Float:x, Float:y, Float:z, Float:angle;
			GetVehiclePos(i, x, y, z);
			GetVehicleZAngle(i, angle);
			printf("{VEHICLE_TYPE_, WORK_, exp, %d, %f, %f, %f, %f, color1, color2, vip, world},", GetVehicleModel(i), x, y, z, angle);
		}
	}
	SendNotification(playerid, "Se hizo un printf de todos los vehiculos de prueba - revisa la consola o el server_log.txt");
	return 1;
}

CMD:placaex(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
	else
	{
		CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		PI[playerid][ac_POLICE_DUTY] = 0;
	}
	return 1;
}
alias:placaex("policiaadmin");

CMD:vehicles(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /vehicles <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	
	new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
	format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(total_vehicles > MAX_SU_VEHICLES) break;
		
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[to_player][ac_ID])
		{
			
			new Float:pos[3];
			GetVehiclePos(i, pos[0], pos[1], pos[2]);
			
			new line_str[115];
			format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}/gotoveh %d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], i);
			strcat(dialog, line_str);
			total_vehicles ++;
		}
	}
	if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}El jugador no tiene vehiculos");
	
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Vehiculos", dialog, "OK", "");
	return 1;
}
alias:vehicles("vehiculos");

//Ayudante
flags:muteard(CMD_HELPER);
flags:desmuteard(CMD_HELPER);
flags:presolv(CMD_HELPER);

//Mod-Ayudante
flags:trabajos(CMD_HELPER_MODERATOR);
flags:getid(CMD_HELPER_MODERATOR);
flags:getname(CMD_HELPER_MODERATOR);
flags:aka(CMD_HELPER_MODERATOR);
flags:adv(CMD_HELPER_MODERATOR);
flags:kick(CMD_HELPER_MODERATOR);
flags:spec(CMD_HELPER_MODERATOR);
flags:specoff(CMD_HELPER_MODERATOR);
flags:freeze(CMD_HELPER_MODERATOR);
flags:unfreeze(CMD_HELPER_MODERATOR);
flags:jail(CMD_HELPER_MODERATOR);
flags:unjail(CMD_HELPER_MODERATOR);
flags:notifica(CMD_HELPER_MODERATOR);
flags:ls(CMD_HELPER_MODERATOR);

//Moderador
flags:pest(CMD_MODERATOR);
flags:pinv(CMD_MODERATOR);
flags:pexp(CMD_MODERATOR);
flags:parmas(CMD_MODERATOR);
flags:pbank(CMD_MODERATOR);
flags:traerveh(CMD_MODERATOR);
flags:gotoveh(CMD_MODERATOR);
flags:goto(CMD_MODERATOR);
flags:get(CMD_MODERATOR);
flags:unban(CMD_MODERATOR);
flags:tban(CMD_MODERATOR);
flags:dban(CMD_MODERATOR);
flags:dtban(CMD_MODERATOR);
flags:rac(CMD_MODERATOR);
flags:rac2(CMD_MODERATOR);
flags:rv(CMD_MODERATOR);
flags:deletead(CMD_MODERATOR);
flags:setthirst(CMD_MODERATOR);
flags:sethunger(CMD_MODERATOR);
flags:setgas(CMD_MODERATOR);
flags:repairveh(CMD_MODERATOR);
flags:lsdb(CMD_MODERATOR);
flags:revivir(CMD_MODERATOR);
flags:borrarop(CMD_MODERATOR);
flags:historial(CMD_MODERATOR);
flags:getversion(CMD_MODERATOR);
flags:cls(CMD_MODERATOR);

//Administrador
flags:pm(CMD_ADMINISTRATOR);
flags:settime(CMD_ADMINISTRATOR);
flags:setweather(CMD_ADMINISTRATOR);
flags:sethealth(CMD_ADMINISTRATOR);
flags:setarmour(CMD_ADMINISTRATOR);
flags:givemod(CMD_ADMINISTRATOR);
flags:asay(CMD_ADMINISTRATOR);
flags:ban(CMD_ADMINISTRATOR);

//Desarrollador
flags:ip(CMD_DEVELOPER);
flags:ac(CMD_DEVELOPER);
flags:setlevel(CMD_DEVELOPER);
flags:setwork(CMD_DEVELOPER);
flags:setworkexp(CMD_DEVELOPER);
flags:setcash(CMD_DEVELOPER);
flags:givecash(CMD_DEVELOPER);
flags:setbmlevel(CMD_DEVELOPER);
flags:spos(CMD_DEVELOPER);
flags:v(CMD_DEVELOPER);
flags:dv(CMD_DEVELOPER);
flags:restart(CMD_DEVELOPER);
flags:setname(CMD_DEVELOPER);
flags:exproperty(CMD_DEVELOPER);
flags:gotoproperty(CMD_DEVELOPER);
flags:setpass(CMD_DEVELOPER);
flags:osetname(CMD_DEVELOPER);
flags:delete(CMD_DEVELOPER);
flags:rproperty(CMD_DEVELOPER);
flags:eproperty(CMD_DEVELOPER);
flags:cproperty(CMD_DEVELOPER);
flags:eco(CMD_DEVELOPER);
flags:givecoins(CMD_DEVELOPER);
flags:setcoins(CMD_DEVELOPER);
flags:setvip(CMD_DEVELOPER);
flags:darskin(CMD_DEVELOPER);
flags:setfstyle(CMD_DEVELOPER);
flags:vpcar(CMD_DEVELOPER);
flags:admac(CMD_DEVELOPER);
flags:cleancrews(CMD_DEVELOPER);
flags:cleanproperties(CMD_DEVELOPER);
flags:cleanshop(CMD_DEVELOPER);
flags:ogivecoins(CMD_DEVELOPER);
flags:con(CMD_DEVELOPER);
flags:changeflags(CMD_DEVELOPER);
flags:selectobject(CMD_DEVELOPER);
flags:setnameplayer(CMD_DEVELOPER);
flags:setnametemp(CMD_DEVELOPER);
flags:arma(CMD_DEVELOPER);
flags:printtestvehicles(CMD_DEVELOPER);
flags:gpos(CMD_DEVELOPER);
flags:cpos(CMD_DEVELOPER);
flags:placaex(CMD_DEVELOPER);
flags:setwlevel(CMD_DEVELOPER);
flags:sound(CMD_DEVELOPER);
flags:anim(CMD_DEVELOPER);
flags:cobject(CMD_DEVELOPER);
flags:payday(CMD_DEVELOPER);
flags:say(CMD_ADMINISTRATOR);
flags:setfdrum(CMD_ADMINISTRATOR);

getPhoneNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

getBankAccountNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

SetPiDefaultValues(playerid)
{
	new tmp_PI[enum_PI];
	PI[playerid] = tmp_PI;

	new date[24];
	getDateTime(date);

	GetPlayerIp(playerid, ACCOUNT_INFO[playerid][ac_IP], 16);
	format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	format(ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 24, "%s", date);
	format(ACCOUNT_INFO[playerid][ac_REG_DATE], 24, "%s", date);
	ACCOUNT_INFO[playerid][ac_LAST_CONNECTION_TIMESTAMP] = gettime();
	ACCOUNT_INFO[playerid][ac_LEVEL] = 1;
	ACCOUNT_INFO[playerid][ac_REP] = 1;
	PI[playerid][ac_CONNECTED] = 1;
	PI[playerid][ac_PLAYERID] = playerid;
	ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PI[playerid][ac_SKIN] = Intro_Skins[0][0];
	PI[playerid][ac_CASH] = minrand(5000, 7000);
	PI[playerid][ac_POS_X] = New_User_Pos[0];
	PI[playerid][ac_POS_Y] = New_User_Pos[1];
	PI[playerid][ac_POS_Z] = New_User_Pos[2];
	PI[playerid][ac_ANGLE] = New_User_Pos[3];
	ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[playerid][ac_FIGHT_STYLE] = 4;
	PI[playerid][ac_HEALTH] = 100.0;
	PI[playerid][ac_HUNGRY] = 100.0;
	PI[playerid][ac_THIRST] = 100.0;
	PI[playerid][ac_CONFIG_SOUNDS] = 1;
	PI[playerid][ac_CONFIG_AUDIO] = 1;
	PI[playerid][ac_CONFIG_TIME] = 1;
	PI[playerid][ac_CONFIG_HUD] = 1;
	PI[playerid][ac_CONFIG_ADMIN] = 1;
	PI[playerid][ac_CONFIG_SECURE_LOGIN] = 0;
	PI[playerid][ac_PHONE_VISIBLE_NUMBER] = 1;
	ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = 1;
	return 1;
}

getDateTime(string[])
{
	new 
		Year, Month, Day,
		Hour, Minute, Second
	;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	
	format(string, 24, "%04d-%02d-%02d %02d:%02d:%02d", Year, Month, Day, Hour, Minute, Second);
	return 1;
}

public OnPlayerRegister(playerid)
{
	if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1) {
		KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
		PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	}
	PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;

	TogglePlayerSpectatingEx(playerid, false);
	StopAudioStreamForPlayer(playerid);
	ClearPlayerChat(playerid);
	TogglePlayerControllable(playerid, false);
	SendFormatNotification(playerid, "Bienvenido ~b~%s, ~w~esperemos que disfrutes en ~b~"SERVER_NAME"~w~.", PLAYER_TEMP[playerid][pt_RP_NAME]);
	SendNotification(playerid, "Si necesitas ayuda puedes utilizar el comando ~b~/ayuda ~w~o puedes usar el canal de dudas con el comando ~b~/d~w~.");
	return 1;
}

public OnPlayerLogin(playerid)
{
	if(PI[playerid][ac_CONFIG_SECURE_LOGIN]) {
		if(PI[playerid][ac_CONFIG_SECURE_LOGIN] && strcmp(PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_IP])) {
			inline OnSecureLoginCheck() {
				new rows;
				if(cache_get_row_count(rows)) {
					if(rows) {
						new date[24];
						getDateTime(date);
						mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player_secure_login SET last_connection = '%e' WHERE ip = '%e' AND id_player = %d;", date, PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_ID]);
						mysql_tquery(srp_db, QUERY_BUFFER);
						LoginPlayer(playerid);
					}
					else {
						new string[128];
						format(string, sizeof string, "id=%d&ip=%s", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TEMP[playerid][pt_IP]);
						HTTP(playerid, HTTP_POST, SECURE_LOGIN_REQUEST_URL, string, "OnSecureLoginRequestCode");
					}
				}
				else Kick(playerid);
			}
			mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT ip FROM player_secure_login WHERE ip = '%e' AND id_player = %d;", PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_ID]);
			MySQL_TQueryInline(srp_db, using inline OnSecureLoginCheck, QUERY_BUFFER);
			return 1;
		}
	}

	LoginPlayer(playerid);
	return 1;
}

LoginPlayer(playerid) {
	PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;

	LoadPlayerVehicles(playerid);
	LoadPlayerPhoneBook(playerid);
	LoadPlayerToys(playerid);
	LoadPlayerGPSData(playerid);
	LoadPlayerPocketData(playerid);
	LoadPlayerWeaponsData(playerid);
	LoadPlayerWorks(playerid);
	LoadPlayerCrewInfo(playerid);

	SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	ResetPlayerWeapons(playerid);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][ac_CASH]);
	SetPlayerFightingStyle(playerid, PI[playerid][ac_FIGHT_STYLE]);
	SetPlayerHealthEx(playerid, PI[playerid][ac_HEALTH]);
	SetPlayerArmourEx(playerid, PI[playerid][ac_ARMOUR]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerNormalColor(playerid);
	StopAudioStreamForPlayer(playerid);
	SetSpawnInfo(playerid, NO_TEAM, PI[playerid][ac_SKIN], PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], PI[playerid][ac_ANGLE], 0, 0, 0, 0, 0, 0);
	SetPlayerInterior(playerid, PI[playerid][ac_INTERIOR]);
	
	PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
	SendClientMessageEx(playerid, 0xB09CA9FF, "> Bienvenido de vuelta, %s. Tu última conexión fue el %s.", PLAYER_TEMP[playerid][pt_RP_NAME], ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);

    TogglePlayerSpectatingEx(playerid, false);
	TogglePlayerControllableEx(playerid, false);
}

UpdatePlayerWorldInfo(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		//health armour
		GetPlayerHealth(playerid, PI[playerid][ac_HEALTH]);
		GetPlayerArmour(playerid, PI[playerid][ac_ARMOUR]);
		if(PI[playerid][ac_HEALTH] <= 0.0) PI[playerid][ac_HEALTH] = 1.0;
		if(PI[playerid][ac_HEALTH] > 100.0) PI[playerid][ac_HEALTH] = 100.0;
		if(PI[playerid][ac_ARMOUR] > 100.0) PI[playerid][ac_ARMOUR] = 100.0;

		//world
		switch(ACCOUNT_INFO[playerid][ac_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(PI[playerid][ac_LOCAL_INTERIOR]);
				if(index == -1)
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = New_User_Pos[0];
					PI[playerid][ac_POS_Y] = New_User_Pos[1];
					PI[playerid][ac_POS_Z] = New_User_Pos[2];
					PI[playerid][ac_ANGLE] = New_User_Pos[3];
					PI[playerid][ac_INTERIOR] = 0;
				}
				else
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = ENTER_EXIT[index][ee_EXT_X];
					PI[playerid][ac_POS_Y] = ENTER_EXIT[index][ee_EXT_Y];
					PI[playerid][ac_POS_Z] = ENTER_EXIT[index][ee_EXT_Z];
					PI[playerid][ac_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					PI[playerid][ac_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
				if(index == -1)
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = New_User_Pos[0];
					PI[playerid][ac_POS_Y] = New_User_Pos[1];
					PI[playerid][ac_POS_Z] = New_User_Pos[2];
					PI[playerid][ac_ANGLE] = New_User_Pos[3];
					PI[playerid][ac_INTERIOR] = 0;
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						PI[playerid][ac_POS_X] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						PI[playerid][ac_POS_Y] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];

						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						PI[playerid][ac_POS_Z] = z_pos;

						PI[playerid][ac_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						PI[playerid][ac_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][ac_LOCAL_INTERIOR] = 0;
						PI[playerid][ac_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][ac_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][ac_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][ac_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][ac_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][ac_LOCAL_INTERIOR]);
				if(index == -1)
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = New_User_Pos[0];
					PI[playerid][ac_POS_Y] = New_User_Pos[1];
					PI[playerid][ac_POS_Z] = New_User_Pos[2];
					PI[playerid][ac_ANGLE] = New_User_Pos[3];
					PI[playerid][ac_INTERIOR] = 0;
				}
				else
				{
					ACCOUNT_INFO[playerid][ac_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][ac_LOCAL_INTERIOR] = 0;
					PI[playerid][ac_POS_X] = PROPERTY_INFO[index][property_EXT_X];
					PI[playerid][ac_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
					PI[playerid][ac_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
					PI[playerid][ac_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					PI[playerid][ac_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				PI[playerid][ac_POS_X] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_X];
				PI[playerid][ac_POS_Y] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_Y];
				PI[playerid][ac_POS_Z] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_Z];
				PI[playerid][ac_ANGLE] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID] ][jail_ANGLE];
				PI[playerid][ac_INTERIOR] = JAIL_POSITIONS[ PI[playerid][ac_POLICE_JAIL_ID]  ][jail_INTERIOR];
			}
			default:
			{
				GetPlayerPos(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z]);
				GetPlayerFacingAngle(playerid, PI[playerid][ac_ANGLE]);
				PI[playerid][ac_INTERIOR] = GetPlayerInterior(playerid);
			}
		}
		return 1;
	}
	return 0;
}

SavePlayerData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID])
	{
		new tmp_crew[24], tmp_vip_expire_date[24];
		
		tmp_crew = "NULL";
		if(PI[playerid][ac_CREW]) format(tmp_crew, sizeof tmp_crew, "%d", PI[playerid][ac_CREW]);

		tmp_vip_expire_date = "'0000-00-00 00:00:00'";
		if(strlen(ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE]) > 3) format(tmp_vip_expire_date, sizeof tmp_vip_expire_date, "'%s'", ACCOUNT_INFO[playerid][ac_VIP_EXPIRE_DATE]);

		mysql_format
		(
			srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, 
			"\
				UPDATE player SET \
					name = '%e',\
					ip = '%e',\
					email = '%e',\
					salt = '%e',\
					pass = '%e',\
					last_connection = '%e',\
					last_connection_timestamp = %d,\
					time_playing = %d,\
					level = %d,\
					rep = %d,\
					connected = %d,\
					playerid = %d,\
					doubt_channel = %d,\
					time_for_rep = %d,\
					admin_level = %d,\
					payday_rep = %d,\
					vip = %d,\
					vip_expire_date = %s,\
					skin = %d,\
					cash = %d,\
					pos_x = %f,\
					pos_y = %f,\
					pos_z = %f,\
					angle = %f,\
					state = %d,\
					interior = %d,\
					local_interior = %d,\
					fight_style = %d,\
					health = %f,\
					armour = %f,\
					gender = %d,\
					hungry = %f,\
					thirst = %f,\
					black_market_level = %d,\
					wanted_level = %d,\
					police_jail_time = %d,\
					police_duty = %d,\
					police_jail_id = %d,\
					drive_license_points = %d,\
					bank_account = %d,\
					bank_money = %d,\
					phone_number = %d,\
					phone_state = %d,\
					phone_visible_number = %d,\
					gps = %d,\
					maso = %d,\
					mp3 = %d,\
					phone_resolver = %d,\
					speakers = %d,\
					mechanic_pieces = %d,\
					fuel_drum = %d,\
					seed_medicine = %d,\
					seed_cannabis = %d,\
					seed_crack = %d,\
					medicine = %d,\
					cannabis = %d,\
					crack = %d,\
					config_sounds = %d,\
					config_audio = %d,\
					config_time = %d,\
					config_hud = %d,\
					config_admin = %d,\
					config_secure_login = %d,\
					mute = %d,\
					placa_pd = %d,\
					can_buy_bm = %d,\
					crew = %s,\
					crew_rank = %d,\
					mechanic_kits = %d,\
					medical_kits = %d \
				WHERE id = %d;\
			",
				ACCOUNT_INFO[playerid][ac_NAME],
				ACCOUNT_INFO[playerid][ac_IP],
				ACCOUNT_INFO[playerid][ac_EMAIL],
				ACCOUNT_INFO[playerid][ac_SALT],
				ACCOUNT_INFO[playerid][ac_PASS],
				ACCOUNT_INFO[playerid][ac_LAST_CONNECTION],
				ACCOUNT_INFO[playerid][ac_LAST_CONNECTION_TIMESTAMP],
				ACCOUNT_INFO[playerid][ac_TIME_PLAYING],
				ACCOUNT_INFO[playerid][ac_LEVEL],
				ACCOUNT_INFO[playerid][ac_REP],
				PI[playerid][ac_CONNECTED],
				PI[playerid][ac_PLAYERID],
				ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL],
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP],
				ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL],
				ACCOUNT_INFO[playerid][ac_PAYDAY_REP],
				ACCOUNT_INFO[playerid][ac_VIP],
				tmp_vip_expire_date,
				PI[playerid][ac_SKIN],
				PI[playerid][ac_CASH],
				PI[playerid][ac_POS_X],
				PI[playerid][ac_POS_Y],
				PI[playerid][ac_POS_Z],
				PI[playerid][ac_ANGLE],
				ACCOUNT_INFO[playerid][ac_STATE],
				PI[playerid][ac_INTERIOR],
				PI[playerid][ac_LOCAL_INTERIOR],
				PI[playerid][ac_FIGHT_STYLE],
				PI[playerid][ac_HEALTH],
				PI[playerid][ac_ARMOUR],
				PI[playerid][ac_GENDER],
				PI[playerid][ac_HUNGRY],
				PI[playerid][ac_THIRST],
				PI[playerid][ac_BLACK_MARKET_LEVEL],
				PI[playerid][ac_WANTED_LEVEL],
				PI[playerid][ac_POLICE_JAIL_TIME],
				PI[playerid][ac_POLICE_DUTY],
				PI[playerid][ac_POLICE_JAIL_ID],
				PI[playerid][ac_DRIVE_LICENSE_POINTS],
				PI[playerid][ac_BANK_ACCOUNT],
				PI[playerid][ac_BANK_MONEY],
				PI[playerid][ac_PHONE_NUMBER],
				PI[playerid][ac_PHONE_STATE],
				PI[playerid][ac_PHONE_VISIBLE_NUMBER],
				PI[playerid][ac_GPS],
				PI[playerid][ac_Maso],
				PI[playerid][ac_MP3],
				PI[playerid][ac_PHONE_RESOLVER],
				PI[playerid][ac_SPEAKERS],
				PI[playerid][ac_MECHANIC_PIECES],
				PI[playerid][ac_FUEL_DRUM],
				PI[playerid][ac_SEED_MEDICINE],
				PI[playerid][ac_SEED_CANNABIS],
				PI[playerid][ac_SEED_CRACK],
				PI[playerid][ac_MEDICINE],
				PI[playerid][ac_CANNABIS],
				PI[playerid][ac_CRACK],
				PI[playerid][ac_CONFIG_SOUNDS],
				PI[playerid][ac_CONFIG_AUDIO],
				PI[playerid][ac_CONFIG_TIME],
				PI[playerid][ac_CONFIG_HUD],
				PI[playerid][ac_CONFIG_ADMIN],
				PI[playerid][ac_CONFIG_SECURE_LOGIN],
				PI[playerid][ac_MUTE],
				PI[playerid][ac_PLACA_PD],
				PI[playerid][ac_CAN_BUY_BM],
				tmp_crew,
				PI[playerid][ac_CREW_RANK],
				PI[playerid][ac_MECHANIC_KITS],
				PI[playerid][ac_MEDICAL_KITS],
				ACCOUNT_INFO[playerid][ac_ID]
		);
		mysql_tquery(srp_db, QUERY_BUFFER);
		return 1;
	}
	return 0;
}

CountPlayerVehicles(playerid)
{
	new count;
	if(ACCOUNT_INFO[playerid][ac_ID])
	{
		for(new i = 0; i < MAX_VEHICLES; i ++)
		{
			if(PLAYER_VEHICLES[i][player_vehicle_VALID])
			{
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					count ++;
					if(count >= MAX_SU_VEHICLES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

CountPlayerProperties(playerid)
{
	new count;
	if(ACCOUNT_INFO[playerid][ac_ID])
	{
		for(new i = 0; i < MAX_PROPERTIES; i ++)
		{
			if(PROPERTY_INFO[i][property_VALID])
			{
				if(PROPERTY_INFO[i][property_SOLD] && PROPERTY_INFO[i][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					count ++;
					if(count >= MAX_SU_PROPERTIES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

SavePlayerWorkLevels(playerid)
{
	if(!ACCOUNT_INFO[playerid][ac_ID]) return 0;
	
	for(new i = 0; i != sizeof work_info; i ++)
	{
		if(!PLAYER_WORKS[playerid][i][pwork_SET] || !i) continue;
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][i][pwork_LEVEL], ACCOUNT_INFO[playerid][ac_ID], i);
		mysql_tquery(srp_db, QUERY_BUFFER);
	}
	return 1;
}

#define PlayerTask_Interval_Seconds 10
ptask PlayerTask[PlayerTask_Interval_Seconds * 1000](playerid)
{
	ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += PlayerTask_Interval_Seconds;
}

native gpci(playerid, serial[], len);
CheckPlayerFakeClient(playerid) //experimental
{  
    if(IsPlayerNPC(playerid)) return 0;
    new sr[80],  fcharcount;  
    gpci(playerid, sr, sizeof(sr));  
    for(new i = 0; i < strlen(sr); i++)  
    {  
        if(sr[i] >= '0' && sr[i] <= '9')  fcharcount++;  
    }  
    return (fcharcount>= 30 || strlen(sr) <= 30) ? true : false;
}

public OnNearPlayerSelected(playerid, to_player, id) {
	switch(id) {
		case NEAR_PLAYERS_POCKET_GIVE: {
			new
				command[128],
				index = GetInvSelectedItem_Index(playerid);
			
			format(command, sizeof command, "/dar alimento %d %d", to_player, index + 1);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}
		case NEAR_PLAYERS_POCKET_SELL: {
			ShowSelectPriceDialog(playerid, NEAR_PLAYERS_POCKET_SELL);
			return Y_HOOKS_BREAK_RETURN_1;
		}

		case NEAR_PLAYERS_WEAPON_GIVE: {
			new
				command[128],
				index = GetInvSelectedItem_Index(playerid);
			
			format(command, sizeof command, "/dar arma %d %d", to_player, index);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}
		case NEAR_PLAYERS_WEAPON_SELL: {
			ShowSelectPriceDialog(playerid, NEAR_PLAYERS_WEAPON_SELL);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
    return Y_HOOKS_CONTINUE_RETURN_1;
}

public OnPriceSelected(playerid, price, id) {
	new
		command[128],
		to_player = GetNP_PlayerLastSelectedId(playerid),
		index = GetInvSelectedItem_Index(playerid);

	switch(id) {
		case NEAR_PLAYERS_POCKET_SELL: {
			format(command, sizeof command, "/vender alimento %d %d %d", to_player, index + 1, price);
			PC_EmulateCommand(playerid, command);
        	return Y_HOOKS_BREAK_RETURN_1;
		}

		case NEAR_PLAYERS_WEAPON_SELL: {
			format(command, sizeof command, "/vender arma %d %d %d", to_player, index, price);
			PC_EmulateCommand(playerid, command);
        	return Y_HOOKS_BREAK_RETURN_1;
		}
	}
    return Y_HOOKS_CONTINUE_RETURN_1;
}

GetBootTypeName(type) {
	new name[24];
	switch(type) {
		case BOOT_TYPE_WEAPON: name = "Arma";
		case BOOT_TYPE_MEDICINES: name = "Medicamentos";
		case BOOT_TYPE_CANNABIS: name = "Marihuana";
		case BOOT_TYPE_CRACK: name = "Crack";
	}
	return name;
}

GetClosetTypeName(type) {
	new name[24];
	switch(type) {
		case CLOSET_TYPE_WEAPON: name = "Arma";
		case CLOSET_TYPE_MEDICINES: name = "Medicamentos";
		case CLOSET_TYPE_CANNABIS: name = "Marihuana";
		case CLOSET_TYPE_CRACK: name = "Crack";
	}
	return name;
}

GetVehicleRotation(vehicleid, &Float:rx, &Float:ry, &Float:rz) {
	new Float:qw, Float:qx, Float:qy, Float:qz;
	GetVehicleRotationQuat(vehicleid, qw, qx, qy, qz);
	rx = asin(2 * qy * qz - 2 * qx * qw);
	ry = -atan2(qx * qz + qy * qw, 0.5 - qx * qx - qy * qy);
	rz = -atan2(qx * qy + qz * qw, 0.5 - qx * qx - qz * qz);
}

forward ResetCombat(damagedid);
public ResetCombat(damagedid)
{
	PLAYER_TEMP[damagedid][pt_COMBAT] = false;

	KillTimer(PLAYER_TEMP[damagedid][pt_COMBAT_TIMER]);
	PLAYER_TEMP[damagedid][pt_COMBAT_TIMER] = -1;

	TextDrawHideForPlayer(damagedid, Textdraws[textdraw_COMBAT_MODE]);
	
	SendNotification(damagedid, "Ya no estás en combate.");
	return 1;
}

stock HexToInt(const string[])//DracoBlue
{
   if (string[0] == 0) return 0;
   new i, cur=1, res = 0;
   for (i=strlen(string);i>0;i--) {
     if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
     cur=cur*16;
   }
   return res;
}

GetCrewTerritories(id)
{
	new
		count;

	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(TERRITORIES[i][territory_CREW_ID] == id) count++;
	}
	return count;
}

LoadIntroData()
{
	// INTRO 1
	INTRO_1[0] = CreateDynamicActor(50, 47.1593, -239.3631, 1.5781, 205.1492);
	INTRO_1[1] = CreateDynamicActor(59, 48.4112, -236.3764, 1.5781, 106.4268);
	INTRO_1[2] = CreateDynamicActor(98, 48.0544, -235.0872, 1.5781, 153.4899);
	INTRO_1[3] = CreateVehicle(579, 45.6427, -235.7737, 1.5537, 202.5125, 3, 3, -1);

	for(new e = 0; e < 3; e++) SetDynamicActorVirtualWorld(INTRO_1[e], WORLD_INTRO);
	SetVehicleVirtualWorld(INTRO_1[3], WORLD_INTRO);

	ApplyDynamicActorAnimation(INTRO_1[2], "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_1[1], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_1[0], "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 0);

	// INTRO 2
	INTRO_2[0] = CreateVehicle(560, 415.1954, 2511.5398, 16.1897, 157.1949, 0, 0, -1);
	INTRO_2[1] = CreateVehicle(482, 415.9417, 2505.1563, 16.5969, 41.3965, 0, 0, -1);
	INTRO_2[2] = CreateDynamicActor(112, 417.3246, 2510.1504, 16.4844, 110.3539);
	INTRO_2[3] = CreateDynamicActor(111, 417.5173, 2508.6733, 16.4844, 93.1204);
	INTRO_2[4] = CreateDynamicActor(113, 417.3795, 2507.4189, 16.4844, 65.4215);
	INTRO_2[5] = CreateDynamicActor(116, 412.8536, 2508.1931, 16.4844, 275.7721);

	for(new i = 2; i < 6; i++) SetDynamicActorVirtualWorld(INTRO_2[i], WORLD_INTRO);
	for(new i = 0; i < 2; i++) SetVehicleVirtualWorld(INTRO_2[i], 555);

	ApplyDynamicActorAnimation(INTRO_2[2], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[4], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[5], "PED", "HANDSUP", 4.1, 0, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[3], "PED", "ARRESTGUN", 4.1, 0, 0, 0, 1, 0);

	// INTRO 3
	INTRO_3[0] = CreateVehicle(531, 314.8449, 1133.0660, 8.8792, 51.2440, 149, 149, -1);
	INTRO_3[1] = CreateVehicle(478, 306.9597, 1138.1361, 8.5805, 358.9598, 0, 0, -1);
	INTRO_3[2] = CreateDynamicActor(161, 313.3412, 1131.9296, 9.0343, 34.2756);

	for(new i = 0; i < 2; i++) SetVehicleVirtualWorld(INTRO_3[i], 555);
	SetDynamicActorVirtualWorld(INTRO_3[2], 555);

	ApplyDynamicActorAnimation(INTRO_3[2], "BOMBER", "BOMB_PLANT", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

public OnDynamicActorStreamIn(actorid, forplayerid)
{
	for(new i = 0; i < 3; i++)
	{
		if(actorid == INTRO_1[i])
		{
			SetDynamicActorPos(INTRO_1[0], 47.1593, -239.3631, 1.5781);
			SetDynamicActorPos(INTRO_1[1], 48.4112, -236.3764, 1.5781);
			SetDynamicActorPos(INTRO_1[2], 48.0544, -235.0872, 1.5781);

			ClearDynamicActorAnimations(INTRO_1[i]);

			ApplyDynamicActorAnimation(INTRO_1[2], "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_1[1], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_1[0], "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 0);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	for(new i = 2; i < 6; i++)
	{
		if(actorid == INTRO_2[i])
		{
			SetDynamicActorPos(INTRO_2[2], 417.3246, 2510.1504, 16.4844);
			SetDynamicActorPos(INTRO_2[3], 417.5173, 2508.6733, 16.4844);
			SetDynamicActorPos(INTRO_2[4], 417.3795, 2507.4189, 16.4844);
			SetDynamicActorPos(INTRO_2[5], 412.8536, 2508.1931, 16.4844);

			ClearDynamicActorAnimations(INTRO_2[i]);

			ApplyDynamicActorAnimation(INTRO_2[2], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[4], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[5], "PED", "HANDSUP", 4.1, 0, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[3], "PED", "ARRESTGUN", 4.1, 0, 0, 0, 1, 0);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	if(actorid == INTRO_3[2])
	{
		SetDynamicActorPos(INTRO_3[2], 313.3412, 1131.9296, 9.0343);

		ClearDynamicActorAnimations(INTRO_3[2]);
		ApplyDynamicActorAnimation(INTRO_3[2], "BOMBER", "BOMB_PLANT", 4.1, 0, 0, 0, 1, 0);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

stock CountPolicesOnDuty() {
	new count = 0;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET] && PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE) {
					count ++;
				}
			}
		}
	}
	return count;
}

hook OnPlayerKeyPressFinish(playerid) {
	if(PLAYER_TEMP[playerid][pt_PLANTING]) {
		PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
		PLAYER_TEMP[playerid][pt_PLANTING] = false;
		PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = gettime();

		TogglePlayerControllableEx(playerid, true);
		ClearAnimations(playerid);

		//objeto planta: 2244
		new index = GetAvaiblePlantIndex();
		if(index == -1)
		{
			switch(seed_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE: PI[playerid][ac_SEED_MEDICINE] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CANNABIS: PI[playerid][ac_SEED_CANNABIS] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CRACK: PI[playerid][ac_SEED_CRACK] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			}

			SendNotification(playerid, "No queda espacio para más plantas, te hemos devuelto las semillas. Prueba ms tarde.");
			return 1;
		}

		GetPlayerPos(playerid, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z]);
		GetPlayerFacingAngle(playerid, PI[playerid][ac_ANGLE]);
		PI[playerid][ac_POS_X] += (1.0 * floatsin(-PI[playerid][ac_ANGLE], degrees));
		PI[playerid][ac_POS_Y] += (1.0 * floatcos(-PI[playerid][ac_ANGLE], degrees));
		PI[playerid][ac_POS_Z] -= 0.75;

		PLANTS[index][plant_VALID] = true;
		PLANTS[index][plant_GROWING] = true;
		PLANTS[index][plant_INVISIBLE] = true;
		PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
		PLANTS[index][plant_TYPE] = PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED];
		PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = ACCOUNT_INFO[playerid][ac_ID];
		PLANTS[index][plant_IMMUNITY] = -1;

		format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
		PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z], 0.0, 0.0, PI[playerid][ac_ANGLE], 0, 0);
		SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00FFFFFF);

		new info[3];
		info[0] = OBJECT_TYPE_PLANT;
		info[1] = index;
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);

		new label_str[256];
		if(seed_info[ PLANTS[index][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{FF7373}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{FF7373}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{FF7373}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PI[playerid][ac_POS_X], PI[playerid][ac_POS_Y], PI[playerid][ac_POS_Z] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);

		KillTimer(PLANTS[index][plant_TIMER]);
		PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", index);

		PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] ++;
		AddPlayerJobPoints(playerid, WORK_FARMER);
		SendNotification(playerid, "Ahora espera a que la planta crezca, si pasan más de ~r~5 minutos~w~ después de que la planta haya crecido se destruirá.");
		Streamer_Update(playerid);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	else if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1) {
		new tree = PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE];
		GetPlayerFacingAngle(playerid, PI[playerid][ac_ANGLE]);
		SetDynamicObjectRot(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], PI[playerid][ac_ANGLE]);	
		MoveDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z] + 0.01, 0.0065, -85.0, 0.0, PI[playerid][ac_ANGLE]);
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
		PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, PI[playerid][ac_ANGLE]);
		
		ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TogglePlayerControllableEx(playerid, true);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerKeyPress(playerid, Float:percentage) {
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1) {
		new tree = PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE];
		SetPlayerArmedWeapon(playerid, 9);
		
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", tree, percentage);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
		
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
		PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

/*
ANTI AIMBOT no funciona bn, se atraviesan los players
const PLAYER_SYNC = 207;
IPacket:PLAYER_SYNC(playerid, BitStream:bs)
{
    new onFootData[PR_OnFootSync];

    BS_IgnoreBits(bs, 8); 
    BS_ReadOnFootSync(bs, onFootData);

    onFootData[PR_specialAction] = SPECIAL_ACTION_ENTER_VEHICLE;

    BS_SetWriteOffset(bs, 8);
    BS_WriteOnFootSync(bs, onFootData);
    return 1;
}
*/

stock GetPlayerCameraRotation(playerid,&Float:rx,&Float:rz){
	new Float:mx,Float:my,Float:mz;
	GetPlayerCameraFrontVector(playerid,mx,my,mz);
	rx = CompressRotation(-(acos(mz)-90.0));
	rz = CompressRotation((atan2(my,mx)-90.0));
}

stock Float:CompressRotation(Float:rotation){
	return (rotation - floatround(rotation/360.0,floatround_floor)*360.0);
}

CountCrewPlayers(id_crew) {
    mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", id_crew);
    new count, Cache:result = mysql_query(srp_db, QUERY_BUFFER);
    cache_get_value_int(0, 0, count);
    cache_delete(result);
    return count;
}

GetRandomPropertyIndex() {
	new index = -1;
	while(index == -1) {
		new tmpIndex = random(MAX_PROPERTIES);
		if(PROPERTY_INFO[tmpIndex][property_VALID]) index = tmpIndex;
	}
	return index;
}

const RPC_VehicleDestroy = 136;
IRPC:RPC_VehicleDestroy(playerid, BitStream:bs)
{
	if(ac_Info[CHEAT_DESTROY_VEHICLE][ac_Enabled]) {
		new vehicleid;
		BS_ReadUint16(bs, vehicleid);

		if(vehicleid <= 0 || vehicleid >= MAX_VEHICLES)
		{
			return 0;
		}

		if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3)
		{
			if( (vehicleid == GetPlayerVehicleID(playerid) && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == playerid) || (PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) )
			{
				return 1;
			}
			return 0;
		}

		if(!IsVehicleStreamedIn(vehicleid, playerid))
		{
			return 0;
		}

		new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_LAST_VEHICLE_DESTROY]);
		if(interval < 500)
		{
			new current_gettime = gettime();
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] ++;
					
					PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DESTROY_VEHICLE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				}
			}
			return 0;
		}
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_DESTROY] = GetTickCount();
	}
    return 1;
}

SetPropertyDefaultFurniture(index, bool:toggle) {
	if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] != !toggle) {
		PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] = !toggle;
		mysql_format(srp_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET dis_default_interior = %d WHERE id = %d;", PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR], PROPERTY_INFO[index][property_ID]);
		mysql_tquery(srp_db, QUERY_BUFFER);

		new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, PROPERTY_INFO[index][property_INT_LABEL_ID], E_STREAMER_Z, z_pos + 0.25);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[index][property_INT_PICKUP_ID], E_STREAMER_Z, z_pos);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i) && (PI[i][ac_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[i][ac_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && PI[i][ac_LOCAL_INTERIOR] == PROPERTY_INFO[index][property_ID])
			{
				new Float:pos[3], Float:angle;
				GetPlayerPos(i, pos[0], pos[1], pos[2]);
				GetPlayerFacingAngle(i, angle);

				SetPlayerPosEx(i, pos[0], pos[1], pos[2] + (PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] ? PROPERTY_EMPTY_INTERIOR_Z_OFFSET : -PROPERTY_EMPTY_INTERIOR_Z_OFFSET), angle, GetPlayerInterior(i), GetPlayerVirtualWorld(i), 1);
			}
		}

		CallLocalFunction("OnDefaultPFurChanged", "i", index);
	}
}

GetVehicleComponentIndexFromId(vehicleid, id) {
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] == id) {
			return i;
		}
	}
	return -1;
}

GetTerritoryIndexById(id) {
	for(new i = 0; i != MAX_TERRITORIES; i ++) {
		if(TERRITORIES[i][territory_VALID] && TERRITORIES[i][territory_ID] == id) return i;
	}
	return -1;
}