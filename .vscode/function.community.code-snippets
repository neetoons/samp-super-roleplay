{
    "FCNPC_OnCreate": {
        "prefix": "FCNPC_OnCreate",
        "body": "FCNPC_OnCreate(${1:npcid})$0"
    },
    "FCNPC_OnDestroy": {
        "prefix": "FCNPC_OnDestroy",
        "body": "FCNPC_OnDestroy(${1:npcid})$0"
    },
    "FCNPC_OnSpawn": {
        "prefix": "FCNPC_OnSpawn",
        "body": "FCNPC_OnSpawn(${1:npcid})$0"
    },
    "FCNPC_OnRespawn": {
        "prefix": "FCNPC_OnRespawn",
        "body": "FCNPC_OnRespawn(${1:npcid})$0"
    },
    "FCNPC_OnDeath": {
        "prefix": "FCNPC_OnDeath",
        "body": "FCNPC_OnDeath(${1:npcid}, ${2:killerid}, ${3:weaponid})$0"
    },
    "FCNPC_OnVehicleEntryComplete": {
        "prefix": "FCNPC_OnVehicleEntryComplete",
        "body": "FCNPC_OnVehicleEntryComplete(${1:npcid}, ${2:vehicleid}, ${3:seat})$0"
    },
    "FCNPC_OnVehicleExitComplete": {
        "prefix": "FCNPC_OnVehicleExitComplete",
        "body": "FCNPC_OnVehicleExitComplete(${1:npcid})$0"
    },
    "FCNPC_OnReachDestination": {
        "prefix": "FCNPC_OnReachDestination",
        "body": "FCNPC_OnReachDestination(${1:npcid})$0"
    },
    "FCNPC_OnFinishPlayback": {
        "prefix": "FCNPC_OnFinishPlayback",
        "body": "FCNPC_OnFinishPlayback(${1:npcid})$0"
    },
    "FCNPC_OnTakeDamage": {
        "prefix": "FCNPC_OnTakeDamage",
        "body":
            "FCNPC_OnTakeDamage(${1:npcid}, ${2:damagerid}, ${3:weaponid}, ${4:bodypart}, ${5:Float:health_loss})$0"
    },
    "FCNPC_OnGiveDamage": {
        "prefix": "FCNPC_OnGiveDamage",
        "body":
            "FCNPC_OnGiveDamage(${1:npcid}, ${2:issuerid}, ${3:weaponid}, ${4:bodypart}, ${5:Float:health_loss})$0"
    },
    "FCNPC_OnVehicleTakeDamage": {
        "prefix": "FCNPC_OnVehicleTakeDamage",
        "body":
            "FCNPC_OnVehicleTakeDamage(${1:npcid}, ${2:damagerid}, ${3:vehicleid}, ${4:weaponid}, ${5:Float:x}, ${6:Float:y}, ${7:Float:z})$0"
    },
    "FCNPC_OnFinishNodePoint": {
        "prefix": "FCNPC_OnFinishNodePoint",
        "body": "FCNPC_OnFinishNodePoint(${1:npcid}, ${2:point})$0"
    },
    "FCNPC_OnChangeNode": {
        "prefix": "FCNPC_OnChangeNode",
        "body": "FCNPC_OnChangeNode(${1:npcid}, ${2:nodeid})$0"
    },
    "FCNPC_OnFinishNode": {
        "prefix": "FCNPC_OnFinishNode",
        "body": "FCNPC_OnFinishNode(${1:npcid})$0"
    },
    "FCNPC_OnStreamIn": {
        "prefix": "FCNPC_OnStreamIn",
        "body": "FCNPC_OnStreamIn(${1:npcid}, ${2:forplayerid})$0"
    },
    "FCNPC_OnStreamOut": {
        "prefix": "FCNPC_OnStreamOut",
        "body": "FCNPC_OnStreamOut(${1:npcid}, ${2:forplayerid})$0"
    },
    "FCNPC_OnUpdate": {
        "prefix": "FCNPC_OnUpdate",
        "body": "FCNPC_OnUpdate(${1:npcid})$0"
    },
    "FCNPC_OnFinishMovePath": {
        "prefix": "FCNPC_OnFinishMovePath",
        "body": "FCNPC_OnFinishMovePath(${1:npcid}, ${2:pathid})$0"
    },
    "FCNPC_OnFinishMovePathPoint": {
        "prefix": "FCNPC_OnFinishMovePathPoint",
        "body": "FCNPC_OnFinishMovePathPoint(${1:npcid}, ${2:pathid}, ${3:pointid})$0"
    },
    "FCNPC_SetUpdateRate": {
        "prefix": "FCNPC_SetUpdateRate",
        "body": "FCNPC_SetUpdateRate(${1:rate})$0"
    },
    "FCNPC_InitMapAndreas": {
        "prefix": "FCNPC_InitMapAndreas",
        "body": "FCNPC_InitMapAndreas(${1:address})$0"
    },
    "FCNPC_Create": {
        "prefix": "FCNPC_Create",
        "body": "FCNPC_Create(${1:name[]})$0"
    },
    "FCNPC_Destroy": {
        "prefix": "FCNPC_Destroy",
        "body": "FCNPC_Destroy(${1:npcid})$0"
    },
    "FCNPC_Spawn": {
        "prefix": "FCNPC_Spawn",
        "body": "FCNPC_Spawn(${1:npcid}, ${2:skinid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "FCNPC_Respawn": {
        "prefix": "FCNPC_Respawn",
        "body": "FCNPC_Respawn(${1:npcid})$0"
    },
    "FCNPC_IsSpawned": {
        "prefix": "FCNPC_IsSpawned",
        "body": "FCNPC_IsSpawned(${1:npcid})$0"
    },
    "FCNPC_Kill": {
        "prefix": "FCNPC_Kill",
        "body": "FCNPC_Kill(${1:npcid})$0"
    },
    "FCNPC_IsDead": {
        "prefix": "FCNPC_IsDead",
        "body": "FCNPC_IsDead(${1:npcid})$0"
    },
    "FCNPC_IsValid": {
        "prefix": "FCNPC_IsValid",
        "body": "FCNPC_IsValid(${1:npcid})$0"
    },
    "FCNPC_IsStreamedIn": {
        "prefix": "FCNPC_IsStreamedIn",
        "body": "FCNPC_IsStreamedIn(${1:npcid}, ${2:forplayerid})$0"
    },
    "FCNPC_IsStreamedForAnyone": {
        "prefix": "FCNPC_IsStreamedForAnyone",
        "body": "FCNPC_IsStreamedForAnyone(${1:npcid})$0"
    },
    "FCNPC_SetPosition": {
        "prefix": "FCNPC_SetPosition",
        "body": "FCNPC_SetPosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_GivePosition": {
        "prefix": "FCNPC_GivePosition",
        "body": "FCNPC_GivePosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_GetPosition": {
        "prefix": "FCNPC_GetPosition",
        "body": "FCNPC_GetPosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_SetAngle": {
        "prefix": "FCNPC_SetAngle",
        "body": "FCNPC_SetAngle(${1:npcid}, ${2:Float:angle})$0"
    },
    "FCNPC_GiveAngle": {
        "prefix": "FCNPC_GiveAngle",
        "body": "FCNPC_GiveAngle(${1:npcid}, ${2:Float:angle})$0"
    },
    "FCNPC_SetAngleToPos": {
        "prefix": "FCNPC_SetAngleToPos",
        "body": "FCNPC_SetAngleToPos(${1:npcid}, ${2:Float:x}, ${3:Float:y})$0"
    },
    "FCNPC_SetAngleToPlayer": {
        "prefix": "FCNPC_SetAngleToPlayer",
        "body": "FCNPC_SetAngleToPlayer(${1:npcid}, ${2:playerid})$0"
    },
    "FCNPC_GetAngle": {
        "prefix": "FCNPC_GetAngle",
        "body": "FCNPC_GetAngle(${1:npcid})$0"
    },
    "FCNPC_SetQuaternion": {
        "prefix": "FCNPC_SetQuaternion",
        "body":
            "FCNPC_SetQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "FCNPC_GiveQuaternion": {
        "prefix": "FCNPC_GiveQuaternion",
        "body":
            "FCNPC_GiveQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "FCNPC_GetQuaternion": {
        "prefix": "FCNPC_GetQuaternion",
        "body":
            "FCNPC_GetQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "FCNPC_SetVelocity": {
        "prefix": "FCNPC_SetVelocity",
        "body":
            "FCNPC_SetVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:update_pos = false})$0"
    },
    "FCNPC_GiveVelocity": {
        "prefix": "FCNPC_GiveVelocity",
        "body":
            "FCNPC_GiveVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:update_pos = false})$0"
    },
    "FCNPC_GetVelocity": {
        "prefix": "FCNPC_GetVelocity",
        "body": "FCNPC_GetVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_SetInterior": {
        "prefix": "FCNPC_SetInterior",
        "body": "FCNPC_SetInterior(${1:npcid}, ${2:interiorid})$0"
    },
    "FCNPC_GetInterior": {
        "prefix": "FCNPC_GetInterior",
        "body": "FCNPC_GetInterior(${1:npcid})$0"
    },
    "FCNPC_SetVirtualWorld": {
        "prefix": "FCNPC_SetVirtualWorld",
        "body": "FCNPC_SetVirtualWorld(${1:npcid}, ${2:worldid})$0"
    },
    "FCNPC_GetVirtualWorld": {
        "prefix": "FCNPC_GetVirtualWorld",
        "body": "FCNPC_GetVirtualWorld(${1:npcid})$0"
    },
    "FCNPC_SetHealth": {
        "prefix": "FCNPC_SetHealth",
        "body": "FCNPC_SetHealth(${1:npcid}, ${2:Float:health})$0"
    },
    "FCNPC_GiveHealth": {
        "prefix": "FCNPC_GiveHealth",
        "body": "FCNPC_GiveHealth(${1:npcid}, ${2:Float:health})$0"
    },
    "FCNPC_GetHealth": {
        "prefix": "FCNPC_GetHealth",
        "body": "FCNPC_GetHealth(${1:npcid})$0"
    },
    "FCNPC_SetArmour": {
        "prefix": "FCNPC_SetArmour",
        "body": "FCNPC_SetArmour(${1:npcid}, ${2:Float:armour})$0"
    },
    "FCNPC_GiveArmour": {
        "prefix": "FCNPC_GiveArmour",
        "body": "FCNPC_GiveArmour(${1:npcid}, ${2:Float:armour})$0"
    },
    "FCNPC_GetArmour": {
        "prefix": "FCNPC_GetArmour",
        "body": "FCNPC_GetArmour(${1:npcid})$0"
    },
    "FCNPC_SetInvulnerable": {
        "prefix": "FCNPC_SetInvulnerable",
        "body": "FCNPC_SetInvulnerable(${1:npcid}, ${2:bool:invulnerable = true})$0"
    },
    "FCNPC_IsInvulnerable": {
        "prefix": "FCNPC_IsInvulnerable",
        "body": "FCNPC_IsInvulnerable(${1:npcid})$0"
    },
    "FCNPC_SetSkin": {
        "prefix": "FCNPC_SetSkin",
        "body": "FCNPC_SetSkin(${1:npcid}, ${2:skinid})$0"
    },
    "FCNPC_GetSkin": {
        "prefix": "FCNPC_GetSkin",
        "body": "FCNPC_GetSkin(${1:npcid})$0"
    },
    "FCNPC_SetWeapon": {
        "prefix": "FCNPC_SetWeapon",
        "body": "FCNPC_SetWeapon(${1:npcid}, ${2:weaponid})$0"
    },
    "FCNPC_GetWeapon": {
        "prefix": "FCNPC_GetWeapon",
        "body": "FCNPC_GetWeapon(${1:npcid})$0"
    },
    "FCNPC_SetAmmo": {
        "prefix": "FCNPC_SetAmmo",
        "body": "FCNPC_SetAmmo(${1:npcid}, ${2:ammo})$0"
    },
    "FCNPC_GiveAmmo": {
        "prefix": "FCNPC_GiveAmmo",
        "body": "FCNPC_GiveAmmo(${1:npcid}, ${2:ammo})$0"
    },
    "FCNPC_GetAmmo": {
        "prefix": "FCNPC_GetAmmo",
        "body": "FCNPC_GetAmmo(${1:npcid})$0"
    },
    "FCNPC_SetWeaponSkillLevel": {
        "prefix": "FCNPC_SetWeaponSkillLevel",
        "body": "FCNPC_SetWeaponSkillLevel(${1:npcid}, ${2:skill}, ${3:level})$0"
    },
    "FCNPC_GiveWeaponSkillLevel": {
        "prefix": "FCNPC_GiveWeaponSkillLevel",
        "body": "FCNPC_GiveWeaponSkillLevel(${1:npcid}, ${2:skill}, ${3:level})$0"
    },
    "FCNPC_GetWeaponSkillLevel": {
        "prefix": "FCNPC_GetWeaponSkillLevel",
        "body": "FCNPC_GetWeaponSkillLevel(${1:npcid}, ${2:skill})$0"
    },
    "FCNPC_SetWeaponState": {
        "prefix": "FCNPC_SetWeaponState",
        "body": "FCNPC_SetWeaponState(${1:npcid}, ${2:weaponstate})$0"
    },
    "FCNPC_GetWeaponState": {
        "prefix": "FCNPC_GetWeaponState",
        "body": "FCNPC_GetWeaponState(${1:npcid})$0"
    },
    "FCNPC_SetWeaponReloadTime": {
        "prefix": "FCNPC_SetWeaponReloadTime",
        "body": "FCNPC_SetWeaponReloadTime(${1:npcid}, ${2:weaponid}, ${3:time})$0"
    },
    "FCNPC_GetWeaponReloadTime": {
        "prefix": "FCNPC_GetWeaponReloadTime",
        "body": "FCNPC_GetWeaponReloadTime(${1:npcid}, ${2:weaponid})$0"
    },
    "FCNPC_SetWeaponShootTime": {
        "prefix": "FCNPC_SetWeaponShootTime",
        "body": "FCNPC_SetWeaponShootTime(${1:npcid}, ${2:weaponid}, ${3:time})$0"
    },
    "FCNPC_GetWeaponShootTime": {
        "prefix": "FCNPC_GetWeaponShootTime",
        "body": "FCNPC_GetWeaponShootTime(${1:npcid}, ${2:weaponid})$0"
    },
    "FCNPC_SetWeaponClipSize": {
        "prefix": "FCNPC_SetWeaponClipSize",
        "body": "FCNPC_SetWeaponClipSize(${1:npcid}, ${2:weaponid}, ${3:size})$0"
    },
    "FCNPC_GetWeaponClipSize": {
        "prefix": "FCNPC_GetWeaponClipSize",
        "body": "FCNPC_GetWeaponClipSize(${1:npcid}, ${2:weaponid})$0"
    },
    "FCNPC_SetWeaponAccuracy": {
        "prefix": "FCNPC_SetWeaponAccuracy",
        "body": "FCNPC_SetWeaponAccuracy(${1:npcid}, ${2:weaponid}, ${3:Float:accuracy})$0"
    },
    "FCNPC_GetWeaponAccuracy": {
        "prefix": "FCNPC_GetWeaponAccuracy",
        "body": "FCNPC_GetWeaponAccuracy(${1:npcid}, ${2:weaponid})$0"
    },
    "FCNPC_SetWeaponInfo": {
        "prefix": "FCNPC_SetWeaponInfo",
        "body":
            "FCNPC_SetWeaponInfo(${1:npcid}, ${2:weaponid}, ${3:reload_time = -1}, ${4:shoot_time = -1}, ${5:clip_size = -1}, ${6:Float:accuracy = 1.0})$0"
    },
    "FCNPC_GetWeaponInfo": {
        "prefix": "FCNPC_GetWeaponInfo",
        "body":
            "FCNPC_GetWeaponInfo(${1:npcid}, ${2:weaponid}, ${3:reload_time = -1}, ${4:shoot_time = -1}, ${5:clip_size = -1}, ${6:Float:accuracy = 1.0})$0"
    },
    "FCNPC_SetWeaponDefaultInfo": {
        "prefix": "FCNPC_SetWeaponDefaultInfo",
        "body":
            "FCNPC_SetWeaponDefaultInfo(${1:weaponid}, ${2:reload_time = -1}, ${3:shoot_time = -1}, ${4:clip_size = -1}, ${5:Float:accuracy = 1.0})$0"
    },
    "FCNPC_GetWeaponDefaultInfo": {
        "prefix": "FCNPC_GetWeaponDefaultInfo",
        "body":
            "FCNPC_GetWeaponDefaultInfo(${1:weaponid}, ${2:reload_time = -1}, ${3:shoot_time = -1}, ${4:clip_size = -1}, ${5:Float:accuracy = 1.0})$0"
    },
    "FCNPC_SetKeys": {
        "prefix": "FCNPC_SetKeys",
        "body": "FCNPC_SetKeys(${1:npcid}, ${2:ud_analog}, ${3:lr_analog}, ${4:keys})$0"
    },
    "FCNPC_GetKeys": {
        "prefix": "FCNPC_GetKeys",
        "body": "FCNPC_GetKeys(${1:npcid}, ${2:ud_analog}, ${3:lr_analog}, ${4:keys})$0"
    },
    "FCNPC_SetSpecialAction": {
        "prefix": "FCNPC_SetSpecialAction",
        "body": "FCNPC_SetSpecialAction(${1:npcid}, ${2:actionid})$0"
    },
    "FCNPC_GetSpecialAction": {
        "prefix": "FCNPC_GetSpecialAction",
        "body": "FCNPC_GetSpecialAction(${1:npcid})$0"
    },
    "FCNPC_SetAnimation": {
        "prefix": "FCNPC_SetAnimation",
        "body":
            "FCNPC_SetAnimation(${1:npcid}, ${2:animationid}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"
    },
    "FCNPC_SetAnimationByName": {
        "prefix": "FCNPC_SetAnimationByName",
        "body":
            "FCNPC_SetAnimationByName(${1:npcid}, ${2:name[]}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"
    },
    "FCNPC_ResetAnimation": {
        "prefix": "FCNPC_ResetAnimation",
        "body": "FCNPC_ResetAnimation(${1:npcid})$0"
    },
    "FCNPC_GetAnimation": {
        "prefix": "FCNPC_GetAnimation",
        "body":
            "FCNPC_GetAnimation(${1:npcid}, ${2:animationid = 0}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"
    },
    "FCNPC_ApplyAnimation": {
        "prefix": "FCNPC_ApplyAnimation",
        "body":
            "FCNPC_ApplyAnimation(${1:npcid}, ${2:animlib[]}, ${3:animname[]}, ${4:Float:fDelta = 4.1}, ${5:loop = 0}, ${6:lockx = 1}, ${7:locky = 1}, ${8:freeze = 0}, ${9:time = 1})$0"
    },
    "FCNPC_ClearAnimations": {
        "prefix": "FCNPC_ClearAnimations",
        "body": "FCNPC_ClearAnimations(${1:npcid})$0"
    },
    "FCNPC_SetFightingStyle": {
        "prefix": "FCNPC_SetFightingStyle",
        "body": "FCNPC_SetFightingStyle(${1:npcid}, ${2:style})$0"
    },
    "FCNPC_GetFightingStyle": {
        "prefix": "FCNPC_GetFightingStyle",
        "body": "FCNPC_GetFightingStyle(${1:npcid})$0"
    },
    "FCNPC_ToggleReloading": {
        "prefix": "FCNPC_ToggleReloading",
        "body": "FCNPC_ToggleReloading(${1:npcid}, ${2:bool:toggle})$0"
    },
    "FCNPC_ToggleInfiniteAmmo": {
        "prefix": "FCNPC_ToggleInfiniteAmmo",
        "body": "FCNPC_ToggleInfiniteAmmo(${1:npcid}, ${2:bool:toggle})$0"
    },
    "FCNPC_GoTo": {
        "prefix": "FCNPC_GoTo",
        "body":
            "FCNPC_GoTo(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:type = MOVE_TYPE_AUTO}, ${6:Float:speed = MOVE_SPEED_AUTO}, ${7:bool:UseMapAndreas = false}, ${8:Float:radius = 0.0}, ${9:bool:setangle = true})$0"
    },
    "FCNPC_GoToPlayer": {
        "prefix": "FCNPC_GoToPlayer",
        "body":
            "FCNPC_GoToPlayer(${1:npcid}, ${2:playerid}, ${3:type = MOVE_TYPE_AUTO}, ${4:Float:speed = MOVE_SPEED_AUTO}, ${5:bool:UseMapAndreas = false}, ${6:Float:radius = 0.0}, ${7:bool:setangle = true})$0"
    },
    "FCNPC_Stop": {
        "prefix": "FCNPC_Stop",
        "body": "FCNPC_Stop(${1:npcid})$0"
    },
    "FCNPC_IsMoving": {
        "prefix": "FCNPC_IsMoving",
        "body": "FCNPC_IsMoving(${1:npcid})$0"
    },
    "FCNPC_IsMovingAtPlayer": {
        "prefix": "FCNPC_IsMovingAtPlayer",
        "body": "FCNPC_IsMovingAtPlayer(${1:npcid}, ${2:playerid})$0"
    },
    "FCNPC_AimAt": {
        "prefix": "FCNPC_AimAt",
        "body":
            "FCNPC_AimAt(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:shoot = false}, ${6:shoot_delay = -1}, ${7:bool:setangle = true})$0"
    },
    "FCNPC_AimAtPlayer": {
        "prefix": "FCNPC_AimAtPlayer",
        "body":
            "FCNPC_AimAtPlayer(${1:npcid}, ${2:playerid}, ${3:bool:shoot = false}, ${4:shoot_delay = -1}, ${5:bool:setangle = true})$0"
    },
    "FCNPC_StopAim": {
        "prefix": "FCNPC_StopAim",
        "body": "FCNPC_StopAim(${1:npcid})$0"
    },
    "FCNPC_MeleeAttack": {
        "prefix": "FCNPC_MeleeAttack",
        "body": "FCNPC_MeleeAttack(${1:npcid}, ${2:delay = -1}, ${3:bool:fightstyle = false})$0"
    },
    "FCNPC_StopAttack": {
        "prefix": "FCNPC_StopAttack",
        "body": "FCNPC_StopAttack(${1:npcid})$0"
    },
    "FCNPC_IsAttacking": {
        "prefix": "FCNPC_IsAttacking",
        "body": "FCNPC_IsAttacking(${1:npcid})$0"
    },
    "FCNPC_IsAiming": {
        "prefix": "FCNPC_IsAiming",
        "body": "FCNPC_IsAiming(${1:npcid})$0"
    },
    "FCNPC_IsAimingAtPlayer": {
        "prefix": "FCNPC_IsAimingAtPlayer",
        "body": "FCNPC_IsAimingAtPlayer(${1:npcid}, ${2:playerid})$0"
    },
    "FCNPC_IsShooting": {
        "prefix": "FCNPC_IsShooting",
        "body": "FCNPC_IsShooting(${1:npcid})$0"
    },
    "FCNPC_IsReloading": {
        "prefix": "FCNPC_IsReloading",
        "body": "FCNPC_IsReloading(${1:npcid})$0"
    },
    "FCNPC_EnterVehicle": {
        "prefix": "FCNPC_EnterVehicle",
        "body":
            "FCNPC_EnterVehicle(${1:npcid}, ${2:vehicleid}, ${3:seatid}, ${4:type = MOVE_TYPE_WALK})$0"
    },
    "FCNPC_ExitVehicle": {
        "prefix": "FCNPC_ExitVehicle",
        "body": "FCNPC_ExitVehicle(${1:npcid})$0"
    },
    "FCNPC_PutInVehicle": {
        "prefix": "FCNPC_PutInVehicle",
        "body": "FCNPC_PutInVehicle(${1:npcid}, ${2:vehicleid}, ${3:seatid})$0"
    },
    "FCNPC_RemoveFromVehicle": {
        "prefix": "FCNPC_RemoveFromVehicle",
        "body": "FCNPC_RemoveFromVehicle(${1:npcid})$0"
    },
    "FCNPC_GetVehicleID": {
        "prefix": "FCNPC_GetVehicleID",
        "body": "FCNPC_GetVehicleID(${1:npcid})$0"
    },
    "FCNPC_GetVehicleSeat": {
        "prefix": "FCNPC_GetVehicleSeat",
        "body": "FCNPC_GetVehicleSeat(${1:npcid})$0"
    },
    "FCNPC_SetVehicleSiren": {
        "prefix": "FCNPC_SetVehicleSiren",
        "body": "FCNPC_SetVehicleSiren(${1:npcid}, ${2:bool:status})$0"
    },
    "FCNPC_IsVehicleSiren": {
        "prefix": "FCNPC_IsVehicleSiren",
        "body": "FCNPC_IsVehicleSiren(${1:npcid})$0"
    },
    "FCNPC_SetVehicleHealth": {
        "prefix": "FCNPC_SetVehicleHealth",
        "body": "FCNPC_SetVehicleHealth(${1:npcid}, ${2:Float:health})$0"
    },
    "FCNPC_GetVehicleHealth": {
        "prefix": "FCNPC_GetVehicleHealth",
        "body": "FCNPC_GetVehicleHealth(${1:npcid})$0"
    },
    "FCNPC_SetVehicleHydraThrusters": {
        "prefix": "FCNPC_SetVehicleHydraThrusters",
        "body": "FCNPC_SetVehicleHydraThrusters(${1:npcid}, ${2:direction})$0"
    },
    "FCNPC_GetVehicleHydraThrusters": {
        "prefix": "FCNPC_GetVehicleHydraThrusters",
        "body": "FCNPC_GetVehicleHydraThrusters(${1:npcid})$0"
    },
    "FCNPC_SetVehicleGearState": {
        "prefix": "FCNPC_SetVehicleGearState",
        "body": "FCNPC_SetVehicleGearState(${1:npcid}, ${2:gear_state})$0"
    },
    "FCNPC_GetVehicleGearState": {
        "prefix": "FCNPC_GetVehicleGearState",
        "body": "FCNPC_GetVehicleGearState(${1:npcid})$0"
    },
    "FCNPC_SetSurfingOffsets": {
        "prefix": "FCNPC_SetSurfingOffsets",
        "body": "FCNPC_SetSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_GiveSurfingOffsets": {
        "prefix": "FCNPC_GiveSurfingOffsets",
        "body": "FCNPC_GiveSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_GetSurfingOffsets": {
        "prefix": "FCNPC_GetSurfingOffsets",
        "body": "FCNPC_GetSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_SetSurfingVehicle": {
        "prefix": "FCNPC_SetSurfingVehicle",
        "body": "FCNPC_SetSurfingVehicle(${1:npcid}, ${2:vehicleid})$0"
    },
    "FCNPC_GetSurfingVehicle": {
        "prefix": "FCNPC_GetSurfingVehicle",
        "body": "FCNPC_GetSurfingVehicle(${1:npcid})$0"
    },
    "FCNPC_SetSurfingObject": {
        "prefix": "FCNPC_SetSurfingObject",
        "body": "FCNPC_SetSurfingObject(${1:npcid}, ${2:objectid})$0"
    },
    "FCNPC_GetSurfingObject": {
        "prefix": "FCNPC_GetSurfingObject",
        "body": "FCNPC_GetSurfingObject(${1:npcid})$0"
    },
    "FCNPC_SetSurfingPlayerObject": {
        "prefix": "FCNPC_SetSurfingPlayerObject",
        "body": "FCNPC_SetSurfingPlayerObject(${1:npcid}, ${2:objectid})$0"
    },
    "FCNPC_GetSurfingPlayerObject": {
        "prefix": "FCNPC_GetSurfingPlayerObject",
        "body": "FCNPC_GetSurfingPlayerObject(${1:npcid})$0"
    },
    "FCNPC_StopSurfing": {
        "prefix": "FCNPC_StopSurfing",
        "body": "FCNPC_StopSurfing(${1:npcid})$0"
    },
    "FCNPC_StartPlayingPlayback": {
        "prefix": "FCNPC_StartPlayingPlayback",
        "body":
            "FCNPC_StartPlayingPlayback(${1:npcid}, ${2:file[] = \"\"}, ${3:recordid = INVALID_RECORD_ID}, ${4:bool:auto_unload = false})$0"
    },
    "FCNPC_StopPlayingPlayback": {
        "prefix": "FCNPC_StopPlayingPlayback",
        "body": "FCNPC_StopPlayingPlayback(${1:npcid})$0"
    },
    "FCNPC_PausePlayingPlayback": {
        "prefix": "FCNPC_PausePlayingPlayback",
        "body": "FCNPC_PausePlayingPlayback(${1:npcid})$0"
    },
    "FCNPC_ResumePlayingPlayback": {
        "prefix": "FCNPC_ResumePlayingPlayback",
        "body": "FCNPC_ResumePlayingPlayback(${1:npcid})$0"
    },
    "FCNPC_LoadPlayingPlayback": {
        "prefix": "FCNPC_LoadPlayingPlayback",
        "body": "FCNPC_LoadPlayingPlayback(${1:file[]})$0"
    },
    "FCNPC_UnloadPlayingPlayback": {
        "prefix": "FCNPC_UnloadPlayingPlayback",
        "body": "FCNPC_UnloadPlayingPlayback(${1:recordid})$0"
    },
    "FCNPC_SetPlayingPlaybackPath": {
        "prefix": "FCNPC_SetPlayingPlaybackPath",
        "body": "FCNPC_SetPlayingPlaybackPath(${1:npcid}, ${2:path[]})$0"
    },
    "FCNPC_GetPlayingPlaybackPath": {
        "prefix": "FCNPC_GetPlayingPlaybackPath",
        "body":
            "FCNPC_GetPlayingPlaybackPath(${1:npcid}, ${2:path[]}, ${3:const size = sizeof(path})$0"
    },
    "FCNPC_OpenNode": {
        "prefix": "FCNPC_OpenNode",
        "body": "FCNPC_OpenNode(${1:nodeid})$0"
    },
    "FCNPC_CloseNode": {
        "prefix": "FCNPC_CloseNode",
        "body": "FCNPC_CloseNode(${1:nodeid})$0"
    },
    "FCNPC_IsNodeOpen": {
        "prefix": "FCNPC_IsNodeOpen",
        "body": "FCNPC_IsNodeOpen(${1:nodeid})$0"
    },
    "FCNPC_GetNodeType": {
        "prefix": "FCNPC_GetNodeType",
        "body": "FCNPC_GetNodeType(${1:nodeid})$0"
    },
    "FCNPC_SetNodePoint": {
        "prefix": "FCNPC_SetNodePoint",
        "body": "FCNPC_SetNodePoint(${1:nodeid}, ${2:point})$0"
    },
    "FCNPC_GetNodePointPosition": {
        "prefix": "FCNPC_GetNodePointPosition",
        "body":
            "FCNPC_GetNodePointPosition(${1:nodeid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_GetNodePointCount": {
        "prefix": "FCNPC_GetNodePointCount",
        "body": "FCNPC_GetNodePointCount(${1:nodeid})$0"
    },
    "FCNPC_GetNodeInfo": {
        "prefix": "FCNPC_GetNodeInfo",
        "body": "FCNPC_GetNodeInfo(${1:nodeid}, ${2:vehnodes}, ${3:pednodes}, ${4:navinode})$0"
    },
    "FCNPC_PlayNode": {
        "prefix": "FCNPC_PlayNode",
        "body": "FCNPC_PlayNode(${1:npcid}, ${2:nodeid}, ${3:type})$0"
    },
    "FCNPC_StopPlayingNode": {
        "prefix": "FCNPC_StopPlayingNode",
        "body": "FCNPC_StopPlayingNode(${1:npcid})$0"
    },
    "FCNPC_CreateMovePath": {
        "prefix": "FCNPC_CreateMovePath",
        "body": "FCNPC_CreateMovePath()$0"
    },
    "FCNPC_DestroyMovePath": {
        "prefix": "FCNPC_DestroyMovePath",
        "body": "FCNPC_DestroyMovePath(${1:pathid})$0"
    },
    "FCNPC_IsValidMovePath": {
        "prefix": "FCNPC_IsValidMovePath",
        "body": "FCNPC_IsValidMovePath(${1:pathid})$0"
    },
    "FCNPC_AddPointToPath": {
        "prefix": "FCNPC_AddPointToPath",
        "body": "FCNPC_AddPointToPath(${1:pathid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "FCNPC_AddPointsToPath": {
        "prefix": "FCNPC_AddPointsToPath",
        "body":
            "FCNPC_AddPointsToPath(${1:pathid}, ${2:Float:points[][3]}, ${3:const size = sizeof(points})$0"
    },
    "FCNPC_RemovePointFromPath": {
        "prefix": "FCNPC_RemovePointFromPath",
        "body": "FCNPC_RemovePointFromPath(${1:pathid}, ${2:pointid})$0"
    },
    "FCNPC_IsValidMovePoint": {
        "prefix": "FCNPC_IsValidMovePoint",
        "body": "FCNPC_IsValidMovePoint(${1:pathid}, ${2:pointid})$0"
    },
    "FCNPC_GetMovePoint": {
        "prefix": "FCNPC_GetMovePoint",
        "body":
            "FCNPC_GetMovePoint(${1:pathid}, ${2:pointid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "FCNPC_GetNumberMovePoint": {
        "prefix": "FCNPC_GetNumberMovePoint",
        "body": "FCNPC_GetNumberMovePoint(${1:pathid})$0"
    },
    "FCNPC_GoByMovePath": {
        "prefix": "FCNPC_GoByMovePath",
        "body":
            "FCNPC_GoByMovePath(${1:npcid}, ${2:pathid}, ${3:type = MOVE_TYPE_AUTO}, ${4:Float:speed = MOVE_SPEED_AUTO}, ${5:bool:UseMapAndreas = false}, ${6:Float:radius = 0.0}, ${7:bool:setangle = true})$0"
    },
    "orm_create": {
        "prefix": "orm_create",
        "body": "orm_create(${1:const table[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"
    },
    "orm_destroy": {
        "prefix": "orm_destroy",
        "body": "orm_destroy(${1:ORM:id})$0"
    },
    "orm_errno": {
        "prefix": "orm_errno",
        "body": "orm_errno(${1:ORM:id})$0"
    },
    "orm_apply_cache": {
        "prefix": "orm_apply_cache",
        "body": "orm_apply_cache(${1:ORM:id}, ${2:row_idx}, ${3:result_idx = 0})$0"
    },
    "orm_select": {
        "prefix": "orm_select",
        "body":
            "orm_select(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_select_inline": {
        "prefix": "orm_select_inline",
        "body":
            "orm_select_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_update": {
        "prefix": "orm_update",
        "body":
            "orm_update(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_update_inline": {
        "prefix": "orm_update_inline",
        "body":
            "orm_update_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_insert": {
        "prefix": "orm_insert",
        "body":
            "orm_insert(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_insert_inline": {
        "prefix": "orm_insert_inline",
        "body":
            "orm_insert_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_delete": {
        "prefix": "orm_delete",
        "body":
            "orm_delete(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_delete_inline": {
        "prefix": "orm_delete_inline",
        "body":
            "orm_delete_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_load": {
        "prefix": "orm_load",
        "body":
            "orm_load(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_load_inline": {
        "prefix": "orm_load_inline",
        "body":
            "orm_load_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_save": {
        "prefix": "orm_save",
        "body":
            "orm_save(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_save_inline": {
        "prefix": "orm_save_inline",
        "body":
            "orm_save_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"
    },
    "orm_addvar_int": {
        "prefix": "orm_addvar_int",
        "body": "orm_addvar_int(${1:ORM:id}, ${2:var}, ${3:const columnname[]})$0"
    },
    "orm_addvar_float": {
        "prefix": "orm_addvar_float",
        "body": "orm_addvar_float(${1:ORM:id}, ${2:Float:var}, ${3:const columnname[]})$0"
    },
    "orm_addvar_string": {
        "prefix": "orm_addvar_string",
        "body":
            "orm_addvar_string(${1:ORM:id}, ${2:var[]}, ${3:var_maxlen}, ${4:const columnname[]})$0"
    },
    "orm_clear_vars": {
        "prefix": "orm_clear_vars",
        "body": "orm_clear_vars(${1:ORM:id})$0"
    },
    "orm_delvar": {
        "prefix": "orm_delvar",
        "body": "orm_delvar(${1:ORM:id}, ${2:const columnname[]})$0"
    },
    "orm_setkey": {
        "prefix": "orm_setkey",
        "body": "orm_setkey(${1:ORM:id}, ${2:const columnname[]})$0"
    },
    "mysql_log": {
        "prefix": "mysql_log",
        "body": "mysql_log(${1:E_LOGLEVEL:loglevel = ERROR | WARNING})$0"
    },
    "mysql_connect": {
        "prefix": "mysql_connect",
        "body":
            "mysql_connect(${1:const host[]}, ${2:const user[]}, ${3:const password[]}, ${4:const database[]}, ${5:MySQLOpt:option_id = MySQLOpt:0})$0"
    },
    "mysql_connect_file": {
        "prefix": "mysql_connect_file",
        "body": "mysql_connect_file(${1:const file_name[] = \"mysql.ini\"})$0"
    },
    "mysql_close": {
        "prefix": "mysql_close",
        "body": "mysql_close(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"
    },
    "mysql_unprocessed_queries": {
        "prefix": "mysql_unprocessed_queries",
        "body": "mysql_unprocessed_queries(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"
    },
    "mysql_global_options": {
        "prefix": "mysql_global_options",
        "body": "mysql_global_options(${1:E_MYSQL_GLOBAL_OPTION:type}, ${2:value})$0"
    },
    "mysql_init_options": {
        "prefix": "mysql_init_options",
        "body": "mysql_init_options()$0"
    },
    "mysql_set_option": {
        "prefix": "mysql_set_option",
        "body":
            "mysql_set_option(${1:MySQLOpt:option_id}, ${2:E_MYSQL_OPTION:type}, ${3:{Float, _}:...})$0"
    },
    "mysql_pquery_inline": {
        "prefix": "mysql_pquery_inline",
        "body":
            "mysql_pquery_inline(${1:MySQL:handle}, ${2:const query[]}, ${3:callback:Callback}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"
    },
    "mysql_pquery": {
        "prefix": "mysql_pquery",
        "body":
            "mysql_pquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"
    },
    "mysql_tquery": {
        "prefix": "mysql_tquery",
        "body":
            "mysql_tquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"
    },
    "mysql_tquery_inline": {
        "prefix": "mysql_tquery_inline",
        "body":
            "mysql_tquery_inline(${1:MySQL:handle}, ${2:const query[]}, ${3:callback:Callback}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"
    },
    "mysql_query": {
        "prefix": "mysql_query",
        "body": "mysql_query(${1:MySQL:handle}, ${2:const query[]}, ${3:bool:use_cache = true})$0"
    },
    "mysql_tquery_file": {
        "prefix": "mysql_tquery_file",
        "body":
            "mysql_tquery_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"
    },
    "mysql_query_file": {
        "prefix": "mysql_query_file",
        "body":
            "mysql_query_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:bool:use_cache = false})$0"
    },
    "mysql_errno": {
        "prefix": "mysql_errno",
        "body": "mysql_errno(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"
    },
    "mysql_error": {
        "prefix": "mysql_error",
        "body": "mysql_error(${1:destination[]}, ${2:max_len = sizeof(destination})$0"
    },
    "mysql_escape_string": {
        "prefix": "mysql_escape_string",
        "body":
            "mysql_escape_string(${1:const source[]}, ${2:destination[]}, ${3:max_len = sizeof(destination})$0"
    },
    "mysql_format": {
        "prefix": "mysql_format",
        "body":
            "mysql_format(${1:MySQL:handle}, ${2:output[]}, ${3:max_len}, ${4:const format[]}, ${5:{Float, _}:...})$0"
    },
    "mysql_set_charset": {
        "prefix": "mysql_set_charset",
        "body":
            "mysql_set_charset(${1:const charset[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"
    },
    "mysql_get_charset": {
        "prefix": "mysql_get_charset",
        "body": "mysql_get_charset(${1:destination[]}, ${2:max_len = sizeof(destination})$0"
    },
    "mysql_stat": {
        "prefix": "mysql_stat",
        "body": "mysql_stat(${1:destination[]}, ${2:max_len = sizeof(destination})$0"
    },
    "cache_num_rows": {
        "prefix": "cache_num_rows",
        "body": "cache_num_rows()$0"
    },
    "cache_num_fields": {
        "prefix": "cache_num_fields",
        "body": "cache_num_fields()$0"
    },
    "cache_num_results": {
        "prefix": "cache_num_results",
        "body": "cache_num_results()$0"
    },
    "cache_get_row_count": {
        "prefix": "cache_get_row_count",
        "body": "cache_get_row_count(${1:destination})$0"
    },
    "cache_get_field_count": {
        "prefix": "cache_get_field_count",
        "body": "cache_get_field_count(${1:destination})$0"
    },
    "cache_get_result_count": {
        "prefix": "cache_get_result_count",
        "body": "cache_get_result_count(${1:destination})$0"
    },
    "cache_get_field_name": {
        "prefix": "cache_get_field_name",
        "body":
            "cache_get_field_name(${1:field_index}, ${2:destination[]}, ${3:max_len = sizeof(destination})$0"
    },
    "cache_get_field_type": {
        "prefix": "cache_get_field_type",
        "body": "cache_get_field_type(${1:field_index})$0"
    },
    "cache_set_result": {
        "prefix": "cache_set_result",
        "body": "cache_set_result(${1:result_index})$0"
    },
    "cache_get_value_index": {
        "prefix": "cache_get_value_index",
        "body":
            "cache_get_value_index(${1:row_idx}, ${2:column_idx}, ${3:destination[]}, ${4:max_len = sizeof(destination)})$0"
    },
    "cache_get_value_index_int": {
        "prefix": "cache_get_value_index_int",
        "body": "cache_get_value_index_int(${1:row_idx}, ${2:column_idx}, ${3:destination})$0"
    },
    "cache_get_value_index_bool": {
        "prefix": "cache_get_value_index_bool",
        "body":
            "cache_get_value_index_bool(${1:row_idx}, ${2:column_idx}, ${3:&bool:destination})$0"
    },
    "cache_get_value_index_float": {
        "prefix": "cache_get_value_index_float",
        "body":
            "cache_get_value_index_float(${1:row_idx}, ${2:column_idx}, ${3:Float:destination})$0"
    },
    "cache_is_value_index_null": {
        "prefix": "cache_is_value_index_null",
        "body": "cache_is_value_index_null(${1:row_idx}, ${2:column_idx}, ${3:bool:destination})$0"
    },
    "cache_get_value_name": {
        "prefix": "cache_get_value_name",
        "body":
            "cache_get_value_name(${1:row_idx}, ${2:const column_name[]}, ${3:destination[]}, ${4:max_len = sizeof(destination)})$0"
    },
    "cache_get_value_name_int": {
        "prefix": "cache_get_value_name_int",
        "body":
            "cache_get_value_name_int(${1:row_idx}, ${2:const column_name[]}, ${3:destination})$0"
    },
    "cache_get_value_name_bool": {
        "prefix": "cache_get_value_name_bool",
        "body":
            "cache_get_value_name_bool(${1:row_idx}, ${2:column_name[]}, ${3:&bool:destination})$0"
    },
    "cache_get_value_name_float": {
        "prefix": "cache_get_value_name_float",
        "body":
            "cache_get_value_name_float(${1:row_idx}, ${2:const column_name[]}, ${3:Float:destination})$0"
    },
    "cache_is_value_name_null": {
        "prefix": "cache_is_value_name_null",
        "body":
            "cache_is_value_name_null(${1:row_idx}, ${2:const column_name[]}, ${3:bool:destination})$0"
    },
    "cache_save": {
        "prefix": "cache_save",
        "body": "cache_save()$0"
    },
    "cache_delete": {
        "prefix": "cache_delete",
        "body": "cache_delete(${1:Cache:cache_id})$0"
    },
    "cache_set_active": {
        "prefix": "cache_set_active",
        "body": "cache_set_active(${1:Cache:cache_id})$0"
    },
    "cache_unset_active": {
        "prefix": "cache_unset_active",
        "body": "cache_unset_active()$0"
    },
    "cache_is_any_active": {
        "prefix": "cache_is_any_active",
        "body": "cache_is_any_active()$0"
    },
    "cache_is_valid": {
        "prefix": "cache_is_valid",
        "body": "cache_is_valid(${1:Cache:cache_id})$0"
    },
    "cache_affected_rows": {
        "prefix": "cache_affected_rows",
        "body": "cache_affected_rows()$0"
    },
    "cache_insert_id": {
        "prefix": "cache_insert_id",
        "body": "cache_insert_id()$0"
    },
    "cache_warning_count": {
        "prefix": "cache_warning_count",
        "body": "cache_warning_count()$0"
    },
    "cache_get_query_exec_time": {
        "prefix": "cache_get_query_exec_time",
        "body": "cache_get_query_exec_time(${1:E_MYSQL_EXECTIME_UNIT:unit = MICROSECONDS})$0"
    },
    "cache_get_query_string": {
        "prefix": "cache_get_query_string",
        "body": "cache_get_query_string(${1:destination[]}, ${2:max_len = sizeof(destination})$0"
    },
    "OnQueryError": {
        "prefix": "OnQueryError",
        "body":
            "OnQueryError(${1:errorid}, ${2:const error[]}, ${3:const callback[]}, ${4:const query[]}, ${5:MySQL:handle})$0"
    },
    "CA_Init": {
        "prefix": "CA_Init",
        "body": "CA_Init()$0"
    },
    "CA_RemoveBuilding": {
        "prefix": "CA_RemoveBuilding",
        "body":
            "CA_RemoveBuilding(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:radius})$0"
    },
    "CA_RayCastLine": {
        "prefix": "CA_RayCastLine",
        "body":
            "CA_RayCastLine(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z})$0"
    },
    "CA_RayCastLineID": {
        "prefix": "CA_RayCastLineID",
        "body":
            "CA_RayCastLineID(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z})$0"
    },
    "CA_RayCastLineExtraID": {
        "prefix": "CA_RayCastLineExtraID",
        "body":
            "CA_RayCastLineExtraID(${1:type}, ${2:Float:StartX}, ${3:Float:StartY}, ${4:Float:StartZ}, ${5:Float:EndX}, ${6:Float:EndY}, ${7:Float:EndZ}, ${8:Float:x}, ${9:Float:y}, ${10:Float:z})$0"
    },
    "CA_RayCastMultiLine": {
        "prefix": "CA_RayCastMultiLine",
        "body":
            "CA_RayCastMultiLine(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:retx[]}, ${8:Float:rety[]}, ${9:Float:retz[]}, ${10:Float:retdist[]}, ${11:ModelIDs[]}, ${12:size = sizeof(retx})$0"
    },
    "CA_RayCastLineAngle": {
        "prefix": "CA_RayCastLineAngle",
        "body":
            "CA_RayCastLineAngle(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz})$0"
    },
    "CA_RayCastReflectionVector": {
        "prefix": "CA_RayCastReflectionVector",
        "body":
            "CA_RayCastReflectionVector(${1:Float:startx}, ${2:Float:starty}, ${3:Float:startz}, ${4:Float:endx}, ${5:Float:endy}, ${6:Float:endz}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:nx}, ${11:Float:ny}, ${12:Float:nz})$0"
    },
    "CA_RayCastLineNormal": {
        "prefix": "CA_RayCastLineNormal",
        "body":
            "CA_RayCastLineNormal(${1:Float:startx}, ${2:Float:starty}, ${3:Float:startz}, ${4:Float:endx}, ${5:Float:endy}, ${6:Float:endz}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:nx}, ${11:Float:ny}, ${12:Float:nz})$0"
    },
    "CA_ContactTest": {
        "prefix": "CA_ContactTest",
        "body":
            "CA_ContactTest(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz})$0"
    },
    "CA_EulerToQuat": {
        "prefix": "CA_EulerToQuat",
        "body":
            "CA_EulerToQuat(${1:Float:rx}, ${2:Float:ry}, ${3:Float:rz}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z}, ${7:Float:w})$0"
    },
    "CA_QuatToEuler": {
        "prefix": "CA_QuatToEuler",
        "body":
            "CA_QuatToEuler(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:w}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz})$0"
    },
    "CA_GetModelBoundingSphere": {
        "prefix": "CA_GetModelBoundingSphere",
        "body":
            "CA_GetModelBoundingSphere(${1:modelid}, ${2:Float:offx}, ${3:Float:offy}, ${4:Float:offz}, ${5:Float:radius})$0"
    },
    "CA_GetModelBoundingBox": {
        "prefix": "CA_GetModelBoundingBox",
        "body":
            "CA_GetModelBoundingBox(${1:modelid}, ${2:Float:minx}, ${3:Float:miny}, ${4:Float:minz}, ${5:Float:maxx}, ${6:Float:maxy}, ${7:Float:maxz})$0"
    },
    "CA_SetObjectExtraID": {
        "prefix": "CA_SetObjectExtraID",
        "body": "CA_SetObjectExtraID(${1:index}, ${2:type}, ${3:data})$0"
    },
    "CA_GetObjectExtraID": {
        "prefix": "CA_GetObjectExtraID",
        "body": "CA_GetObjectExtraID(${1:index}, ${2:type})$0"
    },
    "CA_RayCastLineEx": {
        "prefix": "CA_RayCastLineEx",
        "body":
            "CA_RayCastLineEx(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz}, ${13:Float:rw}, ${14:Float:cx}, ${15:Float:cy}, ${16:Float:cz})$0"
    },
    "CA_RayCastLineAngleEx": {
        "prefix": "CA_RayCastLineAngleEx",
        "body":
            "CA_RayCastLineAngleEx(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz}, ${13:Float:ocx}, ${14:Float:ocy}, ${15:Float:ocz}, ${16:Float:orx}, ${17:Float:ory}, ${18:Float:orz})$0"
    },
    "CA_CreateObject": {
        "prefix": "CA_CreateObject",
        "body":
            "CA_CreateObject(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz}, ${8:bool:add = false})$0"
    },
    "CA_DestroyObject": {
        "prefix": "CA_DestroyObject",
        "body": "CA_DestroyObject(${1:index})$0"
    },
    "CA_SetObjectPos": {
        "prefix": "CA_SetObjectPos",
        "body": "CA_SetObjectPos(${1:index}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "CA_SetObjectRot": {
        "prefix": "CA_SetObjectRot",
        "body": "CA_SetObjectRot(${1:index}, ${2:Float:rx}, ${3:Float:ry}, ${4:Float:rz})$0"
    },
    "CA_OnFilterScriptExit": {
        "prefix": "CA_OnFilterScriptExit",
        "body": "CA_OnFilterScriptExit()$0"
    },
    "CA_OnGameModeExit": {
        "prefix": "CA_OnGameModeExit",
        "body": "CA_OnGameModeExit()$0"
    },
    "heapspace": {
        "prefix": "heapspace",
        "body": "heapspace()$0"
    },
    "funcidx": {
        "prefix": "funcidx",
        "body": "funcidx(${1:const name[]})$0"
    },
    "numargs": {
        "prefix": "numargs",
        "body": "numargs()$0"
    },
    "getarg": {
        "prefix": "getarg",
        "body": "getarg(${1:arg}, ${2:index=0})$0"
    },
    "setarg": {
        "prefix": "setarg",
        "body": "setarg(${1:arg}, ${2:index=0}, ${3:value})$0"
    },
    "tolower": {
        "prefix": "tolower",
        "body": "tolower(${1:c})$0"
    },
    "toupper": {
        "prefix": "toupper",
        "body": "toupper(${1:c})$0"
    },
    "swapchars": {
        "prefix": "swapchars",
        "body": "swapchars(${1:c})$0"
    },
    "random": {
        "prefix": "random",
        "body": "random(${1:max})$0"
    },
    "min": {
        "prefix": "min",
        "body": "min(${1:value1}, ${2:value2})$0"
    },
    "max": {
        "prefix": "max",
        "body": "max(${1:value1}, ${2:value2})$0"
    },
    "clamp": {
        "prefix": "clamp",
        "body": "clamp(${1:value}, ${2:min=cellmin}, ${3:max=cellmax})$0"
    },
    "getproperty": {
        "prefix": "getproperty",
        "body":
            "getproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin}, ${4:string[]=\"\"})$0"
    },
    "setproperty": {
        "prefix": "setproperty",
        "body":
            "setproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin}, ${4:const string[]=\"\"})$0"
    },
    "deleteproperty": {
        "prefix": "deleteproperty",
        "body": "deleteproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin})$0"
    },
    "existproperty": {
        "prefix": "existproperty",
        "body": "existproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin})$0"
    },
    "PrintAmxBacktrace": {
        "prefix": "PrintAmxBacktrace",
        "body": "PrintAmxBacktrace()$0"
    },
    "PrintNativeBacktrace": {
        "prefix": "PrintNativeBacktrace",
        "body": "PrintNativeBacktrace()$0"
    },
    "GetAmxBacktrace": {
        "prefix": "GetAmxBacktrace",
        "body": "GetAmxBacktrace(${1:string[]}, ${2:size = sizeof(string})$0"
    },
    "GetNativeBacktrace": {
        "prefix": "GetNativeBacktrace",
        "body": "GetNativeBacktrace(${1:string[]}, ${2:size = sizeof(string})$0"
    },
    "OnRuntimeError": {
        "prefix": "OnRuntimeError",
        "body": "OnRuntimeError(${1:code}, ${2:bool:suppress})$0"
    },
    "IsCrashDetectPresent": {
        "prefix": "IsCrashDetectPresent",
        "body": "IsCrashDetectPresent()$0"
    },
    "sendstring": {
        "prefix": "sendstring",
        "body": "sendstring(${1:const message[]}, ${2:const destination[]=\"\"})$0"
    },
    "sendpacket": {
        "prefix": "sendpacket",
        "body": "sendpacket(${1:const packet[]}, ${2:size}, ${3:const destination[]=\"\"})$0"
    },
    "listenport": {
        "prefix": "listenport",
        "body": "listenport(${1:port})$0"
    },
    "receivestring": {
        "prefix": "receivestring",
        "body": "receivestring(${1:const message[]}, ${2:const source[]})$0"
    },
    "receivepacket": {
        "prefix": "receivepacket",
        "body": "receivepacket(${1:const packet[]}, ${2:size}, ${3:const source[]})$0"
    },
    "OnDialogPerformed": {
        "prefix": "OnDialogPerformed",
        "body": "OnDialogPerformed(${1:playerid}, ${2:dialog[]}, ${3:response}, ${4:success})$0"
    },
    "Dialog_Opened": {
        "prefix": "Dialog_Opened",
        "body": "Dialog_Opened(${1:playerid})$0"
    },
    "Dialog_Close": {
        "prefix": "Dialog_Close",
        "body": "Dialog_Close(${1:playerid})$0"
    },
    "Dialog_Show": {
        "prefix": "Dialog_Show",
        "body":
            "Dialog_Show(${1:playerid}, ${2:function[]}, ${3:style}, ${4:caption[]}, ${5:info[]}, ${6:button1[]}, ${7:button2[]}, ${8:...})$0"
    },
    "Dialog": {
        "prefix": "Dialog",
        "body": "Dialog:${1:name}(${2:params})$0"
    },
    "IRC_Connect": {
        "prefix": "IRC_Connect",
        "body":
            "IRC_Connect(${1:const server[]}, ${2:port}, ${3:const nickname[]}, ${4:const realname[]}, ${5:const username[]}, ${6:bool:ssl = false}, ${7:const localip[] = \"\"}, ${8:const serverpassword[] = \"\"})$0"
    },
    "IRC_Quit": {
        "prefix": "IRC_Quit",
        "body": "IRC_Quit(${1:botid}, ${2:const message[] = \"\"})$0"
    },
    "IRC_JoinChannel": {
        "prefix": "IRC_JoinChannel",
        "body": "IRC_JoinChannel(${1:botid}, ${2:const channel[]}, ${3:const key[] = \"\"})$0"
    },
    "IRC_PartChannel": {
        "prefix": "IRC_PartChannel",
        "body": "IRC_PartChannel(${1:botid}, ${2:const channel[]}, ${3:const message[] = \"\"})$0"
    },
    "IRC_ChangeNick": {
        "prefix": "IRC_ChangeNick",
        "body": "IRC_ChangeNick(${1:botid}, ${2:const nick[]})$0"
    },
    "IRC_SetMode": {
        "prefix": "IRC_SetMode",
        "body": "IRC_SetMode(${1:botid}, ${2:const target[]}, ${3:const mode[]})$0"
    },
    "IRC_Say": {
        "prefix": "IRC_Say",
        "body": "IRC_Say(${1:botid}, ${2:const target[]}, ${3:const message[]})$0"
    },
    "IRC_Notice": {
        "prefix": "IRC_Notice",
        "body": "IRC_Notice(${1:botid}, ${2:const target[]}, ${3:const message[]})$0"
    },
    "IRC_IsUserOnChannel": {
        "prefix": "IRC_IsUserOnChannel",
        "body": "IRC_IsUserOnChannel(${1:botid}, ${2:const channel[]}, ${3:const user[]})$0"
    },
    "IRC_InviteUser": {
        "prefix": "IRC_InviteUser",
        "body": "IRC_InviteUser(${1:botid}, ${2:const channel[]}, ${3:const user[]})$0"
    },
    "IRC_KickUser": {
        "prefix": "IRC_KickUser",
        "body":
            "IRC_KickUser(${1:botid}, ${2:const channel[]}, ${3:const user[]}, ${4:const message[] = \"\"})$0"
    },
    "IRC_GetUserChannelMode": {
        "prefix": "IRC_GetUserChannelMode",
        "body":
            "IRC_GetUserChannelMode(${1:botid}, ${2:const channel[]}, ${3:const user[]}, ${4:dest[]})$0"
    },
    "IRC_GetChannelUserList": {
        "prefix": "IRC_GetChannelUserList",
        "body":
            "IRC_GetChannelUserList(${1:botid}, ${2:const channel[]}, ${3:dest[]}, ${4:maxlength = sizeof dest})$0"
    },
    "IRC_SetChannelTopic": {
        "prefix": "IRC_SetChannelTopic",
        "body": "IRC_SetChannelTopic(${1:botid}, ${2:const channel[]}, ${3:const topic[]})$0"
    },
    "IRC_RequestCTCP": {
        "prefix": "IRC_RequestCTCP",
        "body": "IRC_RequestCTCP(${1:botid}, ${2:const user[]}, ${3:const message[]})$0"
    },
    "IRC_ReplyCTCP": {
        "prefix": "IRC_ReplyCTCP",
        "body": "IRC_ReplyCTCP(${1:botid}, ${2:const user[]}, ${3:const message[]})$0"
    },
    "IRC_SendRaw": {
        "prefix": "IRC_SendRaw",
        "body": "IRC_SendRaw(${1:botid}, ${2:const message[]})$0"
    },
    "IRC_CreateGroup": {
        "prefix": "IRC_CreateGroup",
        "body": "IRC_CreateGroup()$0"
    },
    "IRC_DestroyGroup": {
        "prefix": "IRC_DestroyGroup",
        "body": "IRC_DestroyGroup(${1:groupid})$0"
    },
    "IRC_AddToGroup": {
        "prefix": "IRC_AddToGroup",
        "body": "IRC_AddToGroup(${1:groupid}, ${2:botid})$0"
    },
    "IRC_RemoveFromGroup": {
        "prefix": "IRC_RemoveFromGroup",
        "body": "IRC_RemoveFromGroup(${1:groupid}, ${2:botid})$0"
    },
    "IRC_GroupSay": {
        "prefix": "IRC_GroupSay",
        "body": "IRC_GroupSay(${1:groupid}, ${2:const target[]}, ${3:const message[]})$0"
    },
    "IRC_GroupNotice": {
        "prefix": "IRC_GroupNotice",
        "body": "IRC_GroupNotice(${1:groupid}, ${2:const target[]}, ${3:const message[]})$0"
    },
    "IRC_SetIntData": {
        "prefix": "IRC_SetIntData",
        "body": "IRC_SetIntData(${1:botid}, ${2:data}, ${3:value})$0"
    },
    "IRC_OnConnect": {
        "prefix": "IRC_OnConnect",
        "body": "IRC_OnConnect(${1:botid}, ${2:ip[]}, ${3:port})$0"
    },
    "IRC_OnDisconnect": {
        "prefix": "IRC_OnDisconnect",
        "body": "IRC_OnDisconnect(${1:botid}, ${2:ip[]}, ${3:port}, ${4:reason[]})$0"
    },
    "IRC_OnConnectAttempt": {
        "prefix": "IRC_OnConnectAttempt",
        "body": "IRC_OnConnectAttempt(${1:botid}, ${2:ip[]}, ${3:port})$0"
    },
    "IRC_OnConnectAttemptFail": {
        "prefix": "IRC_OnConnectAttemptFail",
        "body": "IRC_OnConnectAttemptFail(${1:botid}, ${2:ip[]}, ${3:port}, ${4:reason[]})$0"
    },
    "IRC_OnJoinChannel": {
        "prefix": "IRC_OnJoinChannel",
        "body": "IRC_OnJoinChannel(${1:botid}, ${2:channel[]})$0"
    },
    "IRC_OnLeaveChannel": {
        "prefix": "IRC_OnLeaveChannel",
        "body": "IRC_OnLeaveChannel(${1:botid}, ${2:channel[]}, ${3:message[]})$0"
    },
    "IRC_OnInvitedToChannel": {
        "prefix": "IRC_OnInvitedToChannel",
        "body":
            "IRC_OnInvitedToChannel(${1:botid}, ${2:channel[]}, ${3:invitinguser[]}, ${4:invitinghost[]})$0"
    },
    "IRC_OnKickedFromChannel": {
        "prefix": "IRC_OnKickedFromChannel",
        "body":
            "IRC_OnKickedFromChannel(${1:botid}, ${2:channel[]}, ${3:oppeduser[]}, ${4:oppedhost[]}, ${5:message[]})$0"
    },
    "IRC_OnUserDisconnect": {
        "prefix": "IRC_OnUserDisconnect",
        "body": "IRC_OnUserDisconnect(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"
    },
    "IRC_OnUserJoinChannel": {
        "prefix": "IRC_OnUserJoinChannel",
        "body": "IRC_OnUserJoinChannel(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]})$0"
    },
    "IRC_OnUserLeaveChannel": {
        "prefix": "IRC_OnUserLeaveChannel",
        "body":
            "IRC_OnUserLeaveChannel(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"
    },
    "IRC_OnUserKickedFromChannel": {
        "prefix": "IRC_OnUserKickedFromChannel",
        "body":
            "IRC_OnUserKickedFromChannel(${1:botid}, ${2:channel[]}, ${3:kickeduser[]}, ${4:oppeduser[]}, ${5:oppedhost[]}, ${6:message[]})$0"
    },
    "IRC_OnUserNickChange": {
        "prefix": "IRC_OnUserNickChange",
        "body": "IRC_OnUserNickChange(${1:botid}, ${2:oldnick[]}, ${3:newnick[]}, ${4:host[]})$0"
    },
    "IRC_OnUserSetChannelMode": {
        "prefix": "IRC_OnUserSetChannelMode",
        "body":
            "IRC_OnUserSetChannelMode(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:mode[]})$0"
    },
    "IRC_OnUserSetChannelTopic": {
        "prefix": "IRC_OnUserSetChannelTopic",
        "body":
            "IRC_OnUserSetChannelTopic(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:topic[]})$0"
    },
    "IRC_OnUserSay": {
        "prefix": "IRC_OnUserSay",
        "body":
            "IRC_OnUserSay(${1:botid}, ${2:recipient[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"
    },
    "IRC_OnUserNotice": {
        "prefix": "IRC_OnUserNotice",
        "body":
            "IRC_OnUserNotice(${1:botid}, ${2:recipient[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"
    },
    "IRC_OnUserRequestCTCP": {
        "prefix": "IRC_OnUserRequestCTCP",
        "body": "IRC_OnUserRequestCTCP(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"
    },
    "IRC_OnUserReplyCTCP": {
        "prefix": "IRC_OnUserReplyCTCP",
        "body": "IRC_OnUserReplyCTCP(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"
    },
    "IRC_OnReceiveNumeric": {
        "prefix": "IRC_OnReceiveNumeric",
        "body": "IRC_OnReceiveNumeric(${1:botid}, ${2:numeric}, ${3:message[]})$0"
    },
    "IRC_OnReceiveRaw": {
        "prefix": "IRC_OnReceiveRaw",
        "body": "IRC_OnReceiveRaw(${1:botid}, ${2:message[]})$0"
    },
    "IRC_IsVoice": {
        "prefix": "IRC_IsVoice",
        "body": "IRC_IsVoice(${1:botid}, ${2:channel[]}, ${3:user[]})$0"
    },
    "IRC_IsHalfop": {
        "prefix": "IRC_IsHalfop",
        "body": "IRC_IsHalfop(${1:botid}, ${2:channel[]}, ${3:user[]})$0"
    },
    "IRC_IsOp": {
        "prefix": "IRC_IsOp",
        "body": "IRC_IsOp(${1:botid}, ${2:channel[]}, ${3:user[]})$0"
    },
    "IRC_IsAdmin": {
        "prefix": "IRC_IsAdmin",
        "body": "IRC_IsAdmin(${1:botid}, ${2:channel[]}, ${3:user[]})$0"
    },
    "IRC_IsOwner": {
        "prefix": "IRC_IsOwner",
        "body": "IRC_IsOwner(${1:botid}, ${2:channel[]}, ${3:user[]})$0"
    },
    "mS_GetNumberOfPages": {
        "prefix": "mS_GetNumberOfPages",
        "body": "mS_GetNumberOfPages(${1:ListID})$0"
    },
    "mS_GetNumberOfPagesEx": {
        "prefix": "mS_GetNumberOfPagesEx",
        "body": "mS_GetNumberOfPagesEx(${1:playerid})$0"
    },
    "mS_GetAmountOfListItems": {
        "prefix": "mS_GetAmountOfListItems",
        "body": "mS_GetAmountOfListItems(${1:ListID})$0"
    },
    "mS_GetAmountOfListItemsEx": {
        "prefix": "mS_GetAmountOfListItemsEx",
        "body": "mS_GetAmountOfListItemsEx(${1:playerid})$0"
    },
    "mS_GetPlayerCurrentListID": {
        "prefix": "mS_GetPlayerCurrentListID",
        "body": "mS_GetPlayerCurrentListID(${1:playerid})$0"
    },
    "mS_CreateCurrentPageTextDraw": {
        "prefix": "mS_CreateCurrentPageTextDraw",
        "body": "mS_CreateCurrentPageTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos})$0"
    },
    "mS_CreatePlayerDialogButton": {
        "prefix": "mS_CreatePlayerDialogButton",
        "body":
            "mS_CreatePlayerDialogButton(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:Float:Width}, ${5:Float:Height}, ${6:button_text[]})$0"
    },
    "mS_CreatePlayerHeaderTextDraw": {
        "prefix": "mS_CreatePlayerHeaderTextDraw",
        "body":
            "mS_CreatePlayerHeaderTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:header_text[]})$0"
    },
    "mS_CreatePlayerBGTextDraw": {
        "prefix": "mS_CreatePlayerBGTextDraw",
        "body":
            "mS_CreatePlayerBGTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:Float:Width}, ${5:Float:Height}, ${6:bgcolor})$0"
    },
    "mS_CreateMPTextDraw": {
        "prefix": "mS_CreateMPTextDraw",
        "body":
            "mS_CreateMPTextDraw(${1:playerid}, ${2:modelindex}, ${3:Float:Xpos}, ${4:Float:Ypos}, ${5:Float:Xrot}, ${6:Float:Yrot}, ${7:Float:Zrot}, ${8:Float:mZoom}, ${9:Float:width}, ${10:Float:height}, ${11:bgcolor})$0"
    },
    "mS_DestroyPlayerMPs": {
        "prefix": "mS_DestroyPlayerMPs",
        "body": "mS_DestroyPlayerMPs(${1:playerid})$0"
    },
    "mS_ShowPlayerMPs": {
        "prefix": "mS_ShowPlayerMPs",
        "body": "mS_ShowPlayerMPs(${1:playerid})$0"
    },
    "mS_UpdatePageTextDraw": {
        "prefix": "mS_UpdatePageTextDraw",
        "body": "mS_UpdatePageTextDraw(${1:playerid})$0"
    },
    "ShowModelSelectionMenu": {
        "prefix": "ShowModelSelectionMenu",
        "body":
            "ShowModelSelectionMenu(${1:playerid}, ${2:ListID}, ${3:header_text[]}, ${4:dialogBGcolor = 0x4A5A6BBB}, ${5:previewBGcolor = 0x88888899 }, ${6:tdSelectionColor = 0xFFFF00AA})$0"
    },
    "ShowModelSelectionMenuEx": {
        "prefix": "ShowModelSelectionMenuEx",
        "body":
            "ShowModelSelectionMenuEx(${1:playerid}, ${2:items_array[]}, ${3:item_amount}, ${4:header_text[]}, ${5:extraid}, ${6:Float:Xrot = 0.0}, ${7:Float:Yrot = 0.0}, ${8:Float:Zrot = 0.0}, ${9:Float:mZoom = 1.0}, ${10:dialogBGcolor = 0x4A5A6BBB}, ${11:previewBGcolor = 0x88888899 }, ${12:tdSelectionColor = 0xFFFF00AA})$0"
    },
    "HideModelSelectionMenu": {
        "prefix": "HideModelSelectionMenu",
        "body": "HideModelSelectionMenu(${1:playerid})$0"
    },
    "mS_DestroySelectionMenu": {
        "prefix": "mS_DestroySelectionMenu",
        "body": "mS_DestroySelectionMenu(${1:playerid})$0"
    },
    "SendMail": {
        "prefix": "SendMail",
        "body":
            "SendMail(${1:const szReceiver[ ]}, ${2:const szSenderMail[ ]}, ${3:const szSenderName[ ]}, ${4:const szSubject[ ]}, ${5:const szMessage[ ] })$0"
    },
    "OnMailScriptResponse": {
        "prefix": "OnMailScriptResponse",
        "body": "OnMailScriptResponse(${1:iIndex}, ${2:iResponseCode}, ${3:const szData[ ] })$0"
    },
    "StringURLEncode": {
        "prefix": "StringURLEncode",
        "body": "StringURLEncode(${1:szString[ ]}, ${2:iSize = sizeof( szString })$0"
    },
    "SortDeepArray": {
        "prefix": "SortDeepArray",
        "body":
            "SortDeepArray(${1:array[][]}, ${2:sort_index}, ${3:order = SORT_ASC}, ${4:ignorecase = false})$0"
    },
    "pb_percent": {
        "prefix": "pb_percent",
        "body":
            "pb_percent(${1:Float:x}, ${2:Float:widthorheight}, ${3:Float:max}, ${4:Float:value}, ${5:direction})$0"
    },
    "CreatePlayerProgressBar": {
        "prefix": "CreatePlayerProgressBar",
        "body":
            "CreatePlayerProgressBar(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:width = 55.5}, ${5:Float:height = 3.2}, ${6:colour = 0xFF1C1CFF}, ${7:Float:max = 100.0}, ${8:direction = BAR_DIRECTION_RIGHT})$0"
    },
    "DestroyPlayerProgressBar": {
        "prefix": "DestroyPlayerProgressBar",
        "body": "DestroyPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "ShowPlayerProgressBar": {
        "prefix": "ShowPlayerProgressBar",
        "body": "ShowPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "HidePlayerProgressBar": {
        "prefix": "HidePlayerProgressBar",
        "body": "HidePlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "IsValidPlayerProgressBar": {
        "prefix": "IsValidPlayerProgressBar",
        "body": "IsValidPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "GetPlayerProgressBarPos": {
        "prefix": "GetPlayerProgressBarPos",
        "body":
            "GetPlayerProgressBarPos(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:x}, ${4:Float:y})$0"
    },
    "SetPlayerProgressBarPos": {
        "prefix": "SetPlayerProgressBarPos",
        "body":
            "SetPlayerProgressBarPos(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:x}, ${4:Float:y})$0"
    },
    "GetPlayerProgressBarWidth": {
        "prefix": "GetPlayerProgressBarWidth",
        "body": "GetPlayerProgressBarWidth(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "SetPlayerProgressBarWidth": {
        "prefix": "SetPlayerProgressBarWidth",
        "body": "SetPlayerProgressBarWidth(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:width})$0"
    },
    "GetPlayerProgressBarHeight": {
        "prefix": "GetPlayerProgressBarHeight",
        "body": "GetPlayerProgressBarHeight(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "SetPlayerProgressBarHeight": {
        "prefix": "SetPlayerProgressBarHeight",
        "body":
            "SetPlayerProgressBarHeight(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:height})$0"
    },
    "GetPlayerProgressBarColour": {
        "prefix": "GetPlayerProgressBarColour",
        "body": "GetPlayerProgressBarColour(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "SetPlayerProgressBarColour": {
        "prefix": "SetPlayerProgressBarColour",
        "body": "SetPlayerProgressBarColour(${1:playerid}, ${2:PlayerBar:barid}, ${3:colour})$0"
    },
    "GetPlayerProgressBarMaxValue": {
        "prefix": "GetPlayerProgressBarMaxValue",
        "body": "GetPlayerProgressBarMaxValue(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "SetPlayerProgressBarMaxValue": {
        "prefix": "SetPlayerProgressBarMaxValue",
        "body":
            "SetPlayerProgressBarMaxValue(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:max})$0"
    },
    "SetPlayerProgressBarValue": {
        "prefix": "SetPlayerProgressBarValue",
        "body": "SetPlayerProgressBarValue(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:value})$0"
    },
    "GetPlayerProgressBarValue": {
        "prefix": "GetPlayerProgressBarValue",
        "body": "GetPlayerProgressBarValue(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "GetPlayerProgressBarDirection": {
        "prefix": "GetPlayerProgressBarDirection",
        "body": "GetPlayerProgressBarDirection(${1:playerid}, ${2:PlayerBar:barid})$0"
    },
    "SetPlayerProgressBarDirection": {
        "prefix": "SetPlayerProgressBarDirection",
        "body":
            "SetPlayerProgressBarDirection(${1:playerid}, ${2:PlayerBar:barid}, ${3:direction})$0"
    },
    "SmartCMD command": {
        "prefix": "command",
        "body":
            "COMMAND$<{2:flags}>:${1:name}(cmdid, playerid, params[]) {\n\t\n\t${4}\n\treturn CMD_SUCCESS;\n}$0"
    },
    "DoesCommandExist": {
        "prefix": "DoesCommandExist",
        "body": "DoesCommandExist(${1:cmdid})$0"
    },
    "GetCommandID": {
        "prefix": "GetCommandID",
        "body": "GetCommandID(${1:const cmd[]})$0"
    },
    "GetCommandName": {
        "prefix": "GetCommandName",
        "body": "GetCommandName(${1:cmdid}, ${2:cmd[]}, ${3:len = sizeof(cmd})$0"
    },
    "GetAlternateCommands": {
        "prefix": "GetAlternateCommands",
        "body": "GetAlternateCommands(${1:cmdid}, ${2:cmdidlist[]})$0"
    },
    "IsCommandAlternate": {
        "prefix": "IsCommandAlternate",
        "body": "IsCommandAlternate(${1:cmdid})$0"
    },
    "GetCommandFunctionID": {
        "prefix": "GetCommandFunctionID",
        "body": "GetCommandFunctionID(${1:cmdid})$0"
    },
    "GetPointingCommandFunctionID": {
        "prefix": "GetPointingCommandFunctionID",
        "body": "GetPointingCommandFunctionID(${1:cmdid})$0"
    },
    "GetPointingCommandID": {
        "prefix": "GetPointingCommandID",
        "body": "GetPointingCommandID(${1:cmdid})$0"
    },
    "GetCommandFunctionName": {
        "prefix": "GetCommandFunctionName",
        "body": "GetCommandFunctionName(${1:cmdid}, ${2:dest[]}, ${3:len = sizeof(dest})$0"
    },
    "GetEnabledCommandCount": {
        "prefix": "GetEnabledCommandCount",
        "body": "GetEnabledCommandCount()$0"
    },
    "GetDisabledCommandCount": {
        "prefix": "GetDisabledCommandCount",
        "body": "GetDisabledCommandCount()$0"
    },
    "GetTotalCommandCount": {
        "prefix": "GetTotalCommandCount",
        "body": "GetTotalCommandCount()$0"
    },
    "EnableCommand": {
        "prefix": "EnableCommand",
        "body": "EnableCommand(${1:cmdid})$0"
    },
    "DisableCommand": {
        "prefix": "DisableCommand",
        "body": "DisableCommand(${1:cmdid})$0"
    },
    "IsCommandEnabled": {
        "prefix": "IsCommandEnabled",
        "body": "IsCommandEnabled(${1:cmdid})$0"
    },
    "SetCommandFlags": {
        "prefix": "SetCommandFlags",
        "body": "SetCommandFlags(${1:cmdid}, ${2:flags})$0"
    },
    "GetCommandFlags": {
        "prefix": "GetCommandFlags",
        "body": "GetCommandFlags(${1:cmdid})$0"
    },
    "SetPointingCommandIDToSelf": {
        "prefix": "SetPointingCommandIDToSelf",
        "body": "SetPointingCommandIDToSelf(${1:cmdid})$0"
    },
    "ReassignCommandFunction": {
        "prefix": "ReassignCommandFunction",
        "body":
            "ReassignCommandFunction(${1:cmdid}, ${2:const funcname[]}, ${3:bool:updateCID = false}, ${4:bool:updatePFT = false})$0"
    },
    "EmulateCommandEx": {
        "prefix": "EmulateCommandEx",
        "body": "EmulateCommandEx(${1:cmdid}, ${2:playerid}, ${3:params[]})$0"
    },
    "EmulateCommand": {
        "prefix": "EmulateCommand",
        "body": "EmulateCommand(${1:playerid}, ${2:cmdtext[]})$0"
    },
    "ExecuteCommand": {
        "prefix": "ExecuteCommand",
        "body":
            "ExecuteCommand(${1:const cmd[]}, ${2:command_mode}, ${3:playerid}, ${4:success}, ${5:params[]=\"\"})$0"
    },
    "socket_create": {
        "prefix": "socket_create",
        "body": "socket_create(${1:pType:TCP})$0"
    },
    "socket_bind": {
        "prefix": "socket_bind",
        "body": "socket_bind(${1:Socket:id}, ${2:ip[]})$0"
    },
    "socket_connect": {
        "prefix": "socket_connect",
        "body": "socket_connect(${1:Socket:id}, ${2:host[]}, ${3:port})$0"
    },
    "socket_listen": {
        "prefix": "socket_listen",
        "body": "socket_listen(${1:Socket:id}, ${2:port})$0"
    },
    "socket_stop_listen": {
        "prefix": "socket_stop_listen",
        "body": "socket_stop_listen(${1:Socket:id})$0"
    },
    "socket_destroy": {
        "prefix": "socket_destroy",
        "body": "socket_destroy(${1:Socket:id})$0"
    },
    "socket_send": {
        "prefix": "socket_send",
        "body": "socket_send(${1:Socket:id}, ${2:data[]}, ${3:len})$0"
    },
    "socket_sendto": {
        "prefix": "socket_sendto",
        "body": "socket_sendto(${1:Socket:id}, ${2:const ip[]}, ${3:port}, ${4:data[]}, ${5:len})$0"
    },
    "socket_send_array": {
        "prefix": "socket_send_array",
        "body": "socket_send_array(${1:Socket:id}, ${2:data[]}, ${3:size=sizeof(data})$0"
    },
    "is_socket_valid": {
        "prefix": "is_socket_valid",
        "body": "is_socket_valid(${1:Socket:id})$0"
    },
    "socket_set_max_connections": {
        "prefix": "socket_set_max_connections",
        "body": "socket_set_max_connections(${1:Socket:id}, ${2:max_remote_clients})$0"
    },
    "socket_close_remote_client": {
        "prefix": "socket_close_remote_client",
        "body": "socket_close_remote_client(${1:Socket:id}, ${2:remote_clientid})$0"
    },
    "socket_sendto_remote_client": {
        "prefix": "socket_sendto_remote_client",
        "body": "socket_sendto_remote_client(${1:Socket:id}, ${2:remote_clientid}, ${3:data[]})$0"
    },
    "socket_remote_client_connected": {
        "prefix": "socket_remote_client_connected",
        "body": "socket_remote_client_connected(${1:Socket:id}, ${2:remote_clientid})$0"
    },
    "get_remote_client_ip": {
        "prefix": "get_remote_client_ip",
        "body": "get_remote_client_ip(${1:Socket:id}, ${2:remote_clientid}, ${3:ip[]})$0"
    },
    "ssl_init": {
        "prefix": "ssl_init",
        "body": "ssl_init()$0"
    },
    "ssl_create_context": {
        "prefix": "ssl_create_context",
        "body": "ssl_create_context(${1:Socket:id}, ${2:method})$0"
    },
    "ssl_connect": {
        "prefix": "ssl_connect",
        "body": "ssl_connect(${1:Socket:id})$0"
    },
    "ssl_load_cert_into_context": {
        "prefix": "ssl_load_cert_into_context",
        "body":
            "ssl_load_cert_into_context(${1:Socket:id}, ${2:const certificate[]}, ${3:const private_key[]})$0"
    },
    "ssl_shutdown": {
        "prefix": "ssl_shutdown",
        "body": "ssl_shutdown(${1:Socket:id})$0"
    },
    "ssl_get_peer_certificate": {
        "prefix": "ssl_get_peer_certificate",
        "body":
            "ssl_get_peer_certificate(${1:Socket:id}, ${2:method}, ${3:subject[]}, ${4:issuer[]}, ${5:remote_clientid = 0xFFFF})$0"
    },
    "ssl_set_accept_timeout": {
        "prefix": "ssl_set_accept_timeout",
        "body": "ssl_set_accept_timeout(${1:Socket:id}, ${2:interval})$0"
    },
    "ssl_set_mode": {
        "prefix": "ssl_set_mode",
        "body": "ssl_set_mode(${1:Socket:id}, ${2:mode})$0"
    },
    "onUDPReceiveData": {
        "prefix": "onUDPReceiveData",
        "body":
            "onUDPReceiveData(${1:Socket:id}, ${2:data[]}, ${3:data_len}, ${4:remote_client_ip[]}, ${5:remote_client_port})$0"
    },
    "onSocketAnswer": {
        "prefix": "onSocketAnswer",
        "body": "onSocketAnswer(${1:Socket:id}, ${2:data[]}, ${3:data_len})$0"
    },
    "onSocketClose": {
        "prefix": "onSocketClose",
        "body": "onSocketClose(${1:Socket:id})$0"
    },
    "onSocketReceiveData": {
        "prefix": "onSocketReceiveData",
        "body":
            "onSocketReceiveData(${1:Socket:id}, ${2:remote_clientid}, ${3:data[]}, ${4:data_len})$0"
    },
    "onSocketRemoteConnect": {
        "prefix": "onSocketRemoteConnect",
        "body":
            "onSocketRemoteConnect(${1:Socket:id}, ${2:remote_client[]}, ${3:remote_clientid})$0"
    },
    "onSocketRemoteDisconnect": {
        "prefix": "onSocketRemoteDisconnect",
        "body": "onSocketRemoteDisconnect(${1:Socket:id}, ${2:remote_clientid})$0"
    },
    "db_query_hook": {
        "prefix": "db_query_hook",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_query_hook(${1:iTagOf3 = tagof(_bAutoRelease})$0"
    },
    "db_escape_string": {
        "prefix": "db_escape_string",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "db_escape_string(${1:szString[]}, ${2:szEnclosing[] = \"'\"}, ${3:iSize = sizeof(szString})$0"
    },
    "db_is_persistent": {
        "prefix": "db_is_persistent",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_is_persistent(${1:DB:db})$0"
    },
    "db_is_valid_persistent": {
        "prefix": "db_is_valid_persistent",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_is_valid_persistent(${1:DB:db})$0"
    },
    "db_is_table_exists": {
        "prefix": "db_is_table_exists",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_is_table_exists(${1:DB:db}, ${2:szTable[]})$0"
    },
    "db_rewind": {
        "prefix": "db_rewind",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_rewind(${1:DBResult:dbrResult})$0"
    },
    "db_exec": {
        "prefix": "db_exec",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_exec(${1:DB:db}, ${2:szQuery[]})$0"
    },
    "db_insert": {
        "prefix": "db_insert",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_insert(${1:DB:db}, ${2:szQuery[]})$0"
    },
    "db_get_struct_info": {
        "prefix": "db_get_struct_info",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_get_struct_info(${1:DB:db}, ${2:;_}, ${3:e_SQLITE3}:iOffset})$0"
    },
    "db_set_struct_info": {
        "prefix": "db_set_struct_info",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_set_struct_info(${1:DB:db}, ${2:;_}, ${3:e_SQLITE3}:iOffset}, ${4:iValue})$0"
    },
    "db_set_row_index": {
        "prefix": "db_set_row_index",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_set_row_index(${1:DBResult:dbrResult}, ${2:iRow})$0"
    },
    "db_get_row_index": {
        "prefix": "db_get_row_index",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_get_row_index(${1:DBResult:dbrResult})$0"
    },
    "db_open_persistent": {
        "prefix": "db_open_persistent",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_open_persistent(${1:szName[]})$0"
    },
    "db_close_hook": {
        "prefix": "db_close_hook",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_close_hook(${1:DB:db})$0"
    },
    "db_query_int": {
        "prefix": "db_query_int",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_query_int(${1:DB:db}, ${2:szQuery[]}, ${3:iField = 0})$0"
    },
    "db_query_float": {
        "prefix": "db_query_float",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_query_float(${1:DB:db}, ${2:szQuery[]}, ${3:iField = 0})$0"
    },
    "db_is_result_freed": {
        "prefix": "db_is_result_freed",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_is_result_freed(${1:DBResult:dbrResult})$0"
    },
    "db_free_result_hook": {
        "prefix": "db_free_result_hook",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_free_result_hook(${1:DBResult:dbrResult})$0"
    },
    "db_free_persistent": {
        "prefix": "db_free_persistent",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_free_persistent(${1:DB:db})$0"
    },
    "db_changes": {
        "prefix": "db_changes",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_changes(${1:DB:db})$0"
    },
    "db_begin_transaction": {
        "prefix": "db_begin_transaction",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_begin_transaction(${1:DB:db})$0"
    },
    "db_end_transaction": {
        "prefix": "db_end_transaction",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_end_transaction(${1:DB:db})$0"
    },
    "db_set_asynchronous": {
        "prefix": "db_set_asynchronous",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_set_asynchronous(${1:DB:db}, ${2:bool:bSet = true})$0"
    },
    "db_set_synchronous": {
        "prefix": "db_set_synchronous",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_set_synchronous(${1:DB:db}, ${2:DB::e_SYNCHRONOUS_MODE:iValue})$0"
    },
    "db_attach_memory_db": {
        "prefix": "db_attach_memory_db",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_attach_memory_db(${1:DB:db}, ${2:szName[]})$0"
    },
    "db_detach_memory_db": {
        "prefix": "db_detach_memory_db",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_detach_memory_db(${1:DB:db}, ${2:szName[]})$0"
    },
    "db_total_changes": {
        "prefix": "db_total_changes",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_total_changes(${1:DB:db})$0"
    },
    "db_last_insert_rowid": {
        "prefix": "db_last_insert_rowid",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_last_insert_rowid(${1:DB:db})$0"
    },
    "db_field_is_null": {
        "prefix": "db_field_is_null",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_field_is_null(${1:DBResult:dbrResult}, ${2:iField})$0"
    },
    "db_autofree_result": {
        "prefix": "db_autofree_result",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_autofree_result(${1:DBResult:dbrResult})$0"
    },
    "db_prepare": {
        "prefix": "db_prepare",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_prepare(${1:DB:db}, ${2:szQuery[]})$0"
    },
    "stmt_bind_value": {
        "prefix": "stmt_bind_value",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "stmt_bind_value(${1:&DBStatement:stStatement}, ${2:iParam}, ${3:DBDataType:iType}, ${4:;Float}, ${5:_}:...})$0"
    },
    "stmt_bind_result_field": {
        "prefix": "stmt_bind_result_field",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "stmt_bind_result_field(${1:&DBStatement:stStatement}, ${2:iField}, ${3:DBDataType:iType}, ${4:;Float}, ${5:_}:...})$0"
    },
    "stmt_skip_row": {
        "prefix": "stmt_skip_row",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_skip_row(${1:&DBStatement:stStatement})$0"
    },
    "stmt_fetch_row": {
        "prefix": "stmt_fetch_row",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_fetch_row(${1:&DBStatement:stStatement})$0"
    },
    "stmt_rows_left": {
        "prefix": "stmt_rows_left",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_rows_left(${1:&DBStatement:stStatement})$0"
    },
    "stmt_execute": {
        "prefix": "stmt_execute",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "stmt_execute(${1:&DBStatement:stStatement}, ${2:bool:bStoreResult = true}, ${3:bool:bAutoFreeResult = true})$0"
    },
    "stmt_free_result": {
        "prefix": "stmt_free_result",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_free_result(${1:&DBStatement:stStatement})$0"
    },
    "stmt_close": {
        "prefix": "stmt_close",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_close(${1:&DBStatement:stStatement})$0"
    },
    "stmt_autoclose": {
        "prefix": "stmt_autoclose",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "stmt_autoclose(${1:&DBStatement:stStatement})$0"
    },
    "db_get_last_error": {
        "prefix": "db_get_last_error",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_get_last_error()$0"
    },
    "db_get_field_hook": {
        "prefix": "db_get_field_hook",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "db_get_field_hook(${1:DBResult:dbresult}, ${2:field}, ${3:result[]}, ${4:maxlength = sizeof(result})$0"
    },
    "db_get_field_assoc_hook": {
        "prefix": "db_get_field_assoc_hook",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body":
            "db_get_field_assoc_hook(${1:DBResult:dbresult}, ${2:field[]}, ${3:result[]}, ${4:maxlength = sizeof(result})$0"
    },
    "db_dump_table": {
        "prefix": "db_dump_table",
        "body": "db_dump_table(${1:DB:db}, ${2:szTable[]}, ${3:szFilename[]})$0"
    },
    "db_print_result": {
        "prefix": "db_print_result",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_print_result(${1:DBResult:dbrResult}, ${2:iMaxFieldLength = 40})$0"
    },
    "db_print_query": {
        "prefix": "db_print_query",
        "description": "Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.",
        "body": "db_print_query(${1:DB:db}, ${2:szQuery[]}, ${3:iMaxFieldLength = 40})$0"
    },
    "sscanf": {
        "prefix": "sscanf",
        "body": "sscanf(${1:const data[]}, ${2:const format[]}, ${3:...})$0"
    },
    "unformat": {
        "prefix": "unformat",
        "body": "unformat(${1:const data[]}, ${2:const format[]}, ${3:...})$0"
    },
    "Streamer_GetTickRate": {
        "prefix": "Streamer_GetTickRate",
        "body": "Streamer_GetTickRate()$0"
    },
    "Streamer_SetTickRate": {
        "prefix": "Streamer_SetTickRate",
        "body": "Streamer_SetTickRate(${1:rate})$0"
    },
    "Streamer_GetPlayerTickRate": {
        "prefix": "Streamer_GetPlayerTickRate",
        "body": "Streamer_GetPlayerTickRate(${1:playerid})$0"
    },
    "Streamer_SetPlayerTickRate": {
        "prefix": "Streamer_SetPlayerTickRate",
        "body": "Streamer_SetPlayerTickRate(${1:playerid}, ${2:rate})$0"
    },
    "Streamer_ToggleChunkStream": {
        "prefix": "Streamer_ToggleChunkStream",
        "body": "Streamer_ToggleChunkStream(${1:toggle})$0"
    },
    "Streamer_IsToggleChunkStream": {
        "prefix": "Streamer_IsToggleChunkStream",
        "body": "Streamer_IsToggleChunkStream()$0"
    },
    "Streamer_GetChunkTickRate": {
        "prefix": "Streamer_GetChunkTickRate",
        "body": "Streamer_GetChunkTickRate(${1:type}, ${2:playerid = -1})$0"
    },
    "Streamer_SetChunkTickRate": {
        "prefix": "Streamer_SetChunkTickRate",
        "body": "Streamer_SetChunkTickRate(${1:type}, ${2:rate}, ${3:playerid = -1})$0"
    },
    "Streamer_GetChunkSize": {
        "prefix": "Streamer_GetChunkSize",
        "body": "Streamer_GetChunkSize(${1:type})$0"
    },
    "Streamer_SetChunkSize": {
        "prefix": "Streamer_SetChunkSize",
        "body": "Streamer_SetChunkSize(${1:type}, ${2:size})$0"
    },
    "Streamer_GetMaxItems": {
        "prefix": "Streamer_GetMaxItems",
        "body": "Streamer_GetMaxItems(${1:type})$0"
    },
    "Streamer_SetMaxItems": {
        "prefix": "Streamer_SetMaxItems",
        "body": "Streamer_SetMaxItems(${1:type}, ${2:items})$0"
    },
    "Streamer_GetVisibleItems": {
        "prefix": "Streamer_GetVisibleItems",
        "body": "Streamer_GetVisibleItems(${1:type}, ${2:playerid = -1})$0"
    },
    "Streamer_SetVisibleItems": {
        "prefix": "Streamer_SetVisibleItems",
        "body": "Streamer_SetVisibleItems(${1:type}, ${2:items}, ${3:playerid = -1})$0"
    },
    "Streamer_GetRadiusMultiplier": {
        "prefix": "Streamer_GetRadiusMultiplier",
        "body":
            "Streamer_GetRadiusMultiplier(${1:type}, ${2:&Float:multiplier}, ${3:playerid = -1})$0"
    },
    "Streamer_SetRadiusMultiplier": {
        "prefix": "Streamer_SetRadiusMultiplier",
        "body":
            "Streamer_SetRadiusMultiplier(${1:type}, ${2:Float:multiplier}, ${3:playerid = -1})$0"
    },
    "Streamer_GetTypePriority": {
        "prefix": "Streamer_GetTypePriority",
        "body": "Streamer_GetTypePriority(${1:types[]}, ${2:maxtypes = sizeof types})$0"
    },
    "Streamer_SetTypePriority": {
        "prefix": "Streamer_SetTypePriority",
        "body": "Streamer_SetTypePriority(${1:const types[]}, ${2:maxtypes = sizeof types})$0"
    },
    "Streamer_GetCellDistance": {
        "prefix": "Streamer_GetCellDistance",
        "body": "Streamer_GetCellDistance(${1:&Float:distance})$0"
    },
    "Streamer_SetCellDistance": {
        "prefix": "Streamer_SetCellDistance",
        "body": "Streamer_SetCellDistance(${1:Float:distance})$0"
    },
    "Streamer_GetCellSize": {
        "prefix": "Streamer_GetCellSize",
        "body": "Streamer_GetCellSize(${1:&Float:size})$0"
    },
    "Streamer_SetCellSize": {
        "prefix": "Streamer_SetCellSize",
        "body": "Streamer_SetCellSize(${1:Float:size})$0"
    },
    "Streamer_ToggleItemStatic": {
        "prefix": "Streamer_ToggleItemStatic",
        "body": "Streamer_ToggleItemStatic(${1:type}, ${2:id}, ${3:toggle})$0"
    },
    "Streamer_IsToggleItemStatic": {
        "prefix": "Streamer_IsToggleItemStatic",
        "body": "Streamer_IsToggleItemStatic(${1:type}, ${2:id})$0"
    },
    "Streamer_ToggleItemInvAreas": {
        "prefix": "Streamer_ToggleItemInvAreas",
        "body": "Streamer_ToggleItemInvAreas(${1:type}, ${2:id}, ${3:toggle})$0"
    },
    "Streamer_IsToggleItemInvAreas": {
        "prefix": "Streamer_IsToggleItemInvAreas",
        "body": "Streamer_IsToggleItemInvAreas(${1:type}, ${2:id})$0"
    },
    "Streamer_ToggleItemCallbacks": {
        "prefix": "Streamer_ToggleItemCallbacks",
        "body": "Streamer_ToggleItemCallbacks(${1:type}, ${2:id}, ${3:toggle})$0"
    },
    "Streamer_IsToggleItemCallbacks": {
        "prefix": "Streamer_IsToggleItemCallbacks",
        "body": "Streamer_IsToggleItemCallbacks(${1:type}, ${2:id})$0"
    },
    "Streamer_ToggleErrorCallback": {
        "prefix": "Streamer_ToggleErrorCallback",
        "body": "Streamer_ToggleErrorCallback(${1:toggle})$0"
    },
    "Streamer_IsToggleErrorCallback": {
        "prefix": "Streamer_IsToggleErrorCallback",
        "body": "Streamer_IsToggleErrorCallback()$0"
    },
    "Streamer_AmxUnloadDestroyItems": {
        "prefix": "Streamer_AmxUnloadDestroyItems",
        "body": "Streamer_AmxUnloadDestroyItems(${1:toggle})$0"
    },
    "Streamer_ProcessActiveItems": {
        "prefix": "Streamer_ProcessActiveItems",
        "body": "Streamer_ProcessActiveItems()$0"
    },
    "Streamer_ToggleIdleUpdate": {
        "prefix": "Streamer_ToggleIdleUpdate",
        "body": "Streamer_ToggleIdleUpdate(${1:playerid}, ${2:toggle})$0"
    },
    "Streamer_IsToggleIdleUpdate": {
        "prefix": "Streamer_IsToggleIdleUpdate",
        "body": "Streamer_IsToggleIdleUpdate(${1:playerid})$0"
    },
    "Streamer_ToggleCameraUpdate": {
        "prefix": "Streamer_ToggleCameraUpdate",
        "body": "Streamer_ToggleCameraUpdate(${1:playerid}, ${2:toggle})$0"
    },
    "Streamer_IsToggleCameraUpdate": {
        "prefix": "Streamer_IsToggleCameraUpdate",
        "body": "Streamer_IsToggleCameraUpdate(${1:playerid})$0"
    },
    "Streamer_ToggleItemUpdate": {
        "prefix": "Streamer_ToggleItemUpdate",
        "body": "Streamer_ToggleItemUpdate(${1:playerid}, ${2:type}, ${3:toggle})$0"
    },
    "Streamer_IsToggleItemUpdate": {
        "prefix": "Streamer_IsToggleItemUpdate",
        "body": "Streamer_IsToggleItemUpdate(${1:playerid}, ${2:type})$0"
    },
    "Streamer_GetLastUpdateTime": {
        "prefix": "Streamer_GetLastUpdateTime",
        "body": "Streamer_GetLastUpdateTime(${1:&Float:time})$0"
    },
    "Streamer_Update": {
        "prefix": "Streamer_Update",
        "body": "Streamer_Update(${1:playerid}, ${2:type = -1})$0"
    },
    "Streamer_UpdateEx": {
        "prefix": "Streamer_UpdateEx",
        "body":
            "Streamer_UpdateEx(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:worldid = -1}, ${6:interiorid = -1}, ${7:type = -1})$0"
    },
    "Streamer_GetFloatData": {
        "prefix": "Streamer_GetFloatData",
        "body":
            "Streamer_GetFloatData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:&Float:result})$0"
    },
    "Streamer_SetFloatData": {
        "prefix": "Streamer_SetFloatData",
        "body":
            "Streamer_SetFloatData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:Float:value})$0"
    },
    "Streamer_GetIntData": {
        "prefix": "Streamer_GetIntData",
        "body": "Streamer_GetIntData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data})$0"
    },
    "Streamer_SetIntData": {
        "prefix": "Streamer_SetIntData",
        "body": "Streamer_SetIntData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:value})$0"
    },
    "Streamer_GetArrayData": {
        "prefix": "Streamer_GetArrayData",
        "body":
            "Streamer_GetArrayData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:dest[]}, ${5:maxdest = sizeof dest})$0"
    },
    "Streamer_SetArrayData": {
        "prefix": "Streamer_SetArrayData",
        "body":
            "Streamer_SetArrayData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:const src[]}, ${5:maxsrc = sizeof src})$0"
    },
    "Streamer_IsInArrayData": {
        "prefix": "Streamer_IsInArrayData",
        "body":
            "Streamer_IsInArrayData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:value})$0"
    },
    "Streamer_AppendArrayData": {
        "prefix": "Streamer_AppendArrayData",
        "body":
            "Streamer_AppendArrayData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:value})$0"
    },
    "Streamer_RemoveArrayData": {
        "prefix": "Streamer_RemoveArrayData",
        "body":
            "Streamer_RemoveArrayData(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:data}, ${4:value})$0"
    },
    "Streamer_GetArrayDataLength": {
        "prefix": "Streamer_GetArrayDataLength",
        "body": "Streamer_GetArrayDataLength(${1:type}, ${2:id}, ${3:data})$0"
    },
    "Streamer_GetUpperBound": {
        "prefix": "Streamer_GetUpperBound",
        "body": "Streamer_GetUpperBound(${1:type})$0"
    },
    "Streamer_GetDistanceToItem": {
        "prefix": "Streamer_GetDistanceToItem",
        "body":
            "Streamer_GetDistanceToItem(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:type}, ${5:STREAMER_ALL_TAGS id}, ${6:&Float:distance}, ${7:dimensions = 3})$0"
    },
    "Streamer_ToggleItem": {
        "prefix": "Streamer_ToggleItem",
        "body": "Streamer_ToggleItem(${1:playerid}, ${2:type}, ${3:id}, ${4:toggle})$0"
    },
    "Streamer_IsToggleItem": {
        "prefix": "Streamer_IsToggleItem",
        "body": "Streamer_IsToggleItem(${1:playerid}, ${2:type}, ${3:id})$0"
    },
    "Streamer_ToggleAllItems": {
        "prefix": "Streamer_ToggleAllItems",
        "body": "Streamer_ToggleAllItems(${1:playerid}, ${2:type}, ${3:toggle}, ${4:exceptions[] = { -1 }, ${5:maxexceptions = sizeof exceptions})$0"
    },
    "Streamer_ToggleStaticItem": {
        "prefix": "Streamer_ToggleStaticItem",
        "body": "Streamer_ToggleStaticItem(${1:type}, ${2:STREAMER_ALL_TAGS id}, ${3:toggle})$0"
    },
    "Streamer_IsToggleStaticItem": {
        "prefix": "Streamer_IsToggleStaticItem",
        "body": "Streamer_IsToggleStaticItem(${1:type}, ${2:STREAMER_ALL_TAGS id})$0"
    },
    "Streamer_GetItemInternalID": {
        "prefix": "Streamer_GetItemInternalID",
        "body":
            "Streamer_GetItemInternalID(${1:playerid}, ${2:type}, ${3:STREAMER_ALL_TAGS streamerid})$0"
    },
    "Streamer_GetItemStreamerID": {
        "prefix": "Streamer_GetItemStreamerID",
        "body": "Streamer_GetItemStreamerID(${1:playerid}, ${2:type}, ${3:internalid})$0"
    },
    "Streamer_IsItemVisible": {
        "prefix": "Streamer_IsItemVisible",
        "body": "Streamer_IsItemVisible(${1:playerid}, ${2:type}, ${3:STREAMER_ALL_TAGS id})$0"
    },
    "Streamer_DestroyAllVisibleItems": {
        "prefix": "Streamer_DestroyAllVisibleItems",
        "body": "Streamer_DestroyAllVisibleItems(${1:playerid}, ${2:type}, ${3:serverwide = 1})$0"
    },
    "Streamer_CountVisibleItems": {
        "prefix": "Streamer_CountVisibleItems",
        "body": "Streamer_CountVisibleItems(${1:playerid}, ${2:type}, ${3:serverwide = 1})$0"
    },
    "Streamer_DestroyAllItems": {
        "prefix": "Streamer_DestroyAllItems",
        "body": "Streamer_DestroyAllItems(${1:type}, ${2:serverwide = 1})$0"
    },
    "Streamer_CountItems": {
        "prefix": "Streamer_CountItems",
        "body": "Streamer_CountItems(${1:type}, ${2:serverwide = 1})$0"
    },
    "Streamer_GetNearbyItems": {
        "prefix": "Streamer_GetNearbyItems",
        "body": 
            "Streamer_GetNearbyItems(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:type}, ${5:items[]}, ${6:maxitems = sizeof items}, ${7:Float:range = 300.0}, ${8:worldid = -1})$0"
    },
    "Streamer_GetAllVisibleItems": {
        "prefix": "Streamer_GetAllVisibleItems",
        "body": 
            "Streamer_GetAllVisibleItems(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:type}, ${5:items[]}, ${6:maxitems = sizeof items})$0"
    },
    "Streamer_GetItemPos": {
        "prefix": "Streamer_GetItemPos",
        "body": "Streamer_GetItemPos(${1:type}, ${2:id}, ${3:&Float:x}, ${4:&Float:y}, ${5:&Float:z})$0"
    },
    "Streamer_SetItemPos": {
        "prefix": "Streamer_SetItemPos",
        "body": "Streamer_SetItemPos(${1:type}, ${2:id}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "Streamer_GetItemOffset": {
        "prefix": "Streamer_GetItemOffset",
        "body": "Streamer_GetItemOffset(${1:type}, ${2:id}, ${3:&Float:x}, ${4:&Float:y}, ${5:&Float:z})$0"
    },
    "Streamer_SetItemOffset": {
        "prefix": "Streamer_SetItemOffset",
        "body": "Streamer_SetItemOffset(${1:type}, ${2:id}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"
    },
    "CreateDynamicObject": {
        "prefix": "CreateDynamicObject",
        "body":
            "CreateDynamicObject(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz}, ${8:worldid = -1}, ${9:interiorid = -1}, ${10:playerid = -1}, ${11:Float:streamdistance = STREAMER_OBJECT_SD}, ${12:Float:drawdistance = STREAMER_OBJECT_DD}, ${13:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1})$0"
    },
    "DestroyDynamicObject": {
        "prefix": "DestroyDynamicObject",
        "body": "DestroyDynamicObject(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "IsValidDynamicObject": {
        "prefix": "IsValidDynamicObject",
        "body": "IsValidDynamicObject(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "SetDynamicObjectPos": {
        "prefix": "SetDynamicObjectPos",
        "body":
            "SetDynamicObjectPos(${1:STREAMER_TAG_OBJECT objectid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "GetDynamicObjectPos": {
        "prefix": "GetDynamicObjectPos",
        "body":
            "GetDynamicObjectPos(${1:STREAMER_TAG_OBJECT objectid}, ${2:&Float:x}, ${3:&Float:y}, ${4:&Float:z})$0"
    },
    "SetDynamicObjectRot": {
        "prefix": "SetDynamicObjectRot",
        "body":
            "SetDynamicObjectRot(${1:STREAMER_TAG_OBJECT objectid}, ${2:Float:rx}, ${3:Float:ry}, ${4:Float:rz})$0"
    },
    "GetDynamicObjectRot": {
        "prefix": "GetDynamicObjectRot",
        "body":
            "GetDynamicObjectRot(${1:STREAMER_TAG_OBJECT objectid}, ${2:&Float:rx}, ${3:&Float:ry}, ${4:&Float:rz})$0"
    },
    "SetDynamicObjectNoCameraCol": {
        "prefix": "SetDynamicObjectNoCameraCol",
        "body": "SetDynamicObjectNoCameraCol(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "GetDynamicObjectNoCameraCol": {
        "prefix": "GetDynamicObjectNoCameraCol",
        "body": "GetDynamicObjectNoCameraCol(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "MoveDynamicObject": {
        "prefix": "MoveDynamicObject",
        "body":
            "MoveDynamicObject(${1:STREAMER_TAG_OBJECT objectid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:speed}, ${6:Float:rx = -1000.0}, ${7:Float:ry = -1000.0}, ${8:Float:rz = -1000.0})$0"
    },
    "StopDynamicObject": {
        "prefix": "StopDynamicObject",
        "body": "StopDynamicObject(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "IsDynamicObjectMoving": {
        "prefix": "IsDynamicObjectMoving",
        "body": "IsDynamicObjectMoving(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "AttachCameraToDynamicObject": {
        "prefix": "AttachCameraToDynamicObject",
        "body": "AttachCameraToDynamicObject(${1:playerid}, ${2:STREAMER_TAG_OBJECT objectid})$0"
    },
    "AttachDynamicObjectToObject": {
        "prefix": "AttachDynamicObjectToObject",
        "body":
            "AttachDynamicObjectToObject(${1:STREAMER_TAG_OBJECT objectid}, ${2:attachtoid}, ${3:Float:offsetx}, ${4:Float:offsety}, ${5:Float:offsetz}, ${6:Float:rx}, ${7:Float:ry}, ${8:Float:rz}, ${9:syncrotation = 1})$0"
    },
    "AttachDynamicObjectToPlayer": {
        "prefix": "AttachDynamicObjectToPlayer",
        "body":
            "AttachDynamicObjectToPlayer(${1:STREAMER_TAG_OBJECT objectid}, ${2:playerid}, ${3:Float:offsetx}, ${4:Float:offsety}, ${5:Float:offsetz}, ${6:Float:rx}, ${7:Float:ry}, ${8:Float:rz})$0"
    },
    "AttachDynamicObjectToVehicle": {
        "prefix": "AttachDynamicObjectToVehicle",
        "body":
            "AttachDynamicObjectToVehicle(${1:STREAMER_TAG_OBJECT objectid}, ${2:vehicleid}, ${3:Float:offsetx}, ${4:Float:offsety}, ${5:Float:offsetz}, ${6:Float:rx}, ${7:Float:ry}, ${8:Float:rz})$0"
    },
    "EditDynamicObject": {
        "prefix": "EditDynamicObject",
        "body": "EditDynamicObject(${1:playerid}, ${2:STREAMER_TAG_OBJECT objectid})$0"
    },
    "IsDynamicObjectMaterialUsed": {
        "prefix": "IsDynamicObjectMaterialUsed",
        "body":
            "IsDynamicObjectMaterialUsed(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex})$0"
    },
    "GetDynamicObjectMaterial": {
        "prefix": "GetDynamicObjectMaterial",
        "body":
            "GetDynamicObjectMaterial(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex}, ${3:&modelid}, ${4:txdname[]}, ${5:texturename[]}, ${6:&materialcolor}, ${7:maxtxdname = sizeof txdname}, ${8:maxtexturename = sizeof texturename})$0"
    },
    "SetDynamicObjectMaterial": {
        "prefix": "SetDynamicObjectMaterial",
        "body":
            "SetDynamicObjectMaterial(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex}, ${3:modelid}, ${4:const txdname[]}, ${5:const texturename[]}, ${6:materialcolor = 0})$0"
    },
    "IsDynamicObjectMaterialTextUsed": {
        "prefix": "IsDynamicObjectMaterialTextUsed",
        "body":
            "IsDynamicObjectMaterialTextUsed(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex})$0"
    },
    "GetDynamicObjectMaterialText": {
        "prefix": "GetDynamicObjectMaterialText",
        "body":
            "GetDynamicObjectMaterialText(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex}, ${3:text[]}, ${4:&materialsize}, ${5:fontface[]}, ${6:&fontsize}, ${7:&bold}, ${8:&fontcolor}, ${9:&backcolor}, ${10:&textalignment}, ${11:maxtext = sizeof text}, ${12:maxfontface = sizeof fontface})$0"
    },
    "SetDynamicObjectMaterialText": {
        "prefix": "SetDynamicObjectMaterialText",
        "body":
            "SetDynamicObjectMaterialText(${1:STREAMER_TAG_OBJECT objectid}, ${2:materialindex}, ${3:const text[]}, ${4:materialsize = OBJECT_MATERIAL_SIZE_256x128}, ${5:const fontface[] = \"Arial\"}, ${6:fontsize = 24}, ${7:bold = 1}, ${8:fontcolor = 0xFFFFFFFF}, ${9:backcolor = 0}, ${10:textalignment = 0})$0"
    },
    "GetPlayerCameraTargetDynObject": {
        "prefix": "GetPlayerCameraTargetDynObject",
        "body": "GetPlayerCameraTargetDynObject(${1:playerid})$0"
    },
    "CreateDynamicPickup": {
        "prefix": "CreateDynamicPickup",
        "body":
            "CreateDynamicPickup(${1:modelid}, ${2:type}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:worldid = -1}, ${7:interiorid = -1}, ${8:playerid = -1}, ${9:Float:streamdistance = STREAMER_PICKUP_SD}, ${10:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1}, ${11:priority =0})$0"
    },
    "DestroyDynamicPickup": {
        "prefix": "DestroyDynamicPickup",
        "body": "DestroyDynamicPickup(${1:STREAMER_TAG_PICKUP pickupid})$0"
    },
    "IsValidDynamicPickup": {
        "prefix": "IsValidDynamicPickup",
        "body": "IsValidDynamicPickup(${1:STREAMER_TAG_PICKUP pickupid})$0"
    },
    "CreateDynamicCP": {
        "prefix": "CreateDynamicCP",
        "body":
            "CreateDynamicCP(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:size}, ${5:worldid = -1}, ${6:interiorid = -1}, ${7:playerid = -1}, ${8:Float:streamdistance = STREAMER_CP_SD}, ${9:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1}, ${10:priority = 0})$0"
    },
    "DestroyDynamicCP": {
        "prefix": "DestroyDynamicCP",
        "body": "DestroyDynamicCP(${1:STREAMER_TAG_CP checkpointid})$0"
    },
    "IsValidDynamicCP": {
        "prefix": "IsValidDynamicCP",
        "body": "IsValidDynamicCP(${1:STREAMER_TAG_CP checkpointid})$0"
    },
    "TogglePlayerDynamicCP": {
        "prefix": "TogglePlayerDynamicCP",
        "body":
            "TogglePlayerDynamicCP(${1:playerid}, ${2:STREAMER_TAG_CP checkpointid}, ${3:toggle})$0"
    },
    "TogglePlayerAllDynamicCPs": {
        "prefix": "TogglePlayerAllDynamicCPs",
        "body": "TogglePlayerAllDynamicCPs(${1:playerid}, ${2:toggle})$0"
    },
    "IsPlayerInDynamicCP": {
        "prefix": "IsPlayerInDynamicCP",
        "body": "IsPlayerInDynamicCP(${1:playerid}, ${2:STREAMER_TAG_CP checkpointid})$0"
    },
    "GetPlayerVisibleDynamicCP": {
        "prefix": "GetPlayerVisibleDynamicCP",
        "body": "GetPlayerVisibleDynamicCP(${1:playerid})$0"
    },
    "CreateDynamicRaceCP": {
        "prefix": "CreateDynamicRaceCP",
        "body":
            "CreateDynamicRaceCP(${1:type}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:nextx}, ${6:Float:nexty}, ${7:Float:nextz}, ${8:Float:size}, ${9:worldid = -1}, ${10:interiorid = -1}, ${11:playerid = -1}, ${12:Float:streamdistance = STREAMER_RACE_CP_SD}, ${13:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1}, ${14:priority = 0})$0"
    },
    "DestroyDynamicRaceCP": {
        "prefix": "DestroyDynamicRaceCP",
        "body": "DestroyDynamicRaceCP(${1:STREAMER_TAG_RACE_CP checkpointid})$0"
    },
    "IsValidDynamicRaceCP": {
        "prefix": "IsValidDynamicRaceCP",
        "body": "IsValidDynamicRaceCP(${1:STREAMER_TAG_RACE_CP checkpointid})$0"
    },
    "TogglePlayerDynamicRaceCP": {
        "prefix": "TogglePlayerDynamicRaceCP",
        "body":
            "TogglePlayerDynamicRaceCP(${1:playerid}, ${2:STREAMER_TAG_RACE_CP checkpointid}, ${3:toggle})$0"
    },
    "TogglePlayerAllDynamicRaceCPs": {
        "prefix": "TogglePlayerAllDynamicRaceCPs",
        "body": "TogglePlayerAllDynamicRaceCPs(${1:playerid}, ${2:toggle})$0"
    },
    "IsPlayerInDynamicRaceCP": {
        "prefix": "IsPlayerInDynamicRaceCP",
        "body": "IsPlayerInDynamicRaceCP(${1:playerid}, ${2:STREAMER_TAG_RACE_CP checkpointid})$0"
    },
    "GetPlayerVisibleDynamicRaceCP": {
        "prefix": "GetPlayerVisibleDynamicRaceCP",
        "body": "GetPlayerVisibleDynamicRaceCP(${1:playerid})$0"
    },
    "CreateDynamicMapIcon": {
        "prefix": "CreateDynamicMapIcon",
        "body":
            "CreateDynamicMapIcon(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:type}, ${5:color}, ${6:worldid = -1}, ${7:interiorid = -1}, ${8:playerid = -1}, ${9:Float:streamdistance = STREAMER_MAP_ICON_SD}, ${10:style = MAPICON_LOCAL}, ${11:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1}, ${12:priority = 0})$0"
    },
    "DestroyDynamicMapIcon": {
        "prefix": "DestroyDynamicMapIcon",
        "body": "DestroyDynamicMapIcon(${1:STREAMER_TAG_MAP_ICON iconid})$0"
    },
    "IsValidDynamicMapIcon": {
        "prefix": "IsValidDynamicMapIcon",
        "body": "IsValidDynamicMapIcon(${1:STREAMER_TAG_MAP_ICON iconid})$0"
    },
    "CreateDynamic3DTextLabel": {
        "prefix": "CreateDynamic3DTextLabel",
        "body":
            "CreateDynamic3DTextLabel(${1:const text[]}, ${2:color}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:Float:drawdistance}, ${7:attachedplayer = INVALID_PLAYER_ID}, ${8:attachedvehicle = INVALID_VEHICLE_ID}, ${9:testlos = 0}, ${10:worldid = -1}, ${11:interiorid = -1}, ${12:playerid = -1}, ${13:Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD}, ${14:STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1}, ${15:priority = 0})$0"
    },
    "DestroyDynamic3DTextLabel": {
        "prefix": "DestroyDynamic3DTextLabel",
        "body": "DestroyDynamic3DTextLabel(${1:STREAMER_TAG_3D_TEXT_LABEL id})$0"
    },
    "IsValidDynamic3DTextLabel": {
        "prefix": "IsValidDynamic3DTextLabel",
        "body": "IsValidDynamic3DTextLabel(${1:STREAMER_TAG_3D_TEXT_LABEL id})$0"
    },
    "GetDynamic3DTextLabelText": {
        "prefix": "GetDynamic3DTextLabelText",
        "body":
            "GetDynamic3DTextLabelText(${1:STREAMER_TAG_3D_TEXT_LABEL id}, ${2:text[]}, ${3:maxtext = sizeof text})$0"
    },
    "UpdateDynamic3DTextLabelText": {
        "prefix": "UpdateDynamic3DTextLabelText",
        "body":
            "UpdateDynamic3DTextLabelText(${1:STREAMER_TAG_3D_TEXT_LABEL id}, ${2:color}, ${3:const text[]})$0"
    },
    "CreateDynamicCircle": {
        "prefix": "CreateDynamicCircle",
        "body":
            "CreateDynamicCircle(${1:Float:x}, ${2:Float:y}, ${3:Float:size}, ${4:worldid = -1}, ${5:interiorid = -1}, ${6:playerid = -1})$0"
    },
    "CreateDynamicCylinder": {
        "prefix": "CreateDynamicCylinder",
        "body":
            "CreateDynamicCylinder(${1:Float:x}, ${2:Float:y}, ${3:Float:minz}, ${4:Float:maxz}, ${5:Float:size}, ${6:worldid = -1}, ${7:interiorid = -1}, ${8:playerid = -1})$0"
    },
    "CreateDynamicSphere": {
        "prefix": "CreateDynamicSphere",
        "body":
            "CreateDynamicSphere(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:size}, ${5:worldid = -1}, ${6:interiorid = -1}, ${7:playerid = -1})$0"
    },
    "CreateDynamicRectangle": {
        "prefix": "CreateDynamicRectangle",
        "body":
            "CreateDynamicRectangle(${1:Float:minx}, ${2:Float:miny}, ${3:Float:maxx}, ${4:Float:maxy}, ${5:worldid = -1}, ${6:interiorid = -1}, ${7:playerid = -1})$0"
    },
    "CreateDynamicCuboid": {
        "prefix": "CreateDynamicCuboid",
        "body":
            "CreateDynamicCuboid(${1:Float:minx}, ${2:Float:miny}, ${3:Float:minz}, ${4:Float:maxx}, ${5:Float:maxy}, ${6:Float:maxz}, ${7:worldid = -1}, ${8:interiorid = -1}, ${9:playerid = -1})$0"
    },
    "CreateDynamicCube": {
        "prefix": "CreateDynamicCube",
        "body":
            "CreateDynamicCube(${1:Float:minx}, ${2:Float:miny}, ${3:Float:minz}, ${4:Float:maxx}, ${5:Float:maxy}, ${6:Float:maxz}, ${7:worldid = -1}, ${8:interiorid = -1}, ${9:playerid = -1})$0"
    },
    "CreateDynamicPolygon": {
        "prefix": "CreateDynamicPolygon",
        "body":
            "CreateDynamicPolygon(${1:Float:points[]}, ${2:Float:minz = -FLOAT_INFINITY}, ${3:Float:maxz = FLOAT_INFINITY}, ${4:maxpoints = sizeof points}, ${5:worldid = -1}, ${6:interiorid = -1}, ${7:playerid = -1})$0"
    },
    "DestroyDynamicArea": {
        "prefix": "DestroyDynamicArea",
        "body": "DestroyDynamicArea(${1:STREAMER_TAG_AREA areaid})$0"
    },
    "IsValidDynamicArea": {
        "prefix": "IsValidDynamicArea",
        "body": "IsValidDynamicArea(${1:STREAMER_TAG_AREA areaid})$0"
    },
    "GetDynamicAreaType":{
        "prefix" : "GetDynamicAreaType",
        "body": "GetDynamicAreaType({1:areaid})$0"
    },
    "GetDynamicPolygonPoints": {
        "prefix": "GetDynamicPolygonPoints",
        "body":
            "GetDynamicPolygonPoints(${1:STREAMER_TAG_AREA areaid}, ${2:Float:points[]}, ${3:maxpoints = sizeof points})$0"
    },
    "GetDynamicPolygonNumberPoints": {
        "prefix": "GetDynamicPolygonNumberPoints",
        "body": "GetDynamicPolygonNumberPoints(${1:STREAMER_TAG_AREA areaid})$0"
    },
    "TogglePlayerDynamicArea": {
        "prefix": "TogglePlayerDynamicArea",
        "body":
            "TogglePlayerDynamicArea(${1:playerid}, ${2:STREAMER_TAG_AREA areaid}, ${3:toggle})$0"
    },
    "TogglePlayerAllDynamicAreas": {
        "prefix": "TogglePlayerAllDynamicAreas",
        "body": "TogglePlayerAllDynamicAreas(${1:playerid}, ${2:toggle})$0"
    },
    "IsPlayerInDynamicArea": {
        "prefix": "IsPlayerInDynamicArea",
        "body":
            "IsPlayerInDynamicArea(${1:playerid}, ${2:STREAMER_TAG_AREA areaid}, ${3:recheck = 0})$0"
    },
    "IsPlayerInAnyDynamicArea": {
        "prefix": "IsPlayerInAnyDynamicArea",
        "body": "IsPlayerInAnyDynamicArea(${1:playerid}, ${2:recheck = 0})$0"
    },
    "IsAnyPlayerInDynamicArea": {
        "prefix": "IsAnyPlayerInDynamicArea",
        "body": "IsAnyPlayerInDynamicArea(${1:STREAMER_TAG_AREA areaid}, ${2:recheck = 0})$0"
    },
    "IsAnyPlayerInAnyDynamicArea": {
        "prefix": "IsAnyPlayerInAnyDynamicArea",
        "body": "IsAnyPlayerInAnyDynamicArea(${1:recheck = 0})$0"
    },
    "GetPlayerDynamicAreas": {
        "prefix": "GetPlayerDynamicAreas",
        "body":
            "GetPlayerDynamicAreas(${1:playerid}, ${2:STREAMER_TAG_AREA areas[]}, ${3:maxareas = sizeof areas})$0"
    },
    "GetPlayerNumberDynamicAreas": {
        "prefix": "GetPlayerNumberDynamicAreas",
        "body": "GetPlayerNumberDynamicAreas(${1:playerid})$0"
    },
    "IsPointInDynamicArea": {
        "prefix": "IsPointInDynamicArea",
        "body":
            "IsPointInDynamicArea(${1:STREAMER_TAG_AREA areaid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "IsPointInAnyDynamicArea": {
        "prefix": "IsPointInAnyDynamicArea",
        "body": "IsPointInAnyDynamicArea(${1:Float:x}, ${2:Float:y}, ${3:Float:z})$0"
    },
    "IsLineInDynamicArea": {
        "prefix" : "IsLineInDynamicArea",
        "body": "IsLineInDynamicArea({1:areaid}, ${2:Float:x1}, ${3:Float:y1}, ${4:Float:z1}, ${5:Float:x2}, ${6:Float:y2}, ${7:Float:z2})$0"
    },
    "IsLineInAnyDynamicArea": {
        "prefix" : "IsLineInAnyDynamicArea",
        "body": "IsLineInAnyDynamicArea(${1:Float:x1}, ${2:Float:y1}, ${3:Float:z1}, ${4:Float:x2}, ${5:Float:y2}, ${6:Float:z2})$0"
    },
    "GetDynamicAreasForPoint": {
        "prefix": "GetDynamicAreasForPoint",
        "body":
            "GetDynamicAreasForPoint(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:STREAMER_TAG_AREA areas[]}, ${5:maxareas = sizeof areas})$0"
    },
    "GetNumberDynamicAreasForPoint": {
        "prefix": "GetNumberDynamicAreasForPoint",
        "body": "GetNumberDynamicAreasForPoint(${1:Float:x}, ${2:Float:y}, ${3:Float:z})$0"
    },
    "GetDynamicAreasForLine": {
        "prefix": "GetDynamicAreasForLine",
        "body": "GetDynamicAreasForLine(${1:Float:x1}, ${2:Float:y1}, ${3:Float:z1}, ${4:Float:x2}, ${5:Float:y2}, ${6:Float:z2}, ${7:areas[]}, ${8:maxareas = sizeof areas})$0"
    },
    "GetNumberDynamicAreasForLine": {
        "prefix": "GetNumberDynamicAreasForLine",
        "body": "GetNumberDynamicAreasForLine(${1:Float:x1}, ${2:Float:y1}, ${3:Float:z1}, ${4:Float:x2}, ${5:Float:y2}, ${6:Float:z2})$0"
    },
    "AttachDynamicAreaToObject": {
        "prefix": "AttachDynamicAreaToObject",
        "body":
            "AttachDynamicAreaToObject(${1:STREAMER_TAG_AREA areaid}, ${2:STREAMER_TAG_OBJECT_ALT objectid}, ${3:type = STREAMER_OBJECT_TYPE_DYNAMIC}, ${4:playerid = INVALID_PLAYER_ID}, ${5:Float:offsetx = 0.0}, ${6:Float:offsety = 0.0}, ${7:Float:offsetz = 0.0})$0"
    },
    "AttachDynamicAreaToPlayer": {
        "prefix": "AttachDynamicAreaToPlayer",
        "body":
            "AttachDynamicAreaToPlayer(${1:STREAMER_TAG_AREA areaid}, ${2:playerid}, ${3:Float:offsetx = 0.0}, ${4:Float:offsety = 0.0}, ${5:Float:offsetz = 0.0})$0"
    },
    "AttachDynamicAreaToVehicle": {
        "prefix": "AttachDynamicAreaToVehicle",
        "body":
            "AttachDynamicAreaToVehicle(${1:STREAMER_TAG_AREA areaid}, ${2:vehicleid}, ${3:Float:offsetx = 0.0}, ${4:Float:offsety = 0.0}, ${5:Float:offsetz = 0.0})$0"
    },
    "ToggleDynAreaSpectateMode": {
        "prefix": "ToggleDynAreaSpectateMode",
        "body": "ToggleDynAreaSpectateMode({1:areaid}, ${2:toggle})$0"
    },
    "IsToggleDynAreaSpectateMode": {
        "prefix": "IsToggleDynAreaSpectateMode",
        "body": "IsToggleDynAreaSpectateMode({1:areaid})$0"
    },
    "CreateDynamicObjectEx": {
        "prefix": "CreateDynamicObjectEx",
        "body":
            "CreateDynamicObjectEx(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz}, ${8:Float:streamdistance = STREAMER_OBJECT_SD}, ${9:Float:drawdistance = STREAMER_OBJECT_DD}, ${10:worlds[] = { -1 }}, ${11:interiors[] = { -1 }}, ${12:players[] = { -1 }}, ${13:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${14:maxworlds = sizeof worlds}, ${15:maxinteriors = sizeof interiors}, ${16:maxplayers = sizeof players}, ${17:maxareas = sizeof areas})$0"
    },
    "CreateDynamicPickupEx": {
        "prefix": "CreateDynamicPickupEx",
        "body":
            "CreateDynamicPickupEx(${1:modelid}, ${2:type}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:Float:streamdistance = STREAMER_PICKUP_SD}, ${7:worlds[] = { -1 }}, ${8:interiors[] = { -1 }}, ${9:players[] = { -1 }}, ${10:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${11:maxworlds = sizeof worlds}, ${12:maxinteriors = sizeof interiors}, ${13:maxplayers = sizeof players}, ${14:maxareas = sizeof areas})$0"
    },
    "CreateDynamicCPEx": {
        "prefix": "CreateDynamicCPEx",
        "body":
            "CreateDynamicCPEx(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:size}, ${5:Float:streamdistance = STREAMER_CP_SD}, ${6:worlds[] = { -1 }}, ${7:interiors[] = { -1 }}, ${8:players[] = { -1 }}, ${9:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${10:maxworlds = sizeof worlds}, ${11:maxinteriors = sizeof interiors}, ${12:maxplayers = sizeof players}, ${13:maxareas = sizeof areas})$0"
    },
    "CreateDynamicRaceCPEx": {
        "prefix": "CreateDynamicRaceCPEx",
        "body":
            "CreateDynamicRaceCPEx(${1:type}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:nextx}, ${6:Float:nexty}, ${7:Float:nextz}, ${8:Float:size}, ${9:Float:streamdistance = STREAMER_RACE_CP_SD}, ${10:worlds[] = { -1 }}, ${11:interiors[] = { -1 }}, ${12:players[] = { -1 }}, ${13:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${14:maxworlds = sizeof worlds}, ${15:maxinteriors = sizeof interiors}, ${16:maxplayers = sizeof players}, ${17:maxareas = sizeof areas})$0"
    },
    "CreateDynamicMapIconEx": {
        "prefix": "CreateDynamicMapIconEx",
        "body":
            "CreateDynamicMapIconEx(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:type}, ${5:color}, ${6:style = MAPICON_LOCAL}, ${7:Float:streamdistance = STREAMER_MAP_ICON_SD}, ${8:worlds[] = { -1 }}, ${9:interiors[] = { -1 }}, ${10:players[] = { -1 }}, ${11:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${12:maxworlds = sizeof worlds}, ${13:maxinteriors = sizeof interiors}, ${14:maxplayers = sizeof players}, ${15:maxareas = sizeof areas})$0"
    },
    "CreateDynamic3DTextLabelEx": {
        "prefix": "CreateDynamic3DTextLabelEx",
        "body":
            "CreateDynamic3DTextLabelEx(${1:const text[]}, ${2:color}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:Float:drawdistance}, ${7:attachedplayer = INVALID_PLAYER_ID}, ${8:attachedvehicle = INVALID_VEHICLE_ID}, ${9:testlos = 0}, ${10:Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD}, ${11:worlds[] = { -1 }}, ${12:interiors[] = { -1 }}, ${13:players[] = { -1 }}, ${14:STREAMER_TAG_AREA areas[] = { STREAMER_TAG_AREA -1 }}, ${15:maxworlds = sizeof worlds}, ${16:maxinteriors = sizeof interiors}, ${17:maxplayers = sizeof players}, ${18:maxareas = sizeof areas})$0"
    },
    "CreateDynamicCircleEx": {
        "prefix": "CreateDynamicCircleEx",
        "body":
            "CreateDynamicCircleEx(${1:Float:x}, ${2:Float:y}, ${3:Float:size}, ${4:worlds[] = { -1 }}, ${5:interiors[] = { -1 }}, ${6:players[] = { -1 }}, ${7:maxworlds = sizeof worlds}, ${8:maxinteriors = sizeof interiors}, ${9:maxplayers = sizeof players})$0"
    },
    "CreateDynamicCylinderEx": {
        "prefix": "CreateDynamicCylinderEx",
        "body":
            "CreateDynamicCylinderEx(${1:Float:x}, ${2:Float:y}, ${3:Float:minz}, ${4:Float:maxz}, ${5:Float:size}, ${6:worlds[] = { -1 }}, ${7:interiors[] = { -1 }}, ${8:players[] = { -1 }}, ${9:maxworlds = sizeof worlds}, ${10:maxinteriors = sizeof interiors}, ${11:maxplayers = sizeof players})$0"
    },
    "CreateDynamicSphereEx": {
        "prefix": "CreateDynamicSphereEx",
        "body":
            "CreateDynamicSphereEx(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:size}, ${5:worlds[] = { -1 }}, ${6:interiors[] = { -1 }}, ${7:players[] = { -1 }}, ${8:maxworlds = sizeof worlds}, ${9:maxinteriors = sizeof interiors}, ${10:maxplayers = sizeof players})$0"
    },
    "CreateDynamicRectangleEx": {
        "prefix": "CreateDynamicRectangleEx",
        "body":
            "CreateDynamicRectangleEx(${1:Float:minx}, ${2:Float:miny}, ${3:Float:maxx}, ${4:Float:maxy}, ${5:worlds[] = { -1 }}, ${6:interiors[] = { -1 }}, ${7:players[] = { -1 }}, ${8:maxworlds = sizeof worlds}, ${9:maxinteriors = sizeof interiors}, ${10:maxplayers = sizeof players})$0"
    },
    "CreateDynamicCuboidEx": {
        "prefix": "CreateDynamicCuboidEx",
        "body":
            "CreateDynamicCuboidEx(${1:Float:minx}, ${2:Float:miny}, ${3:Float:minz}, ${4:Float:maxx}, ${5:Float:maxy}, ${6:Float:maxz}, ${7:worlds[] = { -1 }}, ${8:interiors[] = { -1 }}, ${9:players[] = { -1 }}, ${10:maxworlds = sizeof worlds}, ${11:maxinteriors = sizeof interiors}, ${12:maxplayers = sizeof players})$0"
    },
    "CreateDynamicCubeEx": {
        "prefix": "CreateDynamicCubeEx",
        "body":
            "CreateDynamicCubeEx(${1:Float:minx}, ${2:Float:miny}, ${3:Float:minz}, ${4:Float:maxx}, ${5:Float:maxy}, ${6:Float:maxz}, ${7:worlds[] = { -1 }}, ${8:interiors[] = { -1 }}, ${9:players[] = { -1 }}, ${10:maxworlds = sizeof worlds}, ${11:maxinteriors = sizeof interiors}, ${12:maxplayers = sizeof players})$0"
    },
    "CreateDynamicPolygonEx": {
        "prefix": "CreateDynamicPolygonEx",
        "body":
            "CreateDynamicPolygonEx(${1:Float:points[]}, ${2:Float:minz = -FLOAT_INFINITY}, ${3:Float:maxz = FLOAT_INFINITY}, ${4:maxpoints = sizeof points}, ${5:worlds[] = { -1 }}, ${6:interiors[] = { -1 }}, ${7:players[] = { -1 }}, ${8:maxworlds = sizeof worlds}, ${9:maxinteriors = sizeof interiors}, ${10:maxplayers = sizeof players})$0"
    },
    "Streamer_TickRate": {
        "prefix": "Streamer_TickRate",
        "body": "Streamer_TickRate(${1:rate})$0"
    },
    "Streamer_MaxItems": {
        "prefix": "Streamer_MaxItems",
        "body": "Streamer_MaxItems(${1:type}, ${2:items})$0"
    },
    "Streamer_VisibleItems": {
        "prefix": "Streamer_VisibleItems",
        "body": "Streamer_VisibleItems(${1:type}, ${2:items}, ${3:playerid = -1})$0"
    },
    "Streamer_CellDistance": {
        "prefix": "Streamer_CellDistance",
        "body": "Streamer_CellDistance(${1:Float:distance})$0"
    },
    "Streamer_CellSize": {
        "prefix": "Streamer_CellSize",
        "body": "Streamer_CellSize(${1:Float:size})$0"
    },
    "Streamer_CallbackHook": {
        "prefix": "Streamer_CallbackHook",
        "body": "Streamer_CallbackHook(${1:callback}, ${2:...})$0"
    },
    "DestroyAllDynamicObjects": {
        "prefix": "DestroyAllDynamicObjects",
        "body": "DestroyAllDynamicObjects()$0"
    },
    "CountDynamicObjects": {
        "prefix": "CountDynamicObjects",
        "body": "CountDynamicObjects()$0"
    },
    "DestroyAllDynamicPickups": {
        "prefix": "DestroyAllDynamicPickups",
        "body": "DestroyAllDynamicPickups()$0"
    },
    "CountDynamicPickups": {
        "prefix": "CountDynamicPickups",
        "body": "CountDynamicPickups()$0"
    },
    "DestroyAllDynamicCPs": {
        "prefix": "DestroyAllDynamicCPs",
        "body": "DestroyAllDynamicCPs()$0"
    },
    "CountDynamicCPs": {
        "prefix": "CountDynamicCPs",
        "body": "CountDynamicCPs()$0"
    },
    "DestroyAllDynamicRaceCPs": {
        "prefix": "DestroyAllDynamicRaceCPs",
        "body": "DestroyAllDynamicRaceCPs()$0"
    },
    "CountDynamicRaceCPs": {
        "prefix": "CountDynamicRaceCPs",
        "body": "CountDynamicRaceCPs()$0"
    },
    "DestroyAllDynamicMapIcons": {
        "prefix": "DestroyAllDynamicMapIcons",
        "body": "DestroyAllDynamicMapIcons()$0"
    },
    "CountDynamicMapIcons": {
        "prefix": "CountDynamicMapIcons",
        "body": "CountDynamicMapIcons()$0"
    },
    "DestroyAllDynamic3DTextLabels": {
        "prefix": "DestroyAllDynamic3DTextLabels",
        "body": "DestroyAllDynamic3DTextLabels()$0"
    },
    "CountDynamic3DTextLabels": {
        "prefix": "CountDynamic3DTextLabels",
        "body": "CountDynamic3DTextLabels()$0"
    },
    "DestroyAllDynamicAreas": {
        "prefix": "DestroyAllDynamicAreas",
        "body": "DestroyAllDynamicAreas()$0"
    },
    "CountDynamicAreas": {
        "prefix": "CountDynamicAreas",
        "body": "CountDynamicAreas()$0"
    },
    "OnDynamicObjectMoved": {
        "prefix": "OnDynamicObjectMoved",
        "body": "OnDynamicObjectMoved(${1:STREAMER_TAG_OBJECT objectid})$0"
    },
    "OnPlayerEditDynamicObject": {
        "prefix": "OnPlayerEditDynamicObject",
        "body":
            "OnPlayerEditDynamicObject(${1:playerid}, ${2:STREAMER_TAG_OBJECT objectid}, ${3:response}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z}, ${7:Float:rx}, ${8:Float:ry}, ${9:Float:rz})$0"
    },
    "OnPlayerSelectDynamicObject": {
        "prefix": "OnPlayerSelectDynamicObject",
        "body":
            "OnPlayerSelectDynamicObject(${1:playerid}, ${2:STREAMER_TAG_OBJECT objectid}, ${3:modelid}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z})$0"
    },
    "OnPlayerShootDynamicObject": {
        "prefix": "OnPlayerShootDynamicObject",
        "body":
            "OnPlayerShootDynamicObject(${1:playerid}, ${2:weaponid}, ${3:STREAMER_TAG_OBJECT objectid}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z})$0"
    },
    "OnPlayerPickUpDynamicPickup": {
        "prefix": "OnPlayerPickUpDynamicPickup",
        "body": "OnPlayerPickUpDynamicPickup(${1:playerid}, ${2:STREAMER_TAG_PICKUP pickupid})$0"
    },
    "OnPlayerEnterDynamicCP": {
        "prefix": "OnPlayerEnterDynamicCP",
        "body": "OnPlayerEnterDynamicCP(${1:playerid}, ${2:STREAMER_TAG_CP checkpointid})$0"
    },
    "OnPlayerLeaveDynamicCP": {
        "prefix": "OnPlayerLeaveDynamicCP",
        "body": "OnPlayerLeaveDynamicCP(${1:playerid}, ${2:STREAMER_TAG_CP checkpointid})$0"
    },
    "OnPlayerEnterDynamicRaceCP": {
        "prefix": "OnPlayerEnterDynamicRaceCP",
        "body":
            "OnPlayerEnterDynamicRaceCP(${1:playerid}, ${2:STREAMER_TAG_RACE_CP checkpointid})$0"
    },
    "OnPlayerLeaveDynamicRaceCP": {
        "prefix": "OnPlayerLeaveDynamicRaceCP",
        "body":
            "OnPlayerLeaveDynamicRaceCP(${1:playerid}, ${2:STREAMER_TAG_RACE_CP checkpointid})$0"
    },
    "OnPlayerEnterDynamicArea": {
        "prefix": "OnPlayerEnterDynamicArea",
        "body": "OnPlayerEnterDynamicArea(${1:playerid}, ${2:STREAMER_TAG_AREA areaid})$0"
    },
    "OnPlayerLeaveDynamicArea": {
        "prefix": "OnPlayerLeaveDynamicArea",
        "body": "OnPlayerLeaveDynamicArea(${1:playerid}, ${2:STREAMER_TAG_AREA areaid})$0"
    },
    "OnPlayerGiveDamageDynamicActor": {
        "prefix": "OnPlayerGiveDamageDynamicActor",
        "body": "OnPlayerGiveDamageDynamicActor(${1:playerid}, ${2:actorid}, ${3:Float:amount}, ${4:weaponid}, ${5:bodypart})$0"
    },
    "OnDynamicActorStreamIn": {
        "prefix": "OnDynamicActorStreamIn",
        "body": "OnDynamicActorStreamIn(${1:actorid}, ${2:forplayerid})$0"
    },
    "OnDynamicActorStreamOut": {
        "prefix": "OnDynamicActorStreamOut",
        "body": "OnDynamicActorStreamOut(${1:actorid}, ${2:forplayerid})$0"
    },
    "Streamer_OnItemStreamIn": {
        "prefix": "Streamer_OnItemStreamIn",
        "body": "Streamer_OnItemStreamIn(${1:type}, ${2:id})$0"
    },
    "Streamer_OnItemStreamOut": {
        "prefix": "Streamer_OnItemStreamOut",
        "body": "Streamer_OnItemStreamOut(${1:type}, ${2:id})$0"
    },
    "CreateDynamicActor": {
        "prefix": "CreateDynamicActor",
        "body": "CreateDynamicActor(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:r}, ${6:invulnerable = 1}, ${7:Float:health = 100.0}, ${8:worldid = -1}, ${9:interiorid = -1}, ${10:playerid = -1}, ${11:Float:streamdistance = STREAMER_ACTOR_SD}, ${12:areaid = -1}, ${13:priority = 0})$0"
    },
    "DestroyDynamicActor": {
        "prefix": "DestroyDynamicActor",
        "body": "DestroyDynamicActor(${1:actorid})$0"
    },
    "IsValidDynamicActor": {
        "prefix": "IsValidDynamicActor",
        "body": "IsValidDynamicActor(${1:actorid})$0"
    },
    "IsDynamicActorStreamedIn": {
        "prefix": "IsDynamicActorStreamedIn",
        "body": "IsDynamicActorStreamedIn(${1:actorid}, ${2:forplayerid})$0"
    },
    "GetDynamicActorVirtualWorld": {
        "prefix": "GetDynamicActorVirtualWorld",
        "body": "GetDynamicActorVirtualWorld(${1:actorid})$0"
    },
    "SetDynamicActorVirtualWorld": {
        "prefix": "SetDynamicActorVirtualWorld",
        "body": "SetDynamicActorVirtualWorld(${1:actorid}, ${2:vworld})$0"
    },
    "ApplyDynamicActorAnimation": {
        "prefix": "ApplyDynamicActorAnimation",
        "body": "ApplyDynamicActorAnimation(${1:actorid}, ${2:animlib[]}, ${3:animname[]}, ${4:Float:fdelta}, ${5:loop}, ${6:lockx}, ${7:locky}, ${8:freeze}, ${9:time})$0"
    },
    "ClearDynamicActorAnimations": {
        "prefix": "ClearDynamicActorAnimations",
        "body": "ClearDynamicActorAnimations(${1:actorid})$0"
    },
    "GetDynamicActorFacingAngle": {
        "prefix": "GetDynamicActorFacingAngle",
        "body": "GetDynamicActorFacingAngle(${1:actorid}, ${2:&Float:ang})$0"
    },
    "SetDynamicActorFacingAngle": {
        "prefix": "SetDynamicActorFacingAngle",
        "body": "SetDynamicActorFacingAngle(${1:actorid}, ${2:Float:ang})$0"
    },
    "GetDynamicActorPos": {
        "prefix": "GetDynamicActorPos",
        "body": "GetDynamicActorPos(${1:actorid}, ${2:&Float:x}, ${3:&Float:y}, ${4:&Float:z})$0"
    },
    "SetDynamicActorPos": {
        "prefix": "SetDynamicActorPos",
        "body": "SetDynamicActorPos(${1:actorid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"
    },
    "GetDynamicActorHealth": {
        "prefix": "GetDynamicActorHealth",
        "body": "GetDynamicActorHealth(${1:actorid}, ${2:&Float:health})$0"
    },
    "SetDynamicActorHealth": {
        "prefix": "SetDynamicActorHealth",
        "body": "SetDynamicActorHealth(${1:actorid}, ${2:Float:health})$0"
    },
    "SetDynamicActorInvulnerable": {
        "prefix": "SetDynamicActorInvulnerable",
        "body": "SetDynamicActorInvulnerable(${1:actorid}, ${2:invulnerable = 1})$0"
    },
    "IsDynamicActorInvulnerable": {
        "prefix": "IsDynamicActorInvulnerable",
        "body": "IsDynamicActorInvulnerable(${1:actorid})$0"
    },
    "GetPlayerTargetDynamicActor": {
        "prefix": "GetPlayerTargetDynamicActor",
        "body": "GetPlayerTargetDynamicActor(${1:playerid})$0"
    },
    "GetPlayerCameraTargetDynActor": {
        "prefix": "GetPlayerCameraTargetDynActor",
        "body": "GetPlayerCameraTargetDynActor(${1:playerid})$0"
    },
    "Streamer_OnPluginError": {
        "prefix": "Streamer_OnPluginError",
        "body": "Streamer_OnPluginError(${1:error[]})$0"
    },
    "INI_IsEscapeSequence": {
        "prefix": "INI_IsEscapeSequence",
        "body": "INI_IsEscapeSequence(${1:str[]}, ${2:pos})$0"
    },
    "INI_ReverseWhitespace": {
        "prefix": "INI_ReverseWhitespace",
        "body": "INI_ReverseWhitespace(${1:str[]}, ${2:pos})$0"
    },
    "INI_IdentifyLineType": {
        "prefix": "INI_IdentifyLineType",
        "body": "INI_IdentifyLineType(${1:str[]}, ${2:p0s}, ${3:p0e}, ${4:p1s}, ${5:p1e}, ${6:p2s}, ${7:p2e}, ${8:cont})$0"
    },
    "INI_Open": {
        "prefix": "INI_Open",
        "body": "INI_Open(${1:filename[]})$0"
    },
    "INI_Load": {
        "prefix": "INI_Load",
        "body": "INI_Load(${1:filename[]}, ${2:bool:bExtra} = false, ${3:extra} = 0, ${4:bool:bLocal} = true)$0"
    },
    "INI_Close": {
        "prefix": "INI_Close",
        "body": "INI_Close(${1:INI:handle})$0"
    },
    "INI_DoParentTag": {
        "prefix": "INI_DoParentTag",
        "body": "INI_DoParentTag(${1:filename[]}, ${2:remoteformat[]}, ${3:bool:bFileFirst}, ${4:bool:bExtra}, ${5:extra}, ${6:bLocal}, ${7:bPassTag}, ${8:bFilter}, ${9:filter})$0"
    },
    "INI_SetTag": {
        "prefix": "INI_SetTag",
        "body": "INI_SetTag(${1:INI:file}, ${2:tag[]})$0"
    },
    "INI_DeleteTag": {
        "prefix": "INI_DeleteTag",
        "body": "INI_DeleteTag(${1:INI:file}, ${2:tag[]})$0"
    },
    "INI_ParseFile": {
        "prefix": "INI_ParseFile",
        "body": "INI_ParseFile(${1:filename[]}, ${2:remoteformat[]}, ${3:bool:bFileFirst}, ${4:bool:bExtra}, ${5:extra}, ${6:bLocal}, ${7:bPassTag}, ${8:bFilter}, ${9:filter})$0"
    },
    "INI_AddToBuffer": {
        "prefix": "INI_AddToBuffer",
        "body": "INI_AddToBuffer(${1:INI:file}, ${2:name[]}, ${3:data[]})$0"
    },
    "INI_WriteBuffer": {
        "prefix": "INI_WriteBuffer",
        "body": "INI_WriteBuffer(${1:INI:file})$0"
    },
    "INI_GetEntryText": {
        "prefix": "INI_GetEntryText",
        "body": "INI_GetEntryText(${1:str[]}, ${2:p0s}, ${3:p0e}, ${4:p1s}, ${5:p1e}, ${6:p2s}, ${7:p2e}, ${8:cont})$0"
    },
    "INI_RemoveEntry": {
        "prefix": "INI_RemoveEntry",
        "body": "INI_RemoveEntry(${1:INI:file}, ${2:name[]})$0"
    },
    "INI_FreeEntry": {
        "prefix": "INI_FreeEntry",
        "body": "INI_FreeEntry(${1:slot})$0"
    },
    "INI_TryGetValue": {
        "prefix": "INI_TryGetValue",
        "body": "INI_TryGetValue(${1:start}, ${2:end})$0"
    },
    "INI_WriteInt": {
        "prefix": "INI_WriteInt",
        "body": "INI_WriteInt(${1:INI:file}, ${2:name[]}, ${3:data})$0"
    },
    "INI_Int": {
        "prefix": "INI_Int",
        "body": "INI_Int(${1:name[]}, ${2:variable})$0"
    },
    "INI_WriteFloat": {
        "prefix": "INI_WriteFloat",
        "body": "INI_WriteFloat(${1:INI:file}, ${2:name[]}, ${3:Float:data})$0"
    },
    "INI_Float": {
        "prefix": "INI_Float",
        "body": "INI_Float(${1:name[]}, ${2:variable})$0"
    },
    "INI_WriteHex": {
        "prefix": "INI_WriteHex",
        "body": "INI_WriteHex(${1:INI:file}, ${2:name[]}, ${3:Float:data})$0"
    },
    "INI_Hex": {
        "prefix": "INI_Hex",
        "body": "INI_Hex(${1:name[]}, ${2:variable})$0"
    },
    "INI_WriteString": {
        "prefix": "INI_WriteString",
        "body": "INI_WriteString(${1:INI:file}, ${2:name[]}, ${3:data[]})$0"
    },
    "INI_String": {
        "prefix": "INI_String",
        "body": "INI_String(${1:name[]}, ${2:variable})$0"
    },
    "INI_FindString": {
        "prefix": "INI_FindString",
        "body": "INI_FindString(${1:str[]}, ${2:sub[]}, ${3:pos})$0"
    },
    "INI_WriteBool": {
        "prefix": "INI_WriteBool",
        "body": "INI_WriteBool(${1:INI:file}, ${2:name[]}, ${3:bool:data})$0"
    },
    "INI_Bool": {
        "prefix": "INI_Bool",
        "body": "INI_Bool(${1:name[]}, ${2:variable})$0"
    },
    "INI_WriteBin": {
        "prefix": "INI_WriteBin",
        "body": "INI_WriteBin(${1:name[]}, ${2:variable}, ${3:data})$0"
    },
    "INI_Bin": {
        "prefix": "INI_Bin",
        "body": "INI_Bin(${1:name[]}, ${2:variable})$0"
    },
    "INI_SetupCallbackName": {
        "prefix": "INI_SetupCallbackName",
        "body": "INI_SetupCallbackName(${1:fmat[]}, ${2:const remoteFormat[]}, ${3:filename[]}, ${4:const bool:bFileFirst})$0"
    },
    "INI_GetCallback": {
        "prefix": "INI_GetCallback",
        "body": "INI_GetCallback(${1:callback[E_CALLBACK_DATA]}, ${2:const format[]}, ${3:tag[]}, ${4:const input[]}, ${5:const len}, ${6:tag[]}, ${7:callbackFormat[]}, ${8:const bool:remote})$0"
    },
    "dini_Exists": {
        "prefix": "dini_Exists",
        "body": "dini_Exists(${1:const filename[]})$0"
    },
    "dini_Remove": {
        "prefix": "dini_Remove",
        "body": "dini_Remove(${1:const filename[]})$0"
    },
    "dini_Create": {
        "prefix": "dini_Create",
        "body": "dini_Create(${1:const filename[]})$0"
    },
    "dini_Set": {
        "prefix": "dini_Set",
        "body": "dini_Set(${1:const filename[]}, ${2:const key[]}, ${3:const value[]})$0"
    },
    "dini_IntSet": {
        "prefix": "dini_IntSet",
        "body": "dini_IntSet(${1:const filename[]}, ${2:const key[]}, ${3:value})$0"
    },
    "dini_FloatSet": {
        "prefix": "dini_FloatSet",
        "body": "dini_FloatSet(${1:const filename[]}, ${2:const key[]}, ${3:Float:value})$0"
    },
    "dini_BoolSet": {
        "prefix": "dini_BoolSet",
        "body": "dini_BoolSet(${1:const filename[]}, ${2:const key[]}, ${3:bool:value})$0"
    },
    "dini_Get": {
        "prefix": "dini_Get",
        "body": "dini_Get(${1:const filename[]}, ${2:const key[]})$0"
    },
    "dini_Int": {
        "prefix": "dini_Int",
        "body": "dini_Int(${1:const filename[]}, ${2:const key[]})$0"
    },
    "dini_Float": {
        "prefix": "dini_Float",
        "body": "dini_Float(${1:const filename[]}, ${2:const key[]})$0"
    },
    "dini_Bool": {
        "prefix": "dini_Bool",
        "body": "dini_Bool(${1:const filename[]}, ${2:const key[]})$0"
    },
    "dini_Unset": {
        "prefix": "dini_Unset",
        "body": "dini_Unset(${1:const filename[]}, ${2:const key[]})$0"
    },
    "dini_Isset": {
        "prefix": "dini_Isset",
        "body": "dini_Isset(${1:const filename[]}, ${2:const key[]})$0"
    },
    "DINI_StripNewLine": {
        "prefix": "DINI_StripNewLine",
        "body": "DINI_StripNewLine(${1:const string[]})$0"
    },
    "DINI_fcopytextfile": {
        "prefix": "DINI_fcopytextfile",
        "body": "DINI_fcopytextfile(${1:const filename[]}, ${2:const newfilename[]})$0"
    },
    "dini_Timeout": {
        "prefix": "DINI_fcopytextfile",
        "body": "DINI_fcopytextfile(${1:const filename[]})$0"
    },
    "dini_NumKeys": {
        "prefix": "dini_NumKeys",
        "body": "dini_NumKeys(${1:const filename[]})$0"
    },
    "dini_GetKeyName": {
        "prefix": "dini_GetKeyName",
        "body": "dini_GetKeyName(${1:const filename[]}, ${2:keyid})$0"
    },
    "DINI_frenametextfile": {
        "prefix": "DINI_frenametextfile",
        "body": "DINI_frenametextfile(${1:const filename[]}, ${2:const newfilename[]})$0"
    },
    "strpack": {
        "prefix": "strpack",
        "body": "strpack(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"
    },
    "strunpack": {
        "prefix": "strunpack",
        "body": "strunpack(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"
    },
    "strcpy": {
        "prefix": "strcp",
        "body": "strcpy(${1:dest[]}, ${2:src[]}, ${3:maxlength=sizeof dest})$0"
    },
    "uudecode": {
        "prefix": "uudecode",
        "body": "uudecode(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"
    },
    "uuencode": {
        "prefix": "uuencode",
        "body":
            "uuencode(${1:dest[]}, ${2:const source[]}, ${3:numbytes}, ${4:maxlength=sizeof dest})$0"
    },
    "memcpy": {
        "prefix": "memcpy",
        "body":
            "memcpy(${1:dest[]}, ${2:const source[]}, ${3:index=0}, ${4:numbytes}, ${5:maxlength=sizeof dest})$0"
    },
    "sprintf": {
        "prefix": "sprintf",
        "body": "sprintf(${1:const fmat[]}, ${2:...})$0"
    },
    "strgetfirstc": {
        "prefix": "strgetfirstc",
        "body": "strgetfirstc(${1:const string[]})$0"
    },
    "strgetc": {
        "prefix": "strgetc",
        "body": "strgetc(${1:const string[]}, ${2:index})$0"
    },
    "strsize": {
        "prefix": "strsize",
        "body": "strsize(${1:const string[]})$0"
    },
    "isempty": {
        "prefix": "isempty",
        "body": "isempty(${1:const string[]})$0"
    },
    "isequal": {
        "prefix": "isequal",
        "body": "isequal(${1:const str1[]}, ${2:const str2[]}, ${3:bool:ignorecase = false})$0"
    },
    "strexplode": {
        "prefix": "strexplode",
        "body":
            "strexplode(${1:output[][]}, ${2:const input[]}, ${3:const delimiter[] = !\"}, ${4:limit = cellmax}, ${5:bool:trim = true}, ${6:bool:ignorecase = false}, ${7:size1 = sizeof(output})$0"
    },
    "strimplode": {
        "prefix": "strimplode",
        "body": "strimplode(${1:const glue[]}, ${2:output[]}, ${3:maxlength = sizeof(output})$0"
    },
    "strreplace": {
        "prefix": "strreplace",
        "body":
            "strreplace(${1:string[]}, ${2:const search[]}, ${3:const replacement[]}, ${4:bool:ignorecase = false}, ${5:pos = 0}, ${6:limit = -1}, ${7:maxlength = sizeof(string})$0"
    },
    "strtrim": {
        "prefix": "strtrim",
        "body":
            "strtrim(${1:string[]}, ${2:const chars[] = !\"\"}, ${3:string_edges:edge = edge_both})$0"
    },
    "strpad": {
        "prefix": "strpad",
        "body":
            "strpad(${1:string[]}, ${2:length}, ${3:const substr[] = !\" \"}, ${4:string_edges:edge = edge_both}, ${5:bool:trim_first = true}, ${6:const trim_chars[] = !\"\"}, ${7:maxlength = sizeof(string})$0"
    },
    "strwrap": {
        "prefix": "strwrap",
        "body":
            "strwrap(${1:const left[]}, ${2:string[]}, ${3:const right[]}, ${4:maxlength = sizeof(string})$0"
    },
    "strcount": {
        "prefix": "strcount",
        "body":
            "strcount(${1:const string[]}, ${2:const sub[]}, ${3:bool:ignorecase = false}, ${4:bool:count_overlapped = false})$0"
    },
    "strfromliteral": {
        "prefix": "strfromliteral",
        "body":
            "strfromliteral(${1:output[]}, ${2:const input[]}, ${3:pos = 0}, ${4:maxlength = sizeof(output})$0"
    },
    "strtoliteral": {
        "prefix": "strtoliteral",
        "body": "strtoliteral(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"
    },
    "strfrombin": {
        "prefix": "strfrombin",
        "body": "strfrombin(${1:output[]}, ${2:const input[]}, ${3:inputlength = sizeof(input})$0"
    },
    "strtobin": {
        "prefix": "strtobin",
        "body": "strtobin(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"
    },
    "strcatmid": {
        "prefix": "strcatmid",
        "body":
            "strcatmid(${1:dest[]}, ${2:const source[]}, ${3:start = 0}, ${4:end = -1}, ${5:maxlength = sizeof(dest})$0"
    },
    "utf8encode": {
        "prefix": "utf8encode",
        "body": "utf8encode(${1:dest[]}, ${2:const source[]}, ${3:maxlength = sizeof(dest})$0"
    },
    "utf8decode": {
        "prefix": "utf8decode",
        "body": "utf8decode(${1:dest[]}, ${2:const source[]}, ${3:maxlength = sizeof(dest})$0"
    },
    "strurldecode": {
        "prefix": "strurldecode",
        "body": "strurldecode(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"
    },
    "strurlencode": {
        "prefix": "strurlencode",
        "body": "strurlencode(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"
    },
    "ret_strcatmid": {
        "prefix": "ret_strcatmid",
        "body":
            "ret_strcatmid(${1:const string[]}, ${2:const source[]}, ${3:start = 0}, ${4:end = -1})$0"
    },
    "ret_strfrombin": {
        "prefix": "ret_strfrombin",
        "body": "ret_strfrombin(${1:const input[]}, ${2:inputlength = sizeof(input})$0"
    },
    "ret_strimplode": {
        "prefix": "ret_strimplode",
        "body": "ret_strimplode(${1:const glue[]}, ${2:...})$0"
    },
    "ret_strreplace": {
        "prefix": "ret_strreplace",
        "body":
            "ret_strreplace(${1:const string[]}, ${2:const search[]}, ${3:const replacement[]}, ${4:bool:ignorecase = false}, ${5:pos = 0}, ${6:limit = -1})$0"
    },
    "ret_strfromliteral": {
        "prefix": "ret_strfromliteral",
        "body": "ret_strfromliteral(${1:const input[]}, ${2:pos = 0})$0"
    },
    "ret_strtoliteral": {
        "prefix": "ret_strtoliteral",
        "body": "ret_strtoliteral(${1:const input[]}, ${2:bool:paranoid = true})$0"
    },
    "ret_strtrim": {
        "prefix": "ret_strtrim",
        "body":
            "ret_strtrim(${1:const string[]}, ${2:const chars[] = !\"\"}, ${3:string_edges:edge = edge_both})$0"
    },
    "ret_strpad": {
        "prefix": "ret_strpad",
        "body":
            "ret_strpad(${1:const string[]}, ${2:length}, ${3:const substr[] = !\" \"}, ${4:string_edges:edge = edge_both}, ${5:bool:trim_first = true}, ${6:const trim_chars[] = !\"\"})$0"
    },
    "ret_strwrap": {
        "prefix": "ret_strwrap",
        "body": "ret_strwrap(${1:const left[]}, ${2:const string[]}, ${3:const right[]})$0"
    },
    "ret_strurldecode": {
        "prefix": "ret_strurldecode",
        "body": "ret_strurldecode(${1:const input[]})$0"
    },
    "ret_strurlencode": {
        "prefix": "ret_strurlencode",
        "body": "ret_strurlencode(${1:const input[]}, ${2:bool:pack = false})$0"
    },
    "ret_utf8encode": {
        "prefix": "ret_utf8encode",
        "body": "ret_utf8encode(${1:const input[]})$0"
    },
    "ret_utf8decode": {
        "prefix": "ret_utf8decode",
        "body": "ret_utf8decode(${1:const input[]})$0"
    },
    "ret_strunpack": {
        "prefix": "ret_strunpack",
        "body": "ret_strunpack(${1:const source[]})$0"
    },
    "ret_strcat": {
        "prefix": "ret_strcat",
        "body": "ret_strcat(${1:const string1[]}, ${2:const string2[]})$0"
    },
    "ret_strmid": {
        "prefix": "ret_strmid",
        "body": "ret_strmid(${1:const source[]}, ${2:start}, ${3:end})$0"
    },
    "ret_strins": {
        "prefix": "ret_strins",
        "body":
            "ret_strins(${1:const string[]}, ${2:const substr[]}, ${3:pos}, ${4:maxlength = sizeof(string})$0"
    },
    "ret_strdel": {
        "prefix": "ret_strdel",
        "body": "ret_strdel(${1:const string[]}, ${2:start}, ${3:end})$0"
    },
    "ret_valstr": {
        "prefix": "ret_valstr",
        "body": "ret_valstr(${1:value}, ${2:bool:pack = false})$0"
    },
    "ret_GetPlayerName": {
        "prefix": "ret_GetPlayerName",
        "body": "ret_GetPlayerName(${1:playerid}, ${2:bool:pack = false})$0"
    },
    "zcmd_OnPlayerCommandReceived": {
        "prefix": "ZCMD OnPlayerCommandReceived",
        "body": "public OnPlayerCommandReceived(${1:playerid}, {$2:cmdtext[]})\n{\t\n${4}\n\treturn 1;\n}$0"
    },
    "zcmd_OnPlayerCommandPerformed": {
        "prefix": "ZCMD OnPlayerCommandPerformed",
        "body": "public OnPlayerCommandPerformed(${1:playerid}, ${2:cmdtext[]}, ${3:success})\n{\t\n${4}\n\treturn 1;\n}$0"
    }
}
